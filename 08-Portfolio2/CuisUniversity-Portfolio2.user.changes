

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (21 October 2023 11:57:14) as D:\Facu\Inge I\windows64\CuisUniversity-Portfolio2.image!


----End fileIn of D:\Facu\Inge I\windows64\Portfolio-Solucion.st----!

TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceTest category: 'Portfolio-Solucion' stamp: 'jgv 10/21/2023 11:59:25'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest methodsFor: 'no messages' stamp: 'jgv 10/21/2023 12:00:16'!
test01
	
	! !

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'jgv 10/21/2023 12:04:00'!
Object subclass: #Transference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest class methodsFor: 'no messages' stamp: 'jgv 10/21/2023 12:03:47'!
test01
	|anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: anAccount balance equals: 0.
	self assert: anotherAccount balance equals: 100.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:04:07'!
PASSED!

!methodRemoval: TransferenceTest class #test01 stamp: 'jgv 10/21/2023 12:04:44'!
test01
	|anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: anAccount balance equals: 0.
	self assert: anotherAccount balance equals: 100.!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/21/2023 12:04:55' prior: 50651053!
test01
	|anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: anAccount balance equals: 0.
	self assert: anotherAccount balance equals: 100.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:04:56'!
ERROR!
!Transference class methodsFor: 'instance creation' stamp: 'jgv 10/21/2023 12:05:04'!
transfer: aRenameMe1 from: anAccount to: anotherAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTransfer: aRenameMe1 from: anAccount to: anotherAccount ! !
!Transference class methodsFor: 'instance creation' stamp: 'jgv 10/21/2023 12:07:04' prior: 50651109!
transfer: aValue from: anAccount to: anotherAccount 
	
	Withdraw register: aValue on: anAccount. 
	Deposit register: aValue on: anotherAccount.
		
	^self new.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:07:12'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:07:13'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:07:25'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/21/2023 12:15:03'!
test02
	|anAccount anotherAccount transference|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: (anAccount hasRegistered: (transference deposit)).
	self assert: (anotherAccount hasRegistered: (transference withdraw)).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/21/2023 12:28:23' prior: 50651136!
test02
	|anAccount anotherAccount transference|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: (anAccount hasRegistered: transference withdraw).
	self assert: (anotherAccount hasRegistered: transference deposit).! !

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/21/2023 12:28:25'!
ERROR!
!Transference methodsFor: 'observers' stamp: 'jgv 10/21/2023 12:28:37'!
withdraw
	self shouldBeImplemented.! !

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'jgv 10/21/2023 12:28:53'!
Object subclass: #Transference
	instanceVariableNames: 'withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'observers' stamp: 'jgv 10/21/2023 12:28:51' prior: 50651169!
withdraw
	^withdraw! !

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/21/2023 12:28:56'!
FAILURE!
!Transference class methodsFor: 'instance creation' stamp: 'jgv 10/21/2023 12:30:23' prior: 50651120!
transfer: aValue from: anAccount to: anotherAccount 
	
	| deposit withdraw |
	withdraw := Withdraw register: aValue on: anAccount. 
	deposit := Deposit register: aValue on: anotherAccount.
		
	^self new initializeWithDeposit: deposit andWithdraw: withdraw.! !
!Transference class methodsFor: 'instance creation' stamp: 'jgv 10/21/2023 12:30:34' prior: 50651188!
transfer: aValue from: anAccount to: anotherAccount 
	
	| deposit withdraw |
	
	withdraw := Withdraw register: aValue on: anAccount. 
	deposit := Deposit register: aValue on: anotherAccount.
		
	^self new initializeWithDeposit: deposit andWithdraw: withdraw.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:30:47'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/21/2023 12:30:48'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:30:49'!
ERROR!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'jgv 10/21/2023 12:30:54'!
Object subclass: #Transference
	instanceVariableNames: 'withdraw deposit_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'jgv 10/21/2023 12:30:54'!
Object subclass: #Transference
	instanceVariableNames: 'withdraw deposit_CHANGE_ME withdraw_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference class methodsFor: 'instance creation' stamp: 'jgv 10/21/2023 12:31:42' prior: 50651200!
transfer: aValue from: anAccount to: anotherAccount 
	
	| aDeposit aWithdraw |
	
	aWithdraw := Withdraw register: aValue on: anAccount. 
	aDeposit := Deposit register: aValue on: anotherAccount.
		
	^self new initializeWithDeposit: aDeposit andWithdraw: aWithdraw.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:31:44'!
ERROR!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'jgv 10/21/2023 12:31:48'!
Object subclass: #Transference
	instanceVariableNames: 'withdraw deposit_CHANGE_ME withdraw_CHANGE_ME deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference methodsFor: 'initialization' stamp: 'jgv 10/21/2023 12:31:49'!
initializeWithDeposit: aDeposit andWithdraw: aWithdraw 
	self shouldBeImplemented.
	deposit := aDeposit.
	withdraw := aWithdraw.! !
!Transference methodsFor: 'initialization' stamp: 'jgv 10/21/2023 12:32:00' prior: 50651259!
initializeWithDeposit: aDeposit andWithdraw: aWithdraw 
	deposit := aDeposit.
	withdraw := aWithdraw.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:32:01'!
FAILURE!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:32:10'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/21/2023 12:32:10'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/21/2023 12:32:11'!
ERROR!
!Transference methodsFor: 'observers' stamp: 'jgv 10/21/2023 12:32:20'!
deposit
	self shouldBeImplemented.
	^deposit! !
!Transference methodsFor: 'observers' stamp: 'jgv 10/21/2023 12:32:26' prior: 50651283!
deposit
	^deposit! !

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/21/2023 12:32:27'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/21/2023 12:32:31'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/21/2023 12:32:35'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/21/2023 12:32:35'!
PASSED!

----QUIT----(21 October 2023 12:36:59) CuisUniversity-Portfolio2.image priorSource: 10197292!

----STARTUP---- (22 October 2023 15:38:57) as D:\Facu\Inge I\windows64\CuisUniversity-Portfolio2.image!


!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 15:39:22'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:39:22'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/22/2023 15:41:49' prior: 50651152!
test02
	|anAccount anotherAccount transference deposit transferenceDeposit transferenceWithdraw|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: anAccount.
		
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
		
	transferenceDeposit := transference deposit. 
	transferenceWithdraw := transference withdraw.
	
	self assert: (anAccount hasRegistered: transference withdraw).
	self assert: (anotherAccount hasRegistered: transference deposit).! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/22/2023 15:43:00' prior: 50651313!
test02
	|anAccount anotherAccount transference deposit transferenceDeposit transferenceWithdraw|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: anAccount.
		
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
		
	transferenceDeposit := transference deposit. 
	transferenceWithdraw := transference withdraw.
	
	self assert: (anAccount hasRegistered: transference withdraw).
	self assert: (anotherAccount hasRegistered: transference deposit).
	self assert: anAccount transactions equals: (OrderedCollection with: deposit with: transferenceWithdraw).
	self assert: anAccount transactions equals: (OrderedCollection with: transferenceDeposit ).! !

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:43:02'!
FAILURE!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:43:13'!
FAILURE!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:43:49'!
FAILURE!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/22/2023 15:45:27' prior: 50651334!
test02
	|anAccount anotherAccount transference deposit transferenceDeposit transferenceWithdraw|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: anAccount.
		
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
		
	transferenceDeposit := transference deposit. 
	transferenceWithdraw := transference withdraw.
	
	self assert: (anAccount hasRegistered: transference withdraw).
	self assert: (anotherAccount hasRegistered: transference deposit).
	self assert: anAccount transactions equals: (OrderedCollection with: deposit with: transferenceWithdraw).
	self assert: anotherAccount transactions equals: (OrderedCollection with: transferenceDeposit ).! !

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:45:28'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jgv 10/22/2023 15:45:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jgv 10/22/2023 15:45:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jgv 10/22/2023 15:45:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jgv 10/22/2023 15:45:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jgv 10/22/2023 15:45:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jgv 10/22/2023 15:45:29'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:45:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jgv 10/22/2023 15:45:29'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 15:45:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jgv 10/22/2023 15:45:29'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:45:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jgv 10/22/2023 15:45:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jgv 10/22/2023 15:45:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jgv 10/22/2023 15:45:30'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jgv 10/22/2023 15:45:30'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jgv 10/22/2023 15:45:31'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jgv 10/22/2023 15:45:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jgv 10/22/2023 15:45:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jgv 10/22/2023 15:45:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jgv 10/22/2023 15:45:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jgv 10/22/2023 15:45:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jgv 10/22/2023 15:45:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jgv 10/22/2023 15:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jgv 10/22/2023 15:45:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jgv 10/22/2023 15:45:32'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 15:45:32'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:45:32'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:45:36'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 15:45:36'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:45:37'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/22/2023 15:47:35'!
test03
	|anAccount anotherAccount transference|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.		
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
		
	! !

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 15:47:41'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 15:47:41'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:47:41'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 15:47:41'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/22/2023 15:48:39' prior: 50651502!
test03
	|anAccount anotherAccount transference|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.		
	
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: anAccount balance equals: -100.
	self assert: anotherAccount balance equals: 100.
		
	! !

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 15:48:43'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 15:48:43'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 15:48:43'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 15:48:43'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/22/2023 15:48:56' prior: 50651522!
test03
	|anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.		
	
	Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: anAccount balance equals: -100.
	self assert: anotherAccount balance equals: 100.
		
	! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/22/2023 15:49:27' prior: 50651545!
test03
	|anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.		
	
	Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: anAccount balance equals: -100.
	self assert: anotherAccount balance equals: 100.! !

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 15:52:15'!
Object subclass: #Transference
	instanceVariableNames: 'withdraw withdraw_CHANGE_ME deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 15:52:15'!
Object subclass: #Transference
	instanceVariableNames: 'withdraw deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferenceDeposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceDeposit category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 16:12:21'!
AccountTransaction subclass: #TransferenceDeposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferenceWithdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceWithdraw category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 16:12:33'!
AccountTransaction subclass: #TransferenceWithdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceWithdraw stamp: 'jgv 10/22/2023 16:14:41'!
AccountTransaction subclass: #TransferenceWithdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceDeposit stamp: 'jgv 10/22/2023 16:14:43'!
AccountTransaction subclass: #TransferenceDeposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/22/2023 16:18:58'!
test04
	|anAccount anotherAccount transference transferenceDeposit transferenceWithdraw|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.		
	
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
	
	transferenceDeposit := transference deposit.
	transferenceWithdraw := transference  withdraw.
	
	
	self assert: transferenceDeposit transference equals: transference.
	self assert: transferenceWithdraw transference equals: transference.
	self assert: transferenceDeposit transferenceWithdraw equals: transferenceWithdraw.
	self assert: transferenceWithdraw transferenceDeposit equals: transferenceDeposit.! !

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:19:03'!
ERROR!

Object subclass: #TransferenceTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceTransaction category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 16:19:22'!
Object subclass: #TransferenceTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTransaction class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:21:53'!
register: aValue on: aTransference.

! !
!TransferenceTransaction class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:22:59' prior: 50651668!
register: aValue on: aTransference.
	^self new initializeWithValue: aValue on: aTransference.! !
!TransferenceTransaction class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:24:19' prior: 50651673!
register: aValue on: aTransference.
	^self for: aValue on: aTransference.! !
!TransferenceTransaction methodsFor: 'no messages' stamp: 'jgv 10/22/2023 16:25:01'!
affectBalance: aBalance

	self subclassResponsibility.! !
!TransferenceTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/22/2023 16:25:24'!
transaction

	self subclassResponsibility.! !

Object subclass: #Transference
	instanceVariableNames: 'withdraw deposit value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 16:26:24'!
Object subclass: #Transference
	instanceVariableNames: 'withdraw deposit value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transference
	instanceVariableNames: 'transferenceWithdraw transferenceDeposit value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 16:26:40'!
Object subclass: #Transference
	instanceVariableNames: 'transferenceWithdraw transferenceDeposit value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTransaction class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:28:22'!
register: aValue on: anAccount in: aTransference
	^self for: aValue on: anAccount in: aTransference.! !
!Transference class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:28:59' prior: 50651236!
transfer: aValue from: anAccount to: anotherAccount 
	
	| aTransferenceDeposit aTransferenceWithdraw |
	
	aTransferenceWithdraw := Withdraw register: aValue on: anAccount. 
	aTransferenceDeposit := Deposit register: aValue on: anotherAccount.
		
	^self new initializeWithDeposit: aTransferenceDeposit andWithdraw: aTransferenceWithdraw.! !

TransferenceTransaction subclass: #TransferenceDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceDeposit category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 16:29:23'!
TransferenceTransaction subclass: #TransferenceDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferenceTransaction subclass: #TransferenceWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceWithdraw category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 16:29:30'!
TransferenceTransaction subclass: #TransferenceWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceDeposit class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:30:22'!
for: aValue on: account in: transference
! !
!TransferenceTransaction class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:31:34' prior: 50651724!
register: aValue on: anAccount in: aTransference
	|transferenceTransaction|
	
	transferenceTransaction := self for: aValue in: aTransference.
	anAccount register: transferenceTransaction.
	^transferenceTransaction.! !

!methodRemoval: TransferenceTransaction class #register:on:in: stamp: 'jgv 10/22/2023 16:31:51'!
register: aValue on: anAccount in: aTransference
	|transferenceTransaction|
	
	transferenceTransaction := self for: aValue in: aTransference.
	anAccount register: transferenceTransaction.
	^transferenceTransaction.!
!TransferenceTransaction class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:31:34'!
register: aValue on: anAccount in: aTransference
	|transferenceTransaction|
	
	transferenceTransaction := self for: aValue in: aTransference.
	anAccount register: transferenceTransaction.
	^transferenceTransaction.! !

!methodRemoval: TransferenceTransaction class #register:on: stamp: 'jgv 10/22/2023 16:33:43'!
register: aValue on: aTransference.
	^self for: aValue on: aTransference.!
!TransferenceDeposit class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:34:34'!
for: aValue in: transference
	
	
! !
!TransferenceDeposit class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:35:20' prior: 50651813!
for: aValue in: aTransference
	^self new initiliazeWithValue: aValue inTransference: aTransference 
! !

!methodRemoval: TransferenceDeposit class #for:on:in: stamp: 'jgv 10/22/2023 16:35:24'!
for: aValue on: account in: transference
!
!TransferenceDeposit methodsFor: 'initialization' stamp: 'jgv 10/22/2023 16:36:04'!
initiliazeWithValue: aValue inTransference: aTransference 
	! !
!TransferenceTransaction class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:36:21' prior: 50651797!
register: aValue on: anAccount in: aTransference
	|transferenceTransaction|
	
	transferenceTransaction := self for: aTransference.
	anAccount register: transferenceTransaction.
	^transferenceTransaction.! !
!TransferenceDeposit class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:37:03'!
for: aTransference
	^self new initiliazeWithTransference: aTransference
! !
!TransferenceDeposit class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:37:06' prior: 50651844!
for: aTransference
	^self new initiliazeWithTransference: aTransference.
! !

!methodRemoval: TransferenceDeposit class #for:in: stamp: 'jgv 10/22/2023 16:37:10'!
for: aValue in: aTransference
	^self new initiliazeWithValue: aValue inTransference: aTransference 
!
!TransferenceDeposit methodsFor: 'initialization' stamp: 'jgv 10/22/2023 16:37:34'!
initiliazeWithTransference: aTransference 
	^transference := aTransference.
	! !

!methodRemoval: TransferenceDeposit #initiliazeWithValue:inTransference: stamp: 'jgv 10/22/2023 16:37:41'!
initiliazeWithValue: aValue inTransference: aTransference 
	!
!TransferenceWithdraw class methodsFor: 'no messages' stamp: 'jgv 10/22/2023 16:38:12'!
for: aTransference
	^self new initializeWithTransference: aTransference.! !
!TransferenceWithdraw methodsFor: 'no messages' stamp: 'jgv 10/22/2023 16:38:29'!
initiliazeWithTransference: aTransference 
	^transference := aTransference.! !
!Transference class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:41:50' prior: 50651731!
transfer: aValue from: anAccount to: anotherAccount 
		
	^self new initializeWithValue: aValue.! !
!Transference methodsFor: 'initialization' stamp: 'jgv 10/22/2023 16:43:58'!
initializeWithValue: aValue from: anAccount to: anotherAccount
	value := aValue.
	transferenceWithdraw :=  TransferenceWithdraw register: aValue on: anAccount  in: self. 
	transferenceDeposit := Deposit register: aValue on: anotherAccount in: self.! !

!methodRemoval: Transference #initializeWithDeposit:andWithdraw: stamp: 'jgv 10/22/2023 16:44:02'!
initializeWithDeposit: aDeposit andWithdraw: aWithdraw 
	deposit := aDeposit.
	withdraw := aWithdraw.!

!methodRemoval: Transference #initializeWithValue:from:to: stamp: 'jgv 10/22/2023 16:44:02'!
initializeWithValue: aValue from: anAccount to: anotherAccount
	value := aValue.
	transferenceWithdraw :=  TransferenceWithdraw register: aValue on: anAccount  in: self. 
	transferenceDeposit := Deposit register: aValue on: anotherAccount in: self.!
!Transference methodsFor: 'initialization' stamp: 'jgv 10/22/2023 16:43:58'!
initializeWithValue: aValue from: anAccount to: anotherAccount
	value := aValue.
	transferenceWithdraw :=  TransferenceWithdraw register: aValue on: anAccount  in: self. 
	transferenceDeposit := Deposit register: aValue on: anotherAccount in: self.! !
!Transference class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:45:20' prior: 50651883!
transfer: aValue from: anAccount to: anotherAccount 
		
	^self new initializeWithValue: aValue from: anAccount to: anotherAccount.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:45:47'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:45:47'!
ERROR!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:45:47'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:45:47'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:45:49'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:46:09'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:46:38'!
ERROR!
!TransferenceWithdraw class methodsFor: 'instance creation' stamp: 'jgv 10/22/2023 16:47:13' prior: 50651872!
for: aTransference
	^self new initiliazeWithTransference: aTransference.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:47:21'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:47:21'!
ERROR!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:47:21'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:47:22'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:47:23'!
ERROR!
!Transference methodsFor: 'initialization' stamp: 'jgv 10/22/2023 16:47:52' prior: 50651917!
initializeWithValue: aValue from: anAccount to: anotherAccount
	value := aValue.
	transferenceWithdraw :=  TransferenceWithdraw register: aValue on: anAccount  in: self. 
	transferenceDeposit := TransferenceDeposit register: aValue on: anotherAccount in: self.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:47:54'!
ERROR!
!TransferenceWithdraw methodsFor: 'initialization' stamp: 'jgv 10/22/2023 16:50:06' prior: 50651877!
initiliazeWithTransference: aTransference 
	transference := aTransference.! !
!TransferenceDeposit methodsFor: 'initialization' stamp: 'jgv 10/22/2023 16:50:12' prior: 50651861!
initiliazeWithTransference: aTransference 
	transference := aTransference.
	! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:50:22'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:50:31'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:50:31'!
FAILURE!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:50:31'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:50:31'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:50:33'!
ERROR!
!TransferenceWithdraw methodsFor: 'balance' stamp: 'jgv 10/22/2023 16:50:47' overrides: 50651686!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!TransferenceWithdraw methodsFor: 'balance' stamp: 'jgv 10/22/2023 16:51:10' prior: 50652013 overrides: 50651686!
affectBalance: currentBalance 
	^currentBalance - transference value.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:51:13'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:51:57'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:51:57'!
FAILURE!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:51:57'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:51:58'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:51:59'!
ERROR!
!Transference methodsFor: 'observers' stamp: 'jgv 10/22/2023 16:52:56' overrides: 16902254!
value
	^value.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:52:59'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:53:00'!
FAILURE!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:53:00'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:53:00'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:53:01'!
ERROR!
!TransferenceDeposit methodsFor: 'balance' stamp: 'jgv 10/22/2023 16:53:11' overrides: 50651686!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!TransferenceDeposit methodsFor: 'balance' stamp: 'jgv 10/22/2023 16:53:21' prior: 50652055 overrides: 50651686!
affectBalance: currentBalance 
	^currentBalance + transference value.! !

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:53:22'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:53:24'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:53:25'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:53:25'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:53:25'!
FAILURE!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:53:27'!
FAILURE!
!Transference methodsFor: 'observers' stamp: 'jgv 10/22/2023 16:54:21' prior: 50651181!
withdraw
	^transferenceWithdraw.! !
!Transference methodsFor: 'observers' stamp: 'jgv 10/22/2023 16:54:35' prior: 50651288!
deposit
	^transferenceDeposit.! !

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:54:47'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:54:47'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:54:47'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:54:47'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:54:47'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:54:47'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:55:01'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:55:01'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:55:01'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:55:01'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:55:01'!
ERROR!
!TransferenceTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/22/2023 16:55:42'!
transference

	self subclassResponsibility.! !

!methodRemoval: TransferenceTransaction #transaction stamp: 'jgv 10/22/2023 16:55:45'!
transaction

	self subclassResponsibility.!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:55:52'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:55:52'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:55:52'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:55:52'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:55:52'!
ERROR!
!TransferenceDeposit methodsFor: 'transference' stamp: 'jgv 10/22/2023 16:56:06' overrides: 50652116!
transference
	self shouldBeImplemented.! !
!TransferenceDeposit methodsFor: 'transference' stamp: 'jgv 10/22/2023 16:56:12' prior: 50652138 overrides: 50652116!
transference
	^transference.! !

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:56:14'!
ERROR!
!TransferenceWithdraw methodsFor: 'transference' stamp: 'jgv 10/22/2023 16:56:22' overrides: 50652116!
transference
	self shouldBeImplemented.! !
!TransferenceWithdraw methodsFor: 'transference' stamp: 'jgv 10/22/2023 16:56:29' prior: 50652151 overrides: 50652116!
transference
	^transference.! !

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:56:30'!
ERROR!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:57:13'!
ERROR!
!TransferenceDeposit methodsFor: 'transference' stamp: 'jgv 10/22/2023 16:57:22'!
transferenceWithdraw
	self shouldBeImplemented.! !
!TransferenceDeposit methodsFor: 'transference' stamp: 'jgv 10/22/2023 16:57:36' prior: 50652166!
transferenceWithdraw
	^transference withdraw.! !

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:57:38'!
ERROR!
!TransferenceWithdraw methodsFor: 'transference' stamp: 'jgv 10/22/2023 16:57:44'!
transferenceDeposit
	self shouldBeImplemented.! !
!TransferenceWithdraw methodsFor: 'transference' stamp: 'jgv 10/22/2023 16:57:56' prior: 50652178!
transferenceDeposit
	^transference deposit.! !

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:57:57'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:57:57'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:57:58'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:57:58'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:57:58'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:58:56'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'jgv 10/22/2023 16:58:56'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'jgv 10/22/2023 16:58:56'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'jgv 10/22/2023 16:58:56'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'jgv 10/22/2023 16:58:56'!
PASSED!

TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportsTest category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 17:03:49'!
TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:04:53'!
test01TransferenceAffectBalanceCorrectlyInDepositantAndDepositedAccount
	|anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: anAccount balance equals: 0.
	self assert: anotherAccount balance equals: 100.! !

!methodRemoval: TransferenceTest #test01 stamp: 'jgv 10/22/2023 17:04:53'!
test01
	|anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: anAccount balance equals: 0.
	self assert: anotherAccount balance equals: 100.!
!TransferenceTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:05:36'!
test02TrasnferenceRegistersADepositInDepositedAccountAndAWithdrawInDepositantAccount
	|anAccount anotherAccount transference deposit transferenceDeposit transferenceWithdraw|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: anAccount.
		
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
		
	transferenceDeposit := transference deposit. 
	transferenceWithdraw := transference withdraw.
	
	self assert: (anAccount hasRegistered: transference withdraw).
	self assert: (anotherAccount hasRegistered: transference deposit).
	self assert: anAccount transactions equals: (OrderedCollection with: deposit with: transferenceWithdraw).
	self assert: anotherAccount transactions equals: (OrderedCollection with: transferenceDeposit ).! !

!methodRemoval: TransferenceTest #test02 stamp: 'jgv 10/22/2023 17:05:37'!
test02
	|anAccount anotherAccount transference deposit transferenceDeposit transferenceWithdraw|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: anAccount.
		
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
		
	transferenceDeposit := transference deposit. 
	transferenceWithdraw := transference withdraw.
	
	self assert: (anAccount hasRegistered: transference withdraw).
	self assert: (anotherAccount hasRegistered: transference deposit).
	self assert: anAccount transactions equals: (OrderedCollection with: deposit with: transferenceWithdraw).
	self assert: anotherAccount transactions equals: (OrderedCollection with: transferenceDeposit ).!
!TransferenceTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:06:16'!
test03CanMakeOverdraftTransference
	|anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.		
	
	Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: anAccount balance equals: -100.
	self assert: anotherAccount balance equals: 100.! !

!methodRemoval: TransferenceTest #test03 stamp: 'jgv 10/22/2023 17:06:16'!
test03
	|anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.		
	
	Transference transfer: 100 from: anAccount to: anotherAccount.
	
	self assert: anAccount balance equals: -100.
	self assert: anotherAccount balance equals: 100.!
!TransferenceTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:06:29'!
test04CanNavigateTransferenceLegsCorrectly
	|anAccount anotherAccount transference transferenceDeposit transferenceWithdraw|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.		
	
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
	
	transferenceDeposit := transference deposit.
	transferenceWithdraw := transference  withdraw.
	
	
	self assert: transferenceDeposit transference equals: transference.
	self assert: transferenceWithdraw transference equals: transference.
	self assert: transferenceDeposit transferenceWithdraw equals: transferenceWithdraw.
	self assert: transferenceWithdraw transferenceDeposit equals: transferenceDeposit.! !

!methodRemoval: TransferenceTest #test04 stamp: 'jgv 10/22/2023 17:06:29'!
test04
	|anAccount anotherAccount transference transferenceDeposit transferenceWithdraw|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.		
	
	transference := Transference transfer: 100 from: anAccount to: anotherAccount.
	
	transferenceDeposit := transference deposit.
	transferenceWithdraw := transference  withdraw.
	
	
	self assert: transferenceDeposit transference equals: transference.
	self assert: transferenceWithdraw transference equals: transference.
	self assert: transferenceDeposit transferenceWithdraw equals: transferenceWithdraw.
	self assert: transferenceWithdraw transferenceDeposit equals: transferenceDeposit.!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'jgv 10/22/2023 17:10:23'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:10:34'!
test01
	| aReport anAccount |
	anAccount := ReceptiveAccount new.
	
	aReport := Report new.
	
	self assert: '' equals: aReport accountSummary: anAccount.! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:11:45' prior: 50652383!
test01
	| aReport anAccount |
	anAccount := ReceptiveAccount new.
	
	aReport := Report new.
	
	self assert: '' equals: (aReport accountSummary: anAccount).! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:11:46'!
ERROR!
!Report methodsFor: 'reports' stamp: 'jgv 10/22/2023 17:11:53'!
accountSummary: anAccount 
	self shouldBeImplemented.! !
!Report methodsFor: 'reports' stamp: 'jgv 10/22/2023 17:12:00' prior: 50652401!
accountSummary: anAccount 
	^''.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:12:01'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:12:02'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:13:47'!
test02
	| aReport anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	
	aReport := Report new.
	
	self assert: 'Depósito por 100' equals: (aReport accountSummary: anAccount).! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:14:20' prior: 50652391!
test01
	| aReport anAccount |
	anAccount := ReceptiveAccount new.
	
	aReport := Report new.
	
	self assert: 'Balance = 0' equals: (aReport accountSummary: anAccount).! !
!Report methodsFor: 'reports' stamp: 'jgv 10/22/2023 17:14:36' prior: 50652406!
accountSummary: anAccount 
	^'Balance = 0'.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:14:41'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:14:41'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:14:41'!
FAILURE!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:14:42'!
FAILURE!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:14:47'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:15:30' prior: 50652424!
test01
	| aReport anAccount |
	anAccount := ReceptiveAccount new.
	
	aReport := Report new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: (aReport accountSummary: anAccount).! !
!Report methodsFor: 'reports' stamp: 'jgv 10/22/2023 17:15:49' prior: 50652432!
accountSummary: anAccount 
	^OrderedCollection with: 'Balance = 0'.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:15:58'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:16:40' prior: 50652414!
test02
	| aReport anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	
	aReport := Report new.
	
	self assert: (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100') equals: (aReport accountSummary: anAccount).! !

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:16:43'!
FAILURE!
!Report methodsFor: 'reports' stamp: 'jgv 10/22/2023 17:23:29' prior: 50652457!
accountSummary: anAccount 
	^anAccount generateSummary.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:23:32'!
ERROR!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:23:32'!
ERROR!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:23:36'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:23:46'!
generateSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:26:15' prior: 50652491!
generateSummary
	transactions isEmpty ifTrue: [ ^OrderedCollection with: 'Balance = 0'].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:27:10' prior: 50652496!
generateSummary
	transactions isEmpty ifTrue: [ ^OrderedCollection with: 'Balance = 0'].
	^OrderedCollection with: 'Depósito por 100' with: 'Balance = 100'.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:27:12'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:27:14'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:27:14'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:27:14'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:27:21'!
test03
	| aReport anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	
	aReport := Report new.
	
	self assert: (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100') equals: (aReport accountSummary: anAccount).! !

	Withdraw register: 50 on: anAccount.!

	Withdraw register: 50 on: anAccount.!

	anAccount := ReceptiveAccount new.!

	Deposit register: 100 on: anAccount.!

	Withdraw register: 50 on: anAccount.!

	anAccount  transactions !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:32:37' prior: 50652519!
test03
	| aReport anAccount anAccountSumary anotherAccount |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	aReport := Report new.
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferenci de 25' with: 'Balance = 100'.
	self assert: (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100') equals: (aReport accountSummary: anAccount).! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:33:18' prior: 50652537!
test03
	| aReport anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	aReport := Report new.
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100') equals: (aReport accountSummary: anAccount).! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:33:58' prior: 50652559!
test03
	| aReport anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	aReport := Report new.
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (aReport accountSummary: anAccount).
	self assert: anotherAccountSumary equals: (aReport accountSummary: anotherAccount ).! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 17:34:02' prior: 50652585!
test03
	| aReport anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	aReport := Report new.
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (aReport accountSummary: anAccount).
	self assert: anotherAccountSumary equals: (aReport accountSummary: anotherAccount).! !

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:34:03'!
FAILURE!

'asdfdsfsdf',1!

'asdfdsfsdf',1 asString.!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:41:21' prior: 50652502!
generateSummary
	
	transactions inject: OrderedCollection new into: [:summary :transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				summary add: 'Depósito por ', transaction value asString .
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				summary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				summary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				summary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:42:34' prior: 50652643!
generateSummary
	|transactionsSi|
	transactions inject: OrderedCollection new into: [:summary :transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				summary add: 'Depósito por ', transaction value asString .
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				summary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				summary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				summary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jgv 10/22/2023 17:42:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jgv 10/22/2023 17:42:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jgv 10/22/2023 17:42:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jgv 10/22/2023 17:42:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jgv 10/22/2023 17:42:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jgv 10/22/2023 17:42:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jgv 10/22/2023 17:42:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jgv 10/22/2023 17:42:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jgv 10/22/2023 17:42:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jgv 10/22/2023 17:42:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jgv 10/22/2023 17:42:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jgv 10/22/2023 17:42:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jgv 10/22/2023 17:42:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jgv 10/22/2023 17:42:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jgv 10/22/2023 17:42:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jgv 10/22/2023 17:42:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jgv 10/22/2023 17:42:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jgv 10/22/2023 17:42:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jgv 10/22/2023 17:42:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jgv 10/22/2023 17:42:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jgv 10/22/2023 17:42:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jgv 10/22/2023 17:42:38'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:42:38'!
FAILURE!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:42:38'!
FAILURE!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:42:39'!
ERROR!

!testRun: #TransferenceTest #test01TransferenceAffectBalanceCorrectlyInDepositantAndDepositedAccount stamp: 'jgv 10/22/2023 17:42:39'!
PASSED!

!testRun: #TransferenceTest #test02TrasnferenceRegistersADepositInDepositedAccountAndAWithdrawInDepositantAccount stamp: 'jgv 10/22/2023 17:42:39'!
PASSED!

!testRun: #TransferenceTest #test03CanMakeOverdraftTransference stamp: 'jgv 10/22/2023 17:42:39'!
PASSED!

!testRun: #TransferenceTest #test04CanNavigateTransferenceLegsCorrectly stamp: 'jgv 10/22/2023 17:42:39'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:43:23' prior: 50652667!
generateSummary
	|transactionsSummary|
	transactionsSummary  := transactions inject: OrderedCollection new into: [:summary :transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				summary add: 'Depósito por ', transaction value asString .
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				summary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				summary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				summary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	transactionsSummary add: 'Balance = ', self balance asString.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:43:27'!
FAILURE!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:43:27'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:43:27'!
ERROR!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:43:31'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:44:17' prior: 50652799!
generateSummary
	|transactionsSummary|
	transactionsSummary  := transactions inject: OrderedCollection new into: [:summary :transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				summary add: 'Depósito por ', transaction value asString .
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				summary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				summary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				summary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	^transactionsSummary add: 'Balance = ', self balance asString.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:44:19'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:47:53' prior: 50652835!
generateSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
	
	transactions inject: transactionsSummary into: [:summary :transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				summary add: 'Depósito por ', transaction value asString .
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				summary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				summary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				summary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	^transactionsSummary add: 'Balance = ', self balance asString.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:48:24' prior: 50652864!
generateSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
	
	transactions inject: transactionsSummary into: [:summary :transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				summary add: 'Depósito por ', transaction value asString .
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				summary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				summary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				summary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:48:26' prior: 50652892!
generateSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
	
	transactions inject: transactionsSummary into: [:summary :transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				summary add: 'Depósito por ', transaction value asString .
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				summary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				summary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				summary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:48:36'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:48:36'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:48:36'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:48:36'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:49:13'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:51:00' prior: 50652920!
generateSummary
	|transactionsSummary|
	
	transactionsSummary := transactions inject: OrderedCollection new into: [:summary :transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				summary add: 'Depósito por ', transaction value asString .
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				summary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				summary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				summary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:51:04'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:51:04'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:51:04'!
ERROR!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:51:07'!
ERROR!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:53:19'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:53:20'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:53:20'!
ERROR!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:53:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jgv 10/22/2023 17:55:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jgv 10/22/2023 17:55:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jgv 10/22/2023 17:55:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jgv 10/22/2023 17:55:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jgv 10/22/2023 17:55:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jgv 10/22/2023 17:55:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jgv 10/22/2023 17:55:37'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:55:44'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:55:44'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:55:45'!
ERROR!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:55:47'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:55:48'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:55:48'!
ERROR!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:55:49'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 17:58:11' prior: 50652960!
generateSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				transactionsSummary add: 'Depósito por ', transaction value asString.
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				transactionsSummary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transactionsSummary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				transactionsSummary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 17:58:19'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 17:58:19'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 17:58:19'!
PASSED!

----QUIT----(22 October 2023 17:59:20) CuisUniversity-Portfolio2.image priorSource: 10228816!

----STARTUP---- (22 October 2023 19:10:02) as D:\Facu\Inge I\windows64\CuisUniversity-Portfolio2.image!

!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 19:12:35'!
test04
	| aReport anAccount |
	

	
	anAccount := ReceptiveAccount new.
	
	aReport := Report new.

	self assert: 0 equals: (aReport accountTransferNet: anAccount).
! !

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:12:39'!
ERROR!
!Report methodsFor: 'reports' stamp: 'jgv 10/22/2023 19:12:42'!
accountTransferNet: anAccount 
	self shouldBeImplemented.! !
!Report methodsFor: 'reports' stamp: 'jgv 10/22/2023 19:12:49' prior: 50653100!
accountTransferNet: anAccount 
	^0.! !

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:12:50'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:12:51'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:12:51'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:12:51'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:12:51'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 19:14:05'!
test05
	| aReport anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	aReport := Report new.

	self assert: 0 equals: (aReport accountTransferNet: anAccount).
! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 19:14:36' prior: 50653120!
test05
	| aReport anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	aReport := Report new.

	self assert: -100 equals: (aReport accountTransferNet: anAccount).
	self assert: 100 equals: (aReport  accountTransferNet: anotherAccount).
! !

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:14:40'!
FAILURE!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:14:45'!
FAILURE!
!Report methodsFor: 'reports' stamp: 'jgv 10/22/2023 19:16:04' prior: 50653105!
accountTransferNet: anAccount 
	^anAccount calculateTransferNet.! !

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:16:07'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:16:12'!
calculateTransferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:18:25' prior: 50653158!
calculateTransferNet
	transactions isEmpty ifTrue: [^0].
	^self balance.! !

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:18:27'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:18:27'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:18:27'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:18:27'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:18:27'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:18:27'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 19:19:49'!
test06
	| aReport anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	Transference transfer: 150 from: anotherAccount  to: anAccount.
	Transference transfer: 50 from: anAccount to: anotherAccount.
	
	aReport := Report new.

	self assert: 0 equals: (aReport accountTransferNet: anAccount).
	self assert: 0 equals: (aReport  accountTransferNet: anotherAccount).
! !

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:19:51'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:19:51'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:19:51'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:19:51'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:19:51'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:19:52'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:19:52'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/22/2023 19:20:46' prior: 50653182!
test06
	| aReport anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	Transference transfer: 150 from: anotherAccount  to: anAccount.
	Transference transfer: 50 from: anAccount to: anotherAccount.
	
	aReport := Report new.

	self assert: 0 equals: (aReport accountTransferNet: anAccount).
	self assert: 0 equals: (aReport  accountTransferNet: anotherAccount).
! !

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:20:48'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:22:53' prior: 50653163!
calculateTransferNet
	transactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				^transaction transference value.
			]
		]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:24:19' prior: 50653239!
calculateTransferNet
	transactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				^transaction transference value.
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				^transaction transference value negated. 
			].
		] ifEmpty: [^0].! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:24:27'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:24:27'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:24:27'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:24:27'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:24:27'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:24:27'!
ERROR!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:24:35'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:24:54' prior: 50653248!
calculateTransferNet
	^transactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				^transaction transference value.
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				^transaction transference value negated. 
			].
		] ifEmpty: [^0].! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:24:57'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:24:57'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:24:57'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:24:57'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:24:57'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:24:58'!
ERROR!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:25:03'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:25:03'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:25:03'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:25:03'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:25:04'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:25:04'!
ERROR!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:25:09'!
FAILURE!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:25:17'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:25:17'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:25:17'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:25:17'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:25:18'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:25:18'!
ERROR!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:25:19'!
FAILURE!

(OrderedCollection with: 3 with: 2) sum!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:27:33'!
FAILURE!

----End fileIn of D:\Facu\Inge I\windows64\Packages\TerseGuide.pck.st----!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:29:33' prior: 50653277!
calculateTransferNet
	^transactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transaction transference value.
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transaction transference value negated. 
			].
		] ifEmpty: [0].! !

!testRun: #TransferenceTest #test01TransferenceAffectBalanceCorrectlyInDepositantAndDepositedAccount stamp: 'jgv 10/22/2023 19:29:42'!
PASSED!

!testRun: #TransferenceTest #test02TrasnferenceRegistersADepositInDepositedAccountAndAWithdrawInDepositantAccount stamp: 'jgv 10/22/2023 19:29:42'!
PASSED!

!testRun: #TransferenceTest #test03CanMakeOverdraftTransference stamp: 'jgv 10/22/2023 19:29:42'!
PASSED!

!testRun: #TransferenceTest #test04CanNavigateTransferenceLegsCorrectly stamp: 'jgv 10/22/2023 19:29:42'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:29:46'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:29:46'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:29:46'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:29:46'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:29:46'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:29:47'!
ERROR!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:29:48'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:33:17' prior: 50656259!
calculateTransferNet

	| transferenceTransactions |
	transferenceTransactions :=  transactions select: [:transaction | (transaction isKindOf: TransferenceDeposit) or: [transaction isKindOf: TransferenceWithdraw ]].
	^transferenceTransactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transaction transference value.
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transaction transference value negated. 
			].
		
		] ifEmpty: [0].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:33:32' prior: 50656304!
calculateTransferNet

	| transferenceTransactions |
	
	transferenceTransactions :=  transactions select: [:transaction | (transaction isKindOf: TransferenceDeposit) or: [transaction isKindOf: TransferenceWithdraw ]].
	
	^transferenceTransactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transaction transference value.
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transaction transference value negated. 
			].
		
		] ifEmpty: [0].! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:33:34'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:33:34'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:33:34'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:33:35'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:33:35'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:33:35'!
ERROR!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:33:37'!
FAILURE!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:33:43'!
FAILURE!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:34:06'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:34:06'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:34:06'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:34:06'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:34:07'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:34:07'!
ERROR!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:34:08'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:34:54' prior: 50656323!
calculateTransferNet

	| transferenceTransactions |
	
	transferenceTransactions :=  transactions select: [:transaction | (transaction isKindOf: TransferenceDeposit) or: [transaction isKindOf: TransferenceWithdraw ]].
	
	^transferenceTransactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transaction transference value.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				transaction transference value negated. 
			].
		
		] ifEmpty: [0].! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:34:57'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:34:57'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:34:57'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:34:57'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:34:57'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:34:57'!
ERROR!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:34:59'!
FAILURE!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:35:04'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:35:06'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:35:06'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:35:06'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:35:06'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:35:07'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:35:07'!
ERROR!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:35:12'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:35:12'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:35:12'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:35:12'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:35:12'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:35:12'!
ERROR!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:35:14'!
FAILURE!

^transferenceTransactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transaction transference value.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				transaction transference value negated. 
			].
		
		] ifEmpty: [0]!

-100!

aReport accountTransferNet: anAccount!

^transferenceTransactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transaction transference value.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				transaction transference value negated. 
			].
		
		] ifEmpty: [0]!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:38:22' prior: 50656377!
calculateTransferNet

	| transferenceTransactions |
	
	transferenceTransactions :=  transactions select: [:transaction | (transaction isKindOf: TransferenceDeposit) or: [transaction isKindOf: TransferenceWithdraw ]].
	
	^transferenceTransactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				^transaction transference value.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				^transaction transference value negated. 
			].
		
		] ifEmpty: [0].! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:38:25'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:38:25'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:38:26'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:38:26'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:38:26'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:38:26'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:38:26'!
FAILURE!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:38:35'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:38:35'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:38:35'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:38:35'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:38:36'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:38:36'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:38:36'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:40:04'!
FAILURE!

^anAccount calculateTransferNet!

^transaction transference value negated!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:42:43' prior: 50656464!
calculateTransferNet

	| transferenceTransactions |
	
	transferenceTransactions :=  transactions select: [:transaction | (transaction isKindOf: TransferenceDeposit) or: [transaction isKindOf: TransferenceWithdraw ]].
	
	^transferenceTransactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				^transaction transference value.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				^transaction transference value negated. 
			].
		
		] ifEmpty: [0].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:42:54' prior: 50656520!
calculateTransferNet

	| transferenceTransactions |
	
	transferenceTransactions :=  transactions select: [:transaction | (transaction isKindOf: TransferenceDeposit) or: [transaction isKindOf: TransferenceWithdraw ]].
	
	^transferenceTransactions sum: [:transaction | 
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transaction transference value.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				transaction transference value negated. 
			].
		
		] ifEmpty: [0].! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:43:26' prior: 50656539!
calculateTransferNet

	| transferenceTransactions |
	
	transferenceTransactions :=  transactions select: [:transaction | (transaction isKindOf: TransferenceDeposit) or: [transaction isKindOf: TransferenceWithdraw ]].
	
	^transferenceTransactions sum: [:transaction | 
		
		] ifEmpty: [0].! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'jgv 10/22/2023 19:44:29'!
xxxx: aTransaction
		(aTransaction isKindOf: TransferenceDeposit ) ifTrue: [
				^aTransaction transference value.
			].
		^aTransaction transference value negated. 

! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/22/2023 19:44:51' prior: 50656558!
calculateTransferNet

	| transferenceTransactions |
	
	transferenceTransactions :=  transactions select: [:transaction | (transaction isKindOf: TransferenceDeposit) or: [transaction isKindOf: TransferenceWithdraw ]].
	
	^transferenceTransactions sum: [:transaction | 
		self xxxx: transaction.
		] ifEmpty: [0].! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/22/2023 19:45:11'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/22/2023 19:45:11'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/22/2023 19:45:11'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/22/2023 19:45:11'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/22/2023 19:45:12'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/22/2023 19:45:12'!
PASSED!

----QUIT----(22 October 2023 19:46:07) CuisUniversity-Portfolio2.image priorSource: 10285860!

----STARTUP---- (23 October 2023 19:43:35) as /home/clinux01/Escritorio/linux64/CuisUniversity-Portfolio2.image!

!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:24:13' prior: 50652448!
test01
	| anAccount |
	anAccount := ReceptiveAccount new.
	self assert: (OrderedCollection with: 'Balance = 0') equals: (anAccount generateSummary).! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:24:17'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:24:17'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:24:17'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:24:17'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:24:17'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:24:17'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:24:17'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:24:36' prior: 50652465!
test02
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100') equals: (anAccount generateSummary).! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:25:08' prior: 50652612!
test03
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (anAccount generateSummary).
	self assert: anotherAccountSumary equals: (anotherAccount generateSummary).! !

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:25:11'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:25:11'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:25:11'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:25:11'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:25:11'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:25:11'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:25:11'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:25:36'!
test0X
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (anAccount generateSummary).
	self assert: anotherAccountSumary equals: (anotherAccount generateSummary).! !

!methodRemoval: ReportsTest #test03 stamp: 'jgv 10/23/2023 21:25:36'!
test03
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (anAccount generateSummary).
	self assert: anotherAccountSumary equals: (anotherAccount generateSummary).!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:25:52'!
test03
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100') equals: (anAccount generateSummary).! !

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:25:53'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:26:03' prior: 50656736!
test03
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Extracción por 100' with: 'Balance = 100') equals: (anAccount generateSummary).! !

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:26:05'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:26:13' prior: 50656748!
test03
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Extracción por 100' with: 'Balance = -100') equals: (anAccount generateSummary).! !

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:26:14'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:26:14'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:26:14'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:26:14'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:26:14'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:26:14'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:26:14'!
PASSED!

!testRun: #ReportsTest #test0X stamp: 'jgv 10/23/2023 21:26:14'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:26:54' prior: 50653090!
test04
	| anAccount anotherAcount |
	
	anAccount := ReceptiveAccount new.
	anotherAcount := ReceptiveAccount new.
	
	Withdraw register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Extracción por 100' with: 'Balance = -100') equals: (anAccount generateSummary).! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:27:31' prior: 50656790!
test04
	| anAccount anotherAcount |
	
	anAccount := ReceptiveAccount new.
	anotherAcount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAcount.
			
	self assert: (OrderedCollection with: 'Extracción por 100' with: 'Balance = -100') equals: (anAccount generateSummary).! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:28:02' prior: 50656761!
test03
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100') equals: (anAccount generateSummary).! !

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:28:03'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:28:36' prior: 50656802!
test04
	| anAccount anotherAcount |
	
	anAccount := ReceptiveAccount new.
	anotherAcount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAcount.
			
	self assert: (OrderedCollection with: 'Salida por transferencia de 25' with: 'Balance = -100') equals: (anAccount generateSummary).! !

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:28:37'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:28:50' prior: 50656828!
test04
	| anAccount anotherAcount |
	
	anAccount := ReceptiveAccount new.
	anotherAcount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAcount.
			
	self assert: (OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100') equals: (anAccount generateSummary).! !

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:28:51'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:28:51'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:28:51'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:28:51'!
FAILURE!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:28:51'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:28:51'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:28:51'!
PASSED!

!testRun: #ReportsTest #test0X stamp: 'jgv 10/23/2023 21:28:51'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:28:51'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:29:06' prior: 50656815!
test03
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Extracción por 100' with: 'Balance = -100') equals: (anAccount generateSummary).! !

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:29:11'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:29:11'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:29:11'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:29:11'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:29:11'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:29:11'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:29:11'!
PASSED!

!testRun: #ReportsTest #test0X stamp: 'jgv 10/23/2023 21:29:11'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:29:35' prior: 50653132!
test05
	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAccount.
			
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = -100') equals: (anotherAccount generateSummary).! !

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:29:37'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:29:44' prior: 50656906!
test05
	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAccount.
			
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100') equals: (anotherAccount generateSummary).! !

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:29:45'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:29:45'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:29:45'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:29:45'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:29:45'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:29:45'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:29:45'!
PASSED!

!testRun: #ReportsTest #test0X stamp: 'jgv 10/23/2023 21:29:45'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:29:53'!
test07
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (anAccount generateSummary).
	self assert: anotherAccountSumary equals: (anotherAccount generateSummary).! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:31:14' prior: 50656953!
test07
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (anAccount generateSummary).
	self assert: anotherAccountSumary equals: (anotherAccount generateSummary).! !

!methodRemoval: ReportsTest #test06 stamp: 'jgv 10/23/2023 21:31:29'!
test06
	| aReport anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	Transference transfer: 150 from: anotherAccount  to: anAccount.
	Transference transfer: 50 from: anAccount to: anotherAccount.
	
	aReport := Report new.

	self assert: 0 equals: (aReport accountTransferNet: anAccount).
	self assert: 0 equals: (aReport  accountTransferNet: anotherAccount).
!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:31:36'!
test06
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (anAccount generateSummary).
	self assert: anotherAccountSumary equals: (anotherAccount generateSummary).! !

!methodRemoval: ReportsTest #test07 stamp: 'jgv 10/23/2023 21:31:36'!
test07
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (anAccount generateSummary).
	self assert: anotherAccountSumary equals: (anotherAccount generateSummary).!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:32:40'!
test07
	| anAccount |
	

	
	anAccount := ReceptiveAccount new.
	

	self assert: 0 equals: (anAccount calculateTransferNet).
! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:33:08'!
test08
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 0 equals:  anAccount calculateTransferNet.
! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:33:31' prior: 50656687!
test0X
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 0 equals:  anAccount calculateTransferNet.
! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:33:51' prior: 50657077!
test08
	| anAccount |
	

	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: 	anAccount.
		
	self assert: 0 equals:  anAccount calculateTransferNet.
! !

!testRun: #ReportsTest #test08 stamp: 'jgv 10/23/2023 21:33:56'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:33:56'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:33:56'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:33:56'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:33:56'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:33:56'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:33:56'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/23/2023 21:33:56'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/23/2023 21:33:56'!
PASSED!

!testRun: #ReportsTest #test0X stamp: 'jgv 10/23/2023 21:33:56'!
FAILURE!

!testRun: #ReportsTest #test0X stamp: 'jgv 10/23/2023 21:33:56'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:34:18' prior: 50657088!
test0X
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: -100 equals:  anAccount calculateTransferNet.
! !

!testRun: #ReportsTest #test0X stamp: 'jgv 10/23/2023 21:34:19'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:34:19'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:34:19'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:34:19'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:34:19'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:34:19'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:34:19'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/23/2023 21:34:19'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/23/2023 21:34:19'!
PASSED!

!testRun: #ReportsTest #test0X stamp: 'jgv 10/23/2023 21:34:19'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:34:32'!
test09
	| anAccount |
	

	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: 	anAccount.
		
	self assert: 0 equals:  anAccount calculateTransferNet.
! !

!testRun: #ReportsTest #test09 stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!

!testRun: #ReportsTest #test0X stamp: 'jgv 10/23/2023 21:34:34'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:34:44'!
test10
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: -100 equals:  anAccount calculateTransferNet.
! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:34:57'!
test11
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  anotherAccount calculateTransferNet.
! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:35:41' prior: 50657210!
test11
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  anotherAccount calculateTransferNet.
! !

!testRun: #ReportsTest #test11 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test0X stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/23/2023 21:35:43'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:36:50'!
test12
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: -100 equals:  anAccount calculateTransferNet.
! !

!methodRemoval: ReportsTest #test0X stamp: 'jgv 10/23/2023 21:36:50'!
test0X
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: -100 equals:  anAccount calculateTransferNet.
!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:37:11'!
test112
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  anotherAccount calculateTransferNet.
! !

!methodRemoval: ReportsTest #test11 stamp: 'jgv 10/23/2023 21:37:11'!
test11
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  anotherAccount calculateTransferNet.
!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:37:16'!
test11
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: -100 equals:  anAccount calculateTransferNet.
! !

!methodRemoval: ReportsTest #test12 stamp: 'jgv 10/23/2023 21:37:16'!
test12
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: -100 equals:  anAccount calculateTransferNet.
!
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/23/2023 21:37:19'!
test12
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  anotherAccount calculateTransferNet.
! !

!methodRemoval: ReportsTest #test112 stamp: 'jgv 10/23/2023 21:37:19'!
test112
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  anotherAccount calculateTransferNet.
!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/23/2023 21:37:22'!
PASSED!

!classRemoval: #Report stamp: 'jgv 10/23/2023 21:37:53'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/23/2023 21:37:57'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/23/2023 21:37:58'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/23/2023 21:50:16'!
accountSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				transactionsSummary add: 'Depósito por ', transaction value asString.
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				transactionsSummary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transactionsSummary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				transactionsSummary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:16' prior: 50656612!
test01
	| anAccount |
	anAccount := ReceptiveAccount new.
	self assert: (OrderedCollection with: 'Balance = 0') equals: (anAccount accountSummary).! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:16' prior: 50656843!
test04
	| anAccount anotherAcount |
	
	anAccount := ReceptiveAccount new.
	anotherAcount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAcount.
			
	self assert: (OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100') equals: (anAccount accountSummary).! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:16' prior: 50656922!
test05
	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAccount.
			
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100') equals: (anotherAccount accountSummary).! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:16' prior: 50656877!
test03
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Extracción por 100' with: 'Balance = -100') equals: (anAccount accountSummary).! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:16' prior: 50657021!
test06
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (anAccount accountSummary).
	self assert: anotherAccountSumary equals: (anotherAccount accountSummary).! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:16' prior: 50656636!
test02
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100') equals: (anAccount accountSummary).! !

!methodRemoval: ReceptiveAccount #generateSummary stamp: 'jgv 10/23/2023 21:50:16'!
generateSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
		(transaction isKindOf: Deposit) ifTrue: [
				transactionsSummary add: 'Depósito por ', transaction value asString.
			].
		(transaction isKindOf: Withdraw ) ifTrue: [
				transactionsSummary add: 'Extracción por ', transaction value asString .
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transactionsSummary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				transactionsSummary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/23/2023 21:50:29'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/23/2023 21:50:49'!
transferNet

	| transferenceTransactions |
	
	transferenceTransactions :=  transactions select: [:transaction | (transaction isKindOf: TransferenceDeposit) or: [transaction isKindOf: TransferenceWithdraw ]].
	
	^transferenceTransactions sum: [:transaction | 
		self xxxx: transaction.
		] ifEmpty: [0].! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:49' prior: 50657200!
test10
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: -100 equals:  anAccount transferNet.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:49' prior: 50657167!
test09
	| anAccount |
	

	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: 	anAccount.
		
	self assert: 0 equals:  anAccount transferNet.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:49' prior: 50657310!
test11
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: -100 equals:  anAccount transferNet.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:49' prior: 50657099!
test08
	| anAccount |
	

	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: 	anAccount.
		
	self assert: 0 equals:  anAccount transferNet.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:49' prior: 50657330!
test12
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  anotherAccount transferNet.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'jgv 10/23/2023 21:50:49' prior: 50657070!
test07
	| anAccount |
	

	
	anAccount := ReceptiveAccount new.
	

	self assert: 0 equals: (anAccount transferNet).
! !

!methodRemoval: ReceptiveAccount #calculateTransferNet stamp: 'jgv 10/23/2023 21:50:49'!
calculateTransferNet

	| transferenceTransactions |
	
	transferenceTransactions :=  transactions select: [:transaction | (transaction isKindOf: TransferenceDeposit) or: [transaction isKindOf: TransferenceWithdraw ]].
	
	^transferenceTransactions sum: [:transaction | 
		self xxxx: transaction.
		] ifEmpty: [0].!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/23/2023 21:51:05'!
PASSED!
!AccountTransaction methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 21:53:12'!
generateStringForSummary
	self subclassResponsibility.! !
!Deposit methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 21:56:11' overrides: 50657701!
generateStringForSummary
	self subclassResponsibility.! !
!Withdraw methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 21:56:11' overrides: 50657701!
generateStringForSummary
	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 21:56:11' prior: 50657701!
generateStringForSummary

	self subclassResponsibility! !
!Deposit methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 21:57:02' prior: 50657706 overrides: 50657716!
generateStringForSummary
	^'Depósito por', value asString.! !
!Withdraw methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 21:57:28' prior: 50657711 overrides: 50657716!
generateStringForSummary
	^'Extracción por ', value asString.! !
!Deposit methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 21:57:32' prior: 50657722 overrides: 50657716!
generateStringForSummary
	^'Depósito por ', value asString.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/23/2023 21:58:33' prior: 50657420!
accountSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
		((transaction isKindOf: Deposit) or: [transaction isKindOf: Withdraw ]) ifTrue: [
				transactionsSummary add: transaction generateStringForSummary.
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transactionsSummary add: 'Entrada por transferencia de ', transaction transference value asString.
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				transactionsSummary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/23/2023 21:58:51'!
PASSED!
!TransferenceTransaction methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 22:00:20'!
generateStringForSummary
	self subclassResponsibility.! !
!TransferenceDeposit methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 22:00:25' overrides: 50657792!
generateStringForSummary
	self subclassResponsibility.! !
!TransferenceWithdraw methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 22:00:25' overrides: 50657792!
generateStringForSummary
	self subclassResponsibility.! !
!TransferenceTransaction methodsFor: 'summaryString' stamp: 'jgv 10/23/2023 22:00:25' prior: 50657792!
generateStringForSummary

	self subclassResponsibility! !

----QUIT----(23 October 2023 22:00:49) CuisUniversity-Portfolio2.image priorSource: 10398550!

----STARTUP---- (24 October 2023 16:43:23) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-Portfolio2.image!


Object subclass: #BankTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #BankTransaction category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 16:45:23'!
Object subclass: #BankTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

BankTransaction subclass: #TransferenceTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

BankTransaction subclass: #TransferenceTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'
	!

Object subclass: #BankTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #BankTransaction category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 16:46:11'!
Object subclass: #BankTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

BankTransaction subclass: #TransferenceTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceTransaction category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 16:46:21'!
BankTransaction subclass: #TransferenceTransaction
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

BankTransaction subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransaction category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 16:48:20'!
BankTransaction subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!BankTransaction methodsFor: 'balance' stamp: 'jgv 10/24/2023 16:48:32'!
affectBalance: aBalance

	self subclassResponsibility! !
!BankTransaction methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 16:49:20'!
generateStringForSummary

	self subclassResponsibility! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'jgv 10/24/2023 16:49:31'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/24/2023 16:49:40'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/24/2023 16:49:45'!
PASSED!

!testRun: #TransferenceTest #test01TransferenceAffectBalanceCorrectlyInDepositantAndDepositedAccount stamp: 'jgv 10/24/2023 16:49:47'!
PASSED!

!testRun: #TransferenceTest #test02TrasnferenceRegistersADepositInDepositedAccountAndAWithdrawInDepositantAccount stamp: 'jgv 10/24/2023 16:49:47'!
PASSED!

!testRun: #TransferenceTest #test03CanMakeOverdraftTransference stamp: 'jgv 10/24/2023 16:49:47'!
PASSED!

!testRun: #TransferenceTest #test04CanNavigateTransferenceLegsCorrectly stamp: 'jgv 10/24/2023 16:49:47'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/24/2023 16:59:01'!
generateStringForSummary: transaction

	^ 'Entrada por transferencia de ', transaction transference value asString! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/24/2023 16:59:01' prior: 50657739!
accountSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
		((transaction isKindOf: Deposit) or: [transaction isKindOf: Withdraw ]) ifTrue: [
				transactionsSummary add: transaction generateStringForSummary.
			].
		(transaction isKindOf: TransferenceDeposit ) ifTrue: [
				transactionsSummary add: (self generateStringForSummary: transaction).
			].
		(transaction isKindOf: TransferenceWithdraw ) ifTrue: [
				transactionsSummary add: 'Salida por transferencia de ', transaction transference value asString.
			].
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.! !

!methodRemoval: ReceptiveAccount #generateStringForSummary: stamp: 'jgv 10/24/2023 16:59:22'!
generateStringForSummary: transaction

	^ 'Entrada por transferencia de ', transaction transference value asString!
!TransferenceDeposit methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 16:59:39' prior: 50657798 overrides: 50657810!
generateStringForSummary
		^ 'Entrada por transferencia de ', transference value asString.! !
!TransferenceWithdraw methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:00:14' prior: 50657804 overrides: 50657810!
generateStringForSummary
	^'Salida por transferencia de ', transference value asString.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/24/2023 17:00:39' prior: 50658031!
accountSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
			transaction generateStringForSummary.
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/24/2023 17:00:56' prior: 50658076!
accountSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
				transactionsSummary add: transaction generateStringForSummary.
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/24/2023 17:00:59'!
PASSED!
!BankTransaction methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:02:29'!
generateValueForTransferNet.
	self subclassResponsibility! !
!TransferenceTransaction methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:02:36' overrides: 50658128!
generateValueForTransferNet.
	self subclassResponsibility! !
!AccountTransaction methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:02:36' overrides: 50658128!
generateValueForTransferNet.
	self subclassResponsibility! !
!BankTransaction methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:02:36' prior: 50658128!
generateValueForTransferNet

	self subclassResponsibility! !
!Deposit methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:02:45' overrides: 50658140!
generateValueForTransferNet.
	self subclassResponsibility! !
!Withdraw methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:02:45' overrides: 50658140!
generateValueForTransferNet.
	self subclassResponsibility! !
!AccountTransaction methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:02:45' prior: 50658140 overrides: 50658145!
generateValueForTransferNet

	self subclassResponsibility! !

!methodRemoval: Deposit #generateValueForTransferNet stamp: 'jgv 10/24/2023 17:03:10'!
generateValueForTransferNet.
	self subclassResponsibility!

!methodRemoval: Withdraw #generateValueForTransferNet stamp: 'jgv 10/24/2023 17:03:15'!
generateValueForTransferNet.
	self subclassResponsibility!
!AccountTransaction methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:03:26' prior: 50658161 overrides: 50658145!
generateValueForTransferNet

	^0.! !
!AccountTransaction methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:03:28' prior: 50658176 overrides: 50658145!
generateValueForTransferNet
	^0.! !
!TransferenceDeposit methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:04:10' overrides: 50658134!
generateValueForTransferNet.
	self subclassResponsibility! !
!TransferenceWithdraw methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:04:10' overrides: 50658134!
generateValueForTransferNet.
	self subclassResponsibility! !
!TransferenceTransaction methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:04:10' prior: 50658134 overrides: 50658145!
generateValueForTransferNet

	self subclassResponsibility! !
!TransferenceDeposit methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:04:22' prior: 50658186 overrides: 50658198!
generateValueForTransferNet.
	^transference value.! !
!TransferenceWithdraw methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:04:34' prior: 50658192 overrides: 50658198!
generateValueForTransferNet.
	^transference value negated.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/24/2023 17:05:26' prior: 50657588!
transferNet

	| transferenceTransactions |
	
	transferenceTransactions :=  transactions sum: [: transaction | transaction generateValueForTransferNet ] ifEmpty: [^0.]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/24/2023 17:05:40' prior: 50658215!
transferNet

	
	^transactions sum: [: transaction | transaction generateValueForTransferNet ] ifEmpty: [^0.]! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/24/2023 17:05:44' prior: 50658224!
transferNet
	
	^transactions sum: [: transaction | transaction generateValueForTransferNet ] ifEmpty: [^0.]! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/24/2023 17:05:48'!
PASSED!

!methodRemoval: ReceptiveAccount #xxxx: stamp: 'jgv 10/24/2023 17:05:53'!
xxxx: aTransaction
		(aTransaction isKindOf: TransferenceDeposit ) ifTrue: [
				^aTransaction transference value.
			].
		^aTransaction transference value negated. 

!

!classDefinition: #AccountSummaryGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 17:09:22'!
Object subclass: #AccountSummaryGenerator
	instanceVariableNames: 'transactions account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryGenerator class methodsFor: 'as yet unclassified' stamp: 'jgv 10/24/2023 17:09:22'!
account: anAccount transactions: aTransactions
	^self new initializeAccount: anAccount transactions: aTransactions! !
!AccountSummaryGenerator methodsFor: 'as yet unclassified' stamp: 'jgv 10/24/2023 17:09:22'!
initializeAccount: anAccount transactions: aTransactions
	transactions := aTransactions.
	account := anAccount.! !
!AccountSummaryGenerator methodsFor: 'as yet unclassified' stamp: 'jgv 10/24/2023 17:09:22'!
generateSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
				transactionsSummary add: transaction generateStringForSummary.
		].
	transactionsSummary add: 'Balance = ', account balance asString.
	^transactionsSummary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jgv 10/24/2023 17:09:22' prior: 50658088!
accountSummary
	^(AccountSummaryGenerator account: self transactions: transactions) generateSummary! !
!Deposit methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:23:37'!
generateStringForSummary: anAccountSumaryGenerator.
	^anAccountSumaryGenerator generateSummaryStringForDeposit.! !
!AccountSummaryGenerator methodsFor: 'transactionStringGenerators' stamp: 'jgv 10/24/2023 17:24:22'!
generateSummaryStringForDeposit
! !
!AccountSummaryGenerator methodsFor: 'transactionStringGenerators' stamp: 'jgv 10/24/2023 17:25:12'!
generateSummaryStringForDeposit: aDeposit
	^'Depósito por ', aDeposit value asString.! !

!methodRemoval: AccountSummaryGenerator #generateSummaryStringForDeposit: stamp: 'jgv 10/24/2023 17:25:16'!
generateSummaryStringForDeposit: aDeposit
	^'Depósito por ', aDeposit value asString.!
!AccountSummaryGenerator methodsFor: 'transactionStringGenerators' stamp: 'jgv 10/24/2023 17:25:12'!
generateSummaryStringForDeposit: aDeposit
	^'Depósito por ', aDeposit value asString.! !

!methodRemoval: AccountSummaryGenerator #generateSummaryStringForDeposit stamp: 'jgv 10/24/2023 17:25:54'!
generateSummaryStringForDeposit
!

!methodRemoval: Deposit #generateStringForSummary stamp: 'jgv 10/24/2023 17:26:05'!
generateStringForSummary
	^'Depósito por ', value asString.!
!Deposit methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:26:12' prior: 50658315!
generateStringForSummary: anAccountSumaryGenerator.
	^anAccountSumaryGenerator generateSummaryStringForDeposit: self.! !
!Withdraw methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:27:51'!
generateStringForSummary: anAccountSumaryGenerator.
	^anAccountSumaryGenerator generateSummaryStringForWithdraw: self.! !

!methodRemoval: Withdraw #generateStringForSummary stamp: 'jgv 10/24/2023 17:27:56'!
generateStringForSummary
	^'Extracción por ', value asString.!
!AccountSummaryGenerator methodsFor: 'transactionStringGenerators' stamp: 'jgv 10/24/2023 17:28:29'!
generateSummaryStringForWithdraw: aWithdraw
	^'Extracción por ', aWithdraw value asString.! !

!classDefinition: #TransferNetGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 17:32:00'!
Object subclass: #TransferNetGenerator
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetGenerator class methodsFor: 'as yet unclassified' stamp: 'jgv 10/24/2023 17:32:00'!
transactions: aTransactions
	^self new initializeTransactions: aTransactions! !
!TransferNetGenerator methodsFor: 'as yet unclassified' stamp: 'jgv 10/24/2023 17:32:00'!
initializeTransactions: aTransactions
	transactions := aTransactions.! !
!TransferNetGenerator methodsFor: 'as yet unclassified' stamp: 'jgv 10/24/2023 17:32:00'!
generateTransferNet
	
	^transactions sum: [: transaction | transaction generateValueForTransferNet ] ifEmpty: [^0.]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jgv 10/24/2023 17:32:00' prior: 50658231!
transferNet
	^(TransferNetGenerator transactions: transactions) generateTransferNet! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/24/2023 17:33:46'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/24/2023 17:33:46'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/24/2023 17:33:46'!
ERROR!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/24/2023 17:33:46'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/24/2023 17:33:46'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/24/2023 17:33:46'!
ERROR!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/24/2023 17:33:46'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/24/2023 17:33:46'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/24/2023 17:33:46'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/24/2023 17:33:46'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/24/2023 17:33:46'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/24/2023 17:33:46'!
PASSED!
!TransferenceDeposit methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:36:11'!
generateValueForTransferNet: aTranferNetGenerator
	^aTranferNetGenerator generateTransferValueForTrasnferenceDeposit: self.! !

!methodRemoval: TransferenceDeposit #generateValueForTransferNet stamp: 'jgv 10/24/2023 17:36:18'!
generateValueForTransferNet.
	^transference value.!
!TransferNetGenerator methodsFor: 'transactionsTransferNetValueGenerator' stamp: 'jgv 10/24/2023 17:37:17'!
generateTransferValueForTrasnferenceDeposit: aTransferenceDeposit.
	^ aTransferenceDeposit transference value.
	! !
!TransferenceWithdraw methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:38:06'!
generateValueForTransferNet: aTranferNetGenerator
	^aTranferNetGenerator generateTransferValueForTrasnferenceWithdraw: self.! !
!TransferenceWithdraw methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:38:18' prior: 50658461!
generateValueForTransferNet: aTranferNetGenerator
	^aTranferNetGenerator generateTransferValueForTransferenceWithdraw: self.! !

!methodRemoval: TransferenceWithdraw #generateValueForTransferNet stamp: 'jgv 10/24/2023 17:38:27'!
generateValueForTransferNet.
	^transference value negated.!
!TransferNetGenerator methodsFor: 'transactionsTransferNetValueGenerator' stamp: 'jgv 10/24/2023 17:38:58'!
generateTransferValueForTransferenceWithdraw: aTransferenceWithdraw
	^aTransferenceWithdraw transference value negated.! !
!TransferNetGenerator methodsFor: 'transactionsTransferNetValueGenerator' stamp: 'jgv 10/24/2023 17:39:25'!
generateTransferValueForTransferenceDeposit: aTransferenceDeposit.
	^ aTransferenceDeposit transference value.
	! !

!methodRemoval: TransferNetGenerator #generateTransferValueForTrasnferenceDeposit: stamp: 'jgv 10/24/2023 17:39:25'!
generateTransferValueForTrasnferenceDeposit: aTransferenceDeposit.
	^ aTransferenceDeposit transference value.
	!
!TransferenceDeposit methodsFor: 'summaryString' stamp: 'jgv 10/24/2023 17:39:43' prior: 50658441!
generateValueForTransferNet: aTranferNetGenerator
	^aTranferNetGenerator generateTransferValueForTransferenceDeposit: self.! !

Object subclass: #ReportGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 17:43:37'!
Object subclass: #ReportGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportGenerator subclass: #TransferNetGenerator
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 17:43:53'!
ReportGenerator subclass: #TransferNetGenerator
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: 'transactions account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 17:44:00'!
ReportGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: 'transactions account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportGenerator methodsFor: 'no messages' stamp: 'jgv 10/24/2023 17:46:00'!
generateReport
	self subclassResponsibility.! !
!AccountSummaryGenerator methodsFor: 'evaluating' stamp: 'jgv 10/24/2023 17:46:40' overrides: 50658551!
generateReport
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
				transactionsSummary add: transaction generateStringForSummary.
		].
	transactionsSummary add: 'Balance = ', account balance asString.
	^transactionsSummary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jgv 10/24/2023 17:46:40' prior: 50658309!
accountSummary
	^(AccountSummaryGenerator account: self transactions: transactions) generateReport! !

!methodRemoval: AccountSummaryGenerator #generateSummary stamp: 'jgv 10/24/2023 17:46:40'!
generateSummary
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
				transactionsSummary add: transaction generateStringForSummary.
		].
	transactionsSummary add: 'Balance = ', account balance asString.
	^transactionsSummary.!
!TransferNetGenerator methodsFor: 'evaluating' stamp: 'jgv 10/24/2023 17:47:18' overrides: 50658551!
generateReport
	
	^transactions sum: [: transaction | transaction generateValueForTransferNet ] ifEmpty: [^0.]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'jgv 10/24/2023 17:47:18' prior: 50658408!
transferNet
	^(TransferNetGenerator transactions: transactions) generateReport! !

!methodRemoval: TransferNetGenerator #generateTransferNet stamp: 'jgv 10/24/2023 17:47:18'!
generateTransferNet
	
	^transactions sum: [: transaction | transaction generateValueForTransferNet ] ifEmpty: [^0.]!
!BankTransaction methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:49:20'!
generateValueForReportGenerator: aReportGenerator
	self subclassResponsibility.! !

!methodRemoval: BankTransaction #generateValueForTransferNet stamp: 'jgv 10/24/2023 17:49:31'!
generateValueForTransferNet

	self subclassResponsibility!

!methodRemoval: BankTransaction #generateStringForSummary stamp: 'jgv 10/24/2023 17:49:34'!
generateStringForSummary

	self subclassResponsibility!
!TransferenceTransaction methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:49:45' overrides: 50658607!
generateValueForReportGenerator: aReportGenerator
	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:49:45' overrides: 50658607!
generateValueForReportGenerator: aReportGenerator
	self subclassResponsibility.! !
!BankTransaction methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:49:45' prior: 50658607!
generateValueForReportGenerator: aReportGenerator

	self subclassResponsibility! !

!methodRemoval: AccountTransaction #generateValueForTransferNet stamp: 'jgv 10/24/2023 17:49:56'!
generateValueForTransferNet
	^0.!

!methodRemoval: AccountTransaction #generateStringForSummary stamp: 'jgv 10/24/2023 17:50:00'!
generateStringForSummary

	self subclassResponsibility!
!Deposit methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:50:04' overrides: 50658629!
generateValueForReportGenerator: aReportGenerator
	self subclassResponsibility.! !
!Withdraw methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:50:04' overrides: 50658629!
generateValueForReportGenerator: aReportGenerator
	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:50:04' prior: 50658629 overrides: 50658635!
generateValueForReportGenerator: aReportGenerator

	self subclassResponsibility! !
!Deposit methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:50:48' prior: 50658650 overrides: 50658663!
generateValueForReportGenerator: aReportGenerator
	^aReportGenerator generateReportValueForADeposit: self.! !

!methodRemoval: Deposit #generateStringForSummary: stamp: 'jgv 10/24/2023 17:51:21'!
generateStringForSummary: anAccountSumaryGenerator.
	^anAccountSumaryGenerator generateSummaryStringForDeposit: self.!
!Withdraw methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:52:14' prior: 50658656 overrides: 50658663!
generateValueForReportGenerator: aReportGenerator
	^aReportGenerator generateReportValueForAWithdraw: self.! !
!TransferenceDeposit methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:55:26' overrides: 50658623!
generateValueForReportGenerator: aReportGenerator
	self subclassResponsibility.! !
!TransferenceWithdraw methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:55:26' overrides: 50658623!
generateValueForReportGenerator: aReportGenerator
	self subclassResponsibility.! !
!TransferenceTransaction methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:55:27' prior: 50658623 overrides: 50658635!
generateValueForReportGenerator: aReportGenerator

	self subclassResponsibility! !
!TransferenceDeposit methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:56:35' prior: 50658691 overrides: 50658704!
generateValueForReportGenerator: aReportGenerator
	^aReportGenerator generateReportValueForATransferenceDeposit: self.! !
!TransferenceWithdraw methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:57:09' prior: 50658697 overrides: 50658704!
generateValueForReportGenerator: aReportGenerator
	^aReportGenerator generateReportValueForATransferenceWithdraw: self.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:57:52'!
generateReportValueForADeposit: aDeposit
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:58:02'!
generateReportValueForAWithdraW: aDeposit
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:58:08'!
generateReportValueForAWithdraw: aDeposit
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:58:15'!
generateReportValueForATranferenceWithdraw: aDeposit
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:58:22'!
generateReportValueForATranferenceDeposit: aDeposit
	self subclassResponsibility.! !

!methodRemoval: ReportGenerator #generateReportValueForAWithdraW: stamp: 'jgv 10/24/2023 17:58:24'!
generateReportValueForAWithdraW: aDeposit
	self subclassResponsibility.!
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:58:33' prior: 50658747!
generateReportValueForATranferenceDeposit: aTransferenceDeposit
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:58:44' prior: 50658741!
generateReportValueForATranferenceWithdraw: aWithdraw
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:58:53' prior: 50658766!
generateReportValueForATranferenceWithdraw: aTransferenceWithdraw
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:01' prior: 50658736!
generateReportValueForAWithdraw: aWithdraw
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:10'!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	self subclassResponsibility.! !

!methodRemoval: ReportGenerator #generateReportValueForATranferenceDeposit: stamp: 'jgv 10/24/2023 17:59:10'!
generateReportValueForATranferenceDeposit: aTransferenceDeposit
	self subclassResponsibility.!
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:23'!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
	self subclassResponsibility.! !

!methodRemoval: ReportGenerator #generateReportValueForATranferenceWithdraw: stamp: 'jgv 10/24/2023 17:59:23'!
generateReportValueForATranferenceWithdraw: aTransferenceWithdraw
	self subclassResponsibility.!
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:44' overrides: 50658779!
generateReportValueForAWithdraw: aWithdraw
	self subclassResponsibility.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:44' overrides: 50658779!
generateReportValueForAWithdraw: aWithdraw
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:44' prior: 50658779!
generateReportValueForAWithdraw: aWithdraw

	self subclassResponsibility! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:53' overrides: 50658797!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
	self subclassResponsibility.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:53' overrides: 50658797!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:53' prior: 50658797!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw

	self subclassResponsibility! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:57' overrides: 50658784!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	self subclassResponsibility.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:57' overrides: 50658784!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 17:59:57' prior: 50658784!
generateReportValueForATransferenceDeposit: aTransferenceDeposit

	self subclassResponsibility! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:00:03' overrides: 50658726!
generateReportValueForADeposit: aDeposit
	self subclassResponsibility.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:00:03' overrides: 50658726!
generateReportValueForADeposit: aDeposit
	self subclassResponsibility.! !
!ReportGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:00:03' prior: 50658726!
generateReportValueForADeposit: aDeposit

	self subclassResponsibility! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:00:30' prior: 50658877 overrides: 50658883!
generateReportValueForADeposit: aDeposit
	^'Depósito por ', aDeposit value asString.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:01:17' prior: 50658817 overrides: 50658823!
generateReportValueForAWithdraw: aWithdraw
	^'Extracción por ', aWithdraw value asString.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:03:04' prior: 50658836 overrides: 50658843!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
		^'Salida por transferencia de ', aTransferenceWithdraw value asString.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:03:27' prior: 50658857 overrides: 50658864!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	^'Entrada por transferencia de ', aTransferenceDeposit value asString.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:03:44' prior: 50658871 overrides: 50658883!
generateReportValueForADeposit: aDeposit
	^aDeposit value.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:04:24' prior: 50658922 overrides: 50658883!
generateReportValueForADeposit: aDeposit
	^0.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:04:37' prior: 50658850 overrides: 50658864!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	^aTransferenceDeposit transference value.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:04:54' prior: 50658829 overrides: 50658843!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
	^aTransferenceWithdraw transference value.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:04:59' prior: 50658942 overrides: 50658843!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
	^aTransferenceWithdraw transference value negated ! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:05:00' prior: 50658950 overrides: 50658843!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
	^aTransferenceWithdraw transference value negated.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:05:10' prior: 50658811 overrides: 50658823!
generateReportValueForAWithdraw: aWithdraw
	^0.! !

!methodRemoval: TransferNetGenerator #generateTransferValueForTransferenceDeposit: stamp: 'jgv 10/24/2023 18:05:17'!
generateTransferValueForTransferenceDeposit: aTransferenceDeposit.
	^ aTransferenceDeposit transference value.
	!

!methodRemoval: TransferNetGenerator #generateTransferValueForTransferenceWithdraw: stamp: 'jgv 10/24/2023 18:05:17'!
generateTransferValueForTransferenceWithdraw: aTransferenceWithdraw
	^aTransferenceWithdraw transference value negated.!

!methodRemoval: AccountSummaryGenerator #generateSummaryStringForDeposit: stamp: 'jgv 10/24/2023 18:05:26'!
generateSummaryStringForDeposit: aDeposit
	^'Depósito por ', aDeposit value asString.!

!methodRemoval: AccountSummaryGenerator #generateSummaryStringForWithdraw: stamp: 'jgv 10/24/2023 18:05:26'!
generateSummaryStringForWithdraw: aWithdraw
	^'Extracción por ', aWithdraw value asString.!

!testRun: #ReportsTest #test01 stamp: 'jgv 10/24/2023 18:20:28'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/24/2023 18:20:28'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/24/2023 18:20:28'!
ERROR!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/24/2023 18:20:28'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/24/2023 18:20:28'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/24/2023 18:20:28'!
ERROR!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/24/2023 18:20:28'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/24/2023 18:20:28'!
ERROR!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/24/2023 18:20:28'!
ERROR!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/24/2023 18:20:28'!
ERROR!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/24/2023 18:20:28'!
ERROR!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/24/2023 18:20:28'!
ERROR!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/24/2023 18:20:32'!
ERROR!
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:22:09' prior: 50658556 overrides: 50658551!
generateReport
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
				transactionsSummary add: (transaction generateValueForReportGenerator: self).
		].
	transactionsSummary add: 'Balance = ', account balance asString.
	^transactionsSummary.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:22:33' prior: 50658588 overrides: 50658551!
generateReport
	
	^transactions sum: [: transaction | transaction generateValueForReportGenerator:self ] ifEmpty: [^0.]! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/24/2023 18:22:40'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/24/2023 18:22:40'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/24/2023 18:22:40'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/24/2023 18:22:40'!
FAILURE!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/24/2023 18:22:40'!
FAILURE!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/24/2023 18:22:40'!
FAILURE!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/24/2023 18:22:40'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/24/2023 18:22:40'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/24/2023 18:22:40'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/24/2023 18:22:40'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/24/2023 18:22:40'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/24/2023 18:22:40'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/24/2023 18:22:46'!
FAILURE!
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:23:57' prior: 50658904 overrides: 50658843!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
		^'Salida por transferencia de ', aTransferenceWithdraw transference value asString.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:24:10' prior: 50658913 overrides: 50658864!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	^'Entrada por transferencia de ', aTransferenceDeposit transference value asString.! !

!testRun: #ReportsTest #test01 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'jgv 10/24/2023 18:24:16'!
PASSED!

ReportGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 18:35:55'!
ReportGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportGenerator subclass: #TransferNetGenerator
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 18:36:02'!
ReportGenerator subclass: #TransferNetGenerator
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryGenerator class methodsFor: 'instance creation' stamp: 'jgv 10/24/2023 18:36:26'!
account: anAccount
	^self new initializeWithAnAccount: anAccount. ! !

!methodRemoval: AccountSummaryGenerator class #account:transactions: stamp: 'jgv 10/24/2023 18:36:31'!
account: anAccount transactions: aTransactions
	^self new initializeAccount: anAccount transactions: aTransactions!
!AccountSummaryGenerator methodsFor: 'initialization' stamp: 'jgv 10/24/2023 18:37:18'!
initializeWithAnAccount: anAccount
	account := anAccount.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:39:18' prior: 50659029 overrides: 50658551!
generateReport

	^account accountSummary: self.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/24/2023 18:39:54'!
accountSummary: aReportGenerator
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
				transactionsSummary add: (transaction generateValueForReportGenerator: self).
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'jgv 10/24/2023 18:40:10'!
accountSummary
	^(AccountSummaryGenerator account: self transactions: transactions) generateReport!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'jgv 10/24/2023 18:44:26' prior: 50659176!
accountSummary: aReportGenerator
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
				transactionsSummary add: (transaction generateValueForReportGenerator: aReportGenerator).
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.! !

Object subclass: #ReportGenerator
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportGenerator subclass: #TransferNetGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 18:45:46'!
ReportGenerator subclass: #TransferNetGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 18:45:50'!
ReportGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #ReportGenerator
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 18:45:55'!
Object subclass: #ReportGenerator
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportGenerator class methodsFor: 'instance creation' stamp: 'jgv 10/24/2023 18:46:12'!
account: anAccount
	^self new initializeWithAnAccount: anAccount. ! !

!methodRemoval: AccountSummaryGenerator class #account: stamp: 'jgv 10/24/2023 18:46:13'!
account: anAccount
	^self new initializeWithAnAccount: anAccount. !
!ReportGenerator class methodsFor: 'instance creation' stamp: 'jgv 10/24/2023 18:46:28'!
forAccount: anAccount
	^self new initializeWithAnAccount: anAccount. ! !

!methodRemoval: ReportGenerator class #account: stamp: 'jgv 10/24/2023 18:46:28'!
account: anAccount
	^self new initializeWithAnAccount: anAccount. !

ReportGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 18:46:55'!
ReportGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: AccountSummaryGenerator #initializeAccount:transactions: stamp: 'jgv 10/24/2023 18:47:03'!
initializeAccount: anAccount transactions: aTransactions
	transactions := aTransactions.
	account := anAccount.!
!AccountSummaryGenerator methodsFor: 'initialization' stamp: 'jgv 10/24/2023 18:47:16' prior: 50659165!
initializeWithAnAccount: anAccount
	account := anAccount.
	summary := OrderedCollection new.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:52:05' prior: 50659171 overrides: 50658551!
generateReport

	^account : self.
	
	
	"
	account genaratereport Report -> genera el valor del reporte para cada transaction
								^report gennedereport 
										
		
	"
	
	
! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:55:43' prior: 50659300 overrides: 50658551!
generateReport

	account generateTransactionsReportValuesForAReport: self.
	
	summary 	
	
	
	
! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jgv 10/24/2023 18:56:06'!
generateTransactionsReportValuesForAReport: aReportGenerator
! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'jgv 10/24/2023 18:56:30' prior: 50659316!
generateTransactionsReportValuesForAReport: aReportGenerator

	transactions do: [:transaction | 
				transaction generateValueForReportGenerator: aReportGenerator.
		].! !

!methodRemoval: ReceptiveAccount #accountSummary: stamp: 'jgv 10/24/2023 18:56:37'!
accountSummary: aReportGenerator
	|transactionsSummary|
	
	transactionsSummary := OrderedCollection new.
		
	transactions do: [:transaction | 
				transactionsSummary add: (transaction generateValueForReportGenerator: aReportGenerator).
		].
	transactionsSummary add: 'Balance = ', self balance asString.
	^transactionsSummary.!

!methodRemoval: ReceptiveAccount #generateTransactionsReportValuesForAReport: stamp: 'jgv 10/24/2023 18:56:45'!
generateTransactionsReportValuesForAReport: aReportGenerator

	transactions do: [:transaction | 
				transaction generateValueForReportGenerator: aReportGenerator.
		].!
!ReceptiveAccount methodsFor: 'reports' stamp: 'jgv 10/24/2023 18:56:30'!
generateTransactionsReportValuesForAReport: aReportGenerator

	transactions do: [:transaction | 
				transaction generateValueForReportGenerator: aReportGenerator.
		].! !

!methodRemoval: ReceptiveAccount #transferNet stamp: 'jgv 10/24/2023 18:57:34'!
transferNet
	^(TransferNetGenerator transactions: transactions) generateReport!
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:58:21' prior: 50658890 overrides: 50658883!
generateReportValueForADeposit: aDeposit
	summary add: 'Depósito por ', aDeposit value asString.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:58:35' prior: 50659090 overrides: 50658864!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	summary add: 'Entrada por transferencia de ', aTransferenceDeposit transference value asString.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:58:43' prior: 50659081 overrides: 50658843!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
	summary add: 'Salida por transferencia de ', aTransferenceWithdraw transference value asString.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:58:51' prior: 50658897 overrides: 50658823!
generateReportValueForAWithdraw: aWithdraw
	summary add: 'Extracción por ', aWithdraw value asString.! !
!AccountSummaryGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 18:59:24' prior: 50659310 overrides: 50658551!
generateReport

	account generateTransactionsReportValuesForAReport: self.
	
	summary 	add: 'Balance = ', account balance asString.
	
	^summary.
	
	
	
! !

ReportGenerator subclass: #TransferNetGenerator
	instanceVariableNames: 'Net'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 18:59:36'!
ReportGenerator subclass: #TransferNetGenerator
	instanceVariableNames: 'Net'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportGenerator subclass: #TransferNetGenerator
	instanceVariableNames: 'net'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetGenerator category: 'Portfolio-Solucion' stamp: 'jgv 10/24/2023 18:59:40'!
ReportGenerator subclass: #TransferNetGenerator
	instanceVariableNames: 'net'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetGenerator methodsFor: 'initialization' stamp: 'jgv 10/24/2023 19:00:36'!
initializeWithAnAccount: anAccount
	account := anAccount.
	net := 0.! !

!methodRemoval: TransferNetGenerator #initializeTransactions: stamp: 'jgv 10/24/2023 19:00:39'!
initializeTransactions: aTransactions
	transactions := aTransactions.!
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 19:00:59' prior: 50658928 overrides: 50658883!
generateReportValueForADeposit: aDeposit
	net + 0.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 19:01:08' prior: 50658934 overrides: 50658864!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	^net + aTransferenceDeposit transference value.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 19:01:15' prior: 50659454 overrides: 50658864!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	net + aTransferenceDeposit transference value.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 19:01:27' prior: 50658958 overrides: 50658843!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
	net - aTransferenceWithdraw transference value.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 19:01:33' prior: 50658966 overrides: 50658823!
generateReportValueForAWithdraw: aWithdraw
	net + 0.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'jgv 10/24/2023 19:02:08' prior: 50659043 overrides: 50658551!
generateReport
	
	account generateTransactionsReportValuesForAReport: self
	
	^net.! !
!ReportsTest methodsFor: 'tests' stamp: 'jgv 10/24/2023 19:02:51' prior: 50657449!
test01
	| anAccount |
	anAccount := ReceptiveAccount new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: ((AccountSummaryGenerator forAccount: anAccount) generateReport ).! !

----QUIT----(24 October 2023 19:03:14) CuisUniversity-Portfolio2.image priorSource: 10437241!

----STARTUP---- (24 October 2023 19:09:10) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-Portfolio2.image!


----QUIT----(24 October 2023 19:09:20) CuisUniversity-Portfolio2.image priorSource: 10491135!

----STARTUP---- (24 October 2023 20:12:58) as /home/clinux01/Documentos/linux64/linux64/CuisUniversity-Portfolio2.image!


!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:13:13'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:13:13'!
ERROR!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:13:28' prior: 50657522!
test02
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100') equals: ((AccountSummaryGenerator forAccount: anAccount) generateReport ).! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:13:33' prior: 50657485!
test03
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Extracción por 100' with: 'Balance = -100') equals: ((AccountSummaryGenerator forAccount: anAccount) generateReport ).! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:13:39' prior: 50657457!
test04
	| anAccount anotherAcount |
	
	anAccount := ReceptiveAccount new.
	anotherAcount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAcount.
			
	self assert: (OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100') equals: ((AccountSummaryGenerator forAccount: anAccount) generateReport ).! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:14:06' prior: 50657471!
test05
	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAccount.
			
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100') equals: ((AccountSummaryGenerator forAccount: anotherAccount ) generateReport ).! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:14:22' prior: 50657496!
test06
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (AccountSummaryGenerator forAccount: anAccount) generateReport .
	self assert: anotherAccountSumary equals: (AccountSummaryGenerator forAccount: anotherAccount ) generateReport .! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:15:05' prior: 50657654!
test07
	| anAccount |
	

	
	anAccount := ReceptiveAccount new.
	

	self assert: 0 equals: (TransferNetGenerator forAccount: anAccount) generateReport .
! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:15:20'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:15:20'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:15:20'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:15:20'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:15:20'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:15:20'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:15:20'!
ERROR!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:15:20'!
ERROR!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:15:20'!
ERROR!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:15:20'!
ERROR!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:15:20'!
ERROR!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:15:20'!
ERROR!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:15:33'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:15:33'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:15:33'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:15:33'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:15:33'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:15:33'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:15:33'!
ERROR!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:15:33'!
ERROR!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:15:33'!
ERROR!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:15:33'!
ERROR!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:15:33'!
ERROR!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:15:33'!
ERROR!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:15:37'!
ERROR!
!TransferNetGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:15:48' prior: 50659484 overrides: 50658551!
generateReport
	
	account generateTransactionsReportValuesForAReport: self.
	
	^net.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:15:54'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:15:54'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:15:54'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:15:54'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:15:54'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:15:54'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:15:54'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:15:54'!
ERROR!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:15:54'!
ERROR!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:15:54'!
ERROR!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:15:54'!
ERROR!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:15:54'!
ERROR!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:16:00' prior: 50657632!
test08
	| anAccount |
	

	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: 	anAccount.
		
	self assert: 0 equals:  (TransferNetGenerator forAccount: anAccount) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:16:05' prior: 50657612!
test09
	| anAccount |
	

	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: 	anAccount.
		
	self assert: 0 equals: (TransferNetGenerator forAccount: anAccount) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:16:10' prior: 50657601!
test10
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: -100 equals: (TransferNetGenerator forAccount: anAccount) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:16:15' prior: 50657621!
test11
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: -100 equals:  (TransferNetGenerator forAccount: anAccount) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:16:23' prior: 50657640!
test12
	| anAccount anotherAccount|
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  (TransferNetGenerator forAccount: anotherAccount ) generateReport.
! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:16:25'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:16:25'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:16:25'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:16:25'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:16:25'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:16:25'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:16:25'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:16:25'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:16:25'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:16:25'!
FAILURE!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:16:25'!
FAILURE!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:16:25'!
FAILURE!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:16:31'!
FAILURE!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:16:53'!
FAILURE!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:17:03'!
FAILURE!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:19:06'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:19:06'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:19:06'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:19:06'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:19:06'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:19:06'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:19:06'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:19:06'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:19:06'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:19:06'!
FAILURE!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:19:06'!
FAILURE!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:19:06'!
FAILURE!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:19:12'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:19:12'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:19:12'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:19:12'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:19:12'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:19:12'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:19:12'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:19:12'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:19:12'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:19:12'!
FAILURE!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:19:12'!
FAILURE!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:19:12'!
FAILURE!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:19:23'!
FAILURE!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:20:13'!
FAILURE!
!TransferNetGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:21:16' prior: 50659448 overrides: 50658883!
generateReportValueForADeposit: aDeposit
	net:=net + 0.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:21:20' prior: 50659462 overrides: 50658864!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	net:=net + aTransferenceDeposit transference value.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:21:24' prior: 50659470 overrides: 50658843!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
	net:=net - aTransferenceWithdraw transference value.! !
!TransferNetGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:21:27' prior: 50659478 overrides: 50658823!
generateReportValueForAWithdraw: aWithdraw
	net:=net + 0.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:21:30'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:28:55'!
test13
	| aPortfolio anAccount anotherAccount|
	
	aPortfolio :=Portfolio new.
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  (TransferNetGenerator forAccount: anotherAccount ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:30:02' prior: 50659924!
test13
	| aPortfolio anAccount anotherAccount|
	
	
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	aPortfolio :=	 Portfolio with: anAccount with: anotherAccount.
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  (TransferNetGenerator forAccount: anotherAccount ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:30:15'!
test14
	| aPortfolio anAccount anotherAccount|
	
	
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	aPortfolio :=	 Portfolio with: anAccount with: anotherAccount.
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	self assert: 100 equals:  (TransferNetGenerator forAccount: anotherAccount ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:31:26' prior: 50659940!
test13
	| aPortfolio |
	
	aPortfolio :=	 Portfolio new.
	
	self assert: OrderedCollection new equals:  (AccountSummaryGenerator forAPortfolio:aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:31:34'!
ERROR!

ReportGenerator subclass: #SummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SummaryGenerator category: 'Portfolio-Solucion' stamp: 'AB 10/24/2023 20:32:04'!
ReportGenerator subclass: #SummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

SummaryGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #SummaryGenerator stamp: 'AB 10/24/2023 20:33:25'!
ReportGenerator subclass: #SummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SummaryGenerator category: 'Portfolio-Solucion' stamp: 'AB 10/24/2023 20:33:41'!
ReportGenerator subclass: #SummaryGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryGenerator category: 'Portfolio-Solucion' stamp: 'AB 10/24/2023 20:33:41'!
SummaryGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:34:05' overrides: 50658551!
generateReport

	self subclassResponsibility! !
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:34:11' overrides: 50658883!
generateReportValueForADeposit: aDeposit

	self subclassResponsibility! !
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:34:22' overrides: 50658864!
generateReportValueForATransferenceDeposit: aTransferenceDeposit

	self subclassResponsibility! !
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:34:26' overrides: 50658843!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw

	self subclassResponsibility! !
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:34:33' overrides: 50658823!
generateReportValueForAWithdraw: aWithdraw

	self subclassResponsibility! !

SummaryGenerator subclass: #PortfolioSummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSummaryGenerator category: 'Portfolio-Solucion' stamp: 'AB 10/24/2023 20:34:49'!
SummaryGenerator subclass: #PortfolioSummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSummaryGenerator methodsFor: 'no messages' stamp: 'AB 10/24/2023 20:38:51' overrides: 50660026!
generateReport

	account generateTransactionsReportValuesForAReport: self.
	
	summary 	add: 'Balance = ', account balance asString.
	
	^summary.
	
	
	
! !

!classDefinition: #PortfolioSummaryGenerator category: 'Portfolio-Solucion' stamp: 'AB 10/24/2023 20:39:42'!
SummaryGenerator subclass: #PortfolioSummaryGenerator
	instanceVariableNames: 'summary portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSummaryGenerator methodsFor: 'as yet unclassified' stamp: 'AB 10/24/2023 20:40:08' prior: 50660071 overrides: 50660026!
generateReport

	portfolio generateTransactionsReportValuesForAReport: self.
	
	summary 	add: 'Balance = ', account balance asString.
	
	^summary.
	
	
	
! !
!PortfolioSummaryGenerator methodsFor: 'as yet unclassified' stamp: 'AB 10/24/2023 20:40:53' prior: 50660089 overrides: 50660026!
generateReport

	portfolio generateTransactionsReportValuesForAReport: self.
	
	summary 	add: 'Balance = ', portfolio balance asString.
	
	^summary.
	
	
	
! !
!Portfolio methodsFor: 'account management - private' stamp: 'AB 10/24/2023 20:41:12'!
generateTransactionsReportValuesForAReport: aReport! !
!Portfolio methodsFor: 'account management - private' stamp: 'AB 10/24/2023 20:41:44' prior: 50660106!
generateTransactionsReportValuesForAReport: aReportGenerator

	accounts do: [:account | 
				account generateValueForReportGenerator: aReportGenerator.
		].! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:41:51'!
ERROR!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:41:51'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:41:51'!
ERROR!
!ReportGenerator class methodsFor: 'instance creation' stamp: 'AB 10/24/2023 20:42:49'!
forPortfolio: aPortfolio
	^self new initializeWithAPortfolio: aPortfolio. ! !
!PortfolioSummaryGenerator methodsFor: 'as yet unclassified' stamp: 'AB 10/24/2023 20:43:15'!
initializeWithAnAccount: aPorfolio
	account := aPorfolio.
	summary := OrderedCollection new.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:43:19'!
ERROR!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:43:19'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:43:19'!
ERROR!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:45:39'!
ERROR!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:45:39'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:45:39'!
ERROR!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:45:56' prior: 50659973!
test13
	| aPortfolio |
	
	aPortfolio :=	 Portfolio new.
	
	self assert: OrderedCollection new equals:  (PortfolioSummaryGenerator forAPortfolio:aPortfolio ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:46:13' prior: 50660233!
test13
	| aPortfolio |
	
	aPortfolio :=	 Portfolio new.
	
	self assert: OrderedCollection new equals:  (PortfolioSummaryGenerator forAccount:aPortfolio ) generateReport.
! !
!PortfolioSummaryGenerator methodsFor: 'as yet unclassified' stamp: 'AB 10/24/2023 20:47:04'!
initializeWithAPortfolio: aPorfolio
	account := aPorfolio.
	summary := OrderedCollection new.! !

!methodRemoval: PortfolioSummaryGenerator #initializeWithAnAccount: stamp: 'AB 10/24/2023 20:47:07'!
initializeWithAnAccount: aPorfolio
	account := aPorfolio.
	summary := OrderedCollection new.!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:47:13'!
ERROR!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:47:13'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:47:13'!
ERROR!

----SNAPSHOT----(24 October 2023 20:48:08) CuisUniversity-Portfolio2.image priorSource: 10491358!

----SNAPSHOT----(24 October 2023 20:48:21) CuisUniversity-Portfolio2.image priorSource: 10516681!

!methodRemoval: ReportGenerator class #forPortfolio: stamp: 'AB 10/24/2023 20:52:39'!
forPortfolio: aPortfolio
	^self new initializeWithAPortfolio: aPortfolio. !

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:52:46'!
ERROR!
!PortfolioSummaryGenerator methodsFor: 'as yet unclassified' stamp: 'AB 10/24/2023 20:53:17'!
initializeWithAnAccount: anAccount
	account := anAccount.
	summary := OrderedCollection new.! !

!methodRemoval: PortfolioSummaryGenerator #initializeWithAPortfolio: stamp: 'AB 10/24/2023 20:53:19'!
initializeWithAPortfolio: aPorfolio
	account := aPorfolio.
	summary := OrderedCollection new.!

SummaryGenerator subclass: #PortfolioSummaryGenerator
	instanceVariableNames: 'summary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

SummaryGenerator subclass: #PortfolioSummaryGenerator
	instanceVariableNames: 'summary '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSummaryGenerator category: 'Portfolio-Solucion' stamp: 'AB 10/24/2023 20:53:31'!
SummaryGenerator subclass: #PortfolioSummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

SummaryGenerator subclass: #PortfolioSummaryGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSummaryGenerator category: 'Portfolio-Solucion' stamp: 'AB 10/24/2023 20:53:45'!
SummaryGenerator subclass: #PortfolioSummaryGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

SummaryGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryGenerator category: 'Portfolio-Solucion' stamp: 'AB 10/24/2023 20:53:56'!
SummaryGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

ReportGenerator subclass: #SummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SummaryGenerator category: 'Portfolio-Solucion' stamp: 'AB 10/24/2023 20:54:00'!
ReportGenerator subclass: #SummaryGenerator
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSummaryGenerator methodsFor: 'as yet unclassified' stamp: 'AB 10/24/2023 20:54:13' prior: 50660098 overrides: 50660026!
generateReport

	account generateTransactionsReportValuesForAReport: self.
	
	summary 	add: 'Balance = ', account balance asString.
	
	^summary.
	
	
	
! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:54:16'!
FAILURE!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:54:16'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:54:16'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:54:37' prior: 50660242!
test13
	| aPortfolio |
	
	aPortfolio :=	 Portfolio new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals:  (PortfolioSummaryGenerator forAccount:aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:54:39'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:56:08' prior: 50659956!
test14
	| aPortfolio anAccount anotherAccount|
	
	
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	aPortfolio :=	 Portfolio with: anAccount with: anotherAccount.
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	(OrderedCollection with: 'Balance = 0')
	self assert: 100 equals:  (TransferNetGenerator forAccount: anotherAccount ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:56:25' prior: 50660469!
test14
	| aPortfolio anAccount anotherAccount|
	
	
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	aPortfolio :=	 Portfolio with: anAccount with: anotherAccount.
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	(OrderedCollection with: 'Balance = 0')
	self assert: 100 equals:  (PortfolioSummaryGenerator forAccount: aPortfolio ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:56:46' prior: 50660487!
test14
	| aPortfolio anAccount anotherAccount|
	
	
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	aPortfolio :=	 Portfolio with: anAccount.
	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	(OrderedCollection with: 'Balance = 0')
	self assert: 100 equals:  (PortfolioSummaryGenerator forAccount: aPortfolio ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:56:55' prior: 50660505!
test14
	| aPortfolio anAccount anotherAccount|
	
	
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	aPortfolio :=	 Portfolio with: anAccount.
	Deposit  register: 100 on: anAccount.	
	(OrderedCollection with: 'Balance = 0')
	self assert: 100 equals:  (PortfolioSummaryGenerator forAccount: aPortfolio ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:57:13' prior: 50660522!
test14
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	
	aPortfolio :=	 Portfolio with: anAccount.
	
	Deposit  register: 100 on: anAccount.	
	
	(OrderedCollection with: 'Balance = 0')
	
	self assert: 100 equals:  (PortfolioSummaryGenerator forAccount: aPortfolio ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 20:57:31' prior: 50660536!
test14
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	
	aPortfolio :=	 Portfolio with: anAccount.
	
	Deposit  register: 100 on: anAccount.	
	
	
	self assert:  (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100')  equals:  (PortfolioSummaryGenerator forAccount: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:57:34'!
ERROR!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:57:44'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:57:44'!
ERROR!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:57:44'!
ERROR!
!Portfolio methodsFor: 'account management - private' stamp: 'AB 10/24/2023 20:58:07' prior: 50660111!
generateTransactionsReportValuesForAReport: aReportGenerator

	accounts do: [:account | 
				account generateTransactionsReportValuesForAReport: aReportGenerator.
		].! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 20:58:17'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:58:17'!
ERROR!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 20:58:17'!
ERROR!
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:59:08' prior: 50660026 overrides: 50658551!
generateReport

	account generateTransactionsReportValuesForAReport: self.
	
	summary 	add: 'Balance = ', account balance asString.
	
	^summary.
	
	! !
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:59:36' prior: 50660031 overrides: 50658883!
generateReportValueForADeposit: aDeposit
	summary add: 'Depósito por ', aDeposit value asString.! !
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 20:59:51' prior: 50660037 overrides: 50658864!
generateReportValueForATransferenceDeposit: aTransferenceDeposit
	summary add: 'Entrada por transferencia de ', aTransferenceDeposit transference value asString.! !
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 21:00:00' prior: 50660044 overrides: 50658843!
generateReportValueForATransferenceWithdraw: aTransferenceWithdraw
	summary add: 'Salida por transferencia de ', aTransferenceWithdraw transference value asString.! !
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 21:00:11' prior: 50660051 overrides: 50658823!
generateReportValueForAWithdraw: aWithdraw
	summary add: 'Extracción por ', aWithdraw value asString.! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:00:29' prior: 50659490!
test01
	| anAccount |
	anAccount := ReceptiveAccount new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: ((SummaryGenerator forAccount: anAccount) generateReport ).! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:00:36' prior: 50659540!
test02
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100') equals: ((SummaryGenerator forAccount: anAccount) generateReport ).! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:00:41' prior: 50659551!
test03
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	Withdraw register: 100 on: anAccount.
		
	self assert: (OrderedCollection with: 'Extracción por 100' with: 'Balance = -100') equals: ((SummaryGenerator forAccount: anAccount) generateReport ).! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:00:46' prior: 50659562!
test04
	| anAccount anotherAcount |
	
	anAccount := ReceptiveAccount new.
	anotherAcount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAcount.
			
	self assert: (OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100') equals: ((SummaryGenerator forAccount: anAccount) generateReport ).! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:00:50' prior: 50659576!
test05
	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100 from: anAccount  to: anotherAccount.
			
	self assert: (OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100') equals: ((SummaryGenerator forAccount: anotherAccount ) generateReport ).! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:00:57' prior: 50659591!
test06
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (SummaryGenerator forAccount: anAccount) generateReport .
	self assert: anotherAccountSumary equals: (AccountSummaryGenerator forAccount: anotherAccount ) generateReport .! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:01:02' prior: 50660741!
test06
	| anAccount anAccountSumary anotherAccount anotherAccountSumary |
	

	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	Transference transfer: 25 from: anAccount  to: anotherAccount. 
	
	
	anAccountSumary	 := OrderedCollection with: 'Depósito por 100' with: 'Extracción por 50' with: 'Salida por transferencia de 25' with: 'Balance = 25'.
	anotherAccountSumary := 	OrderedCollection with: 'Entrada por transferencia de 25' with: 'Balance = 25'.

	self assert: anAccountSumary equals: (SummaryGenerator forAccount: anAccount) generateReport .
	self assert: anotherAccountSumary equals: (SummaryGenerator forAccount: anotherAccount ) generateReport .! !

!classRemoval: #AccountSummaryGenerator stamp: 'AB 10/24/2023 21:01:07'!
SummaryGenerator subclass: #AccountSummaryGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:01:15' prior: 50660426!
test13
	| aPortfolio |
	
	aPortfolio :=	 Portfolio new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals:  (SummaryGenerator forAccount:aPortfolio ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:01:21' prior: 50660548!
test14
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	
	aPortfolio :=	 Portfolio with: anAccount.
	
	Deposit  register: 100 on: anAccount.	
	
	
	self assert:  (OrderedCollection with: 'Depósito por 100' with: 'Balance = 100')  equals:  (SummaryGenerator forAccount: aPortfolio ) generateReport.
! !

!classRemoval: #PortfolioSummaryGenerator stamp: 'AB 10/24/2023 21:01:26'!
SummaryGenerator subclass: #PortfolioSummaryGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 21:01:27'!
ERROR!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 21:01:27'!
ERROR!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 21:01:27'!
ERROR!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 21:01:27'!
ERROR!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 21:01:27'!
ERROR!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 21:01:27'!
ERROR!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 21:01:27'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 21:01:27'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 21:01:27'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 21:01:27'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 21:01:27'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 21:01:27'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 21:01:27'!
ERROR!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 21:01:27'!
ERROR!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 21:01:31'!
ERROR!
!SummaryGenerator methodsFor: 'report generation' stamp: 'AB 10/24/2023 21:04:28'!
initializeWithAnAccount: anAccount
account :=anAccount .
summary :=OrderedCollection new.! !

Object subclass: #NameOfSubclass
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #NameOfSubclass category: 'Portfolio-Solucion' stamp: 'AB 10/24/2023 21:04:35'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #NameOfSubclass stamp: 'AB 10/24/2023 21:04:45'!
Object subclass: #NameOfSubclass
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 21:04:51'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:07:28'!
test15
	| aPortfolio anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	aPortfolio :=	 Portfolio with: anAccount with: anotherAccount.

	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.

	self assert:  (OrderedCollection with: 'Depósito por 100' with:'Extraccion por 100'with: 'Balance = 0')  equals:  (SummaryGenerator forAccount: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test15 stamp: 'AB 10/24/2023 21:07:29'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:07:45' prior: 50660921!
test15
	| aPortfolio anAccount anotherAccount|
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	aPortfolio :=	 Portfolio with: anAccount with: anotherAccount.

	Deposit  register: 100 on: anAccount.	
	Withdraw register: 100 on: 	anAccount.

	self assert:  (OrderedCollection with: 'Depósito por 100' with:'Extracción por 100'with: 'Balance = 0')  equals:  (SummaryGenerator forAccount: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test15 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/24/2023 21:07:47'!
PASSED!

----SNAPSHOT----(24 October 2023 21:09:04) CuisUniversity-Portfolio2.image priorSource: 10516780!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:09:27'!
test16
	| aPortfolio |
	
	aPortfolio :=	 Portfolio new.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals:  (TransferNetGenerator forAccount:aPortfolio ) generateReport.
! !
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:09:32' prior: 50660996!
test16
	| aPortfolio |
	
	aPortfolio :=	 Portfolio new.
	
	self assert: 0 equals:  (TransferNetGenerator forAccount:aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/24/2023 21:09:36'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:10:24'!
test17
	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	
	aPortfolio :=	 Portfolio with: anAccount.
	
	Deposit  register: 100 on: anAccount.	
	
	
	self assert:  0equals:  (TransferNetGenerator forAccount: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:10:25'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:11:00' prior: 50661049!
test17
	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	
	aPortfolio :=	 Portfolio with: anAccount.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	
	self assert:  100 equals:  (TransferNetGenerator forAccount: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:11:05'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:11:14' prior: 50661101!
test17
	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	
	aPortfolio :=	 Portfolio with: anAccount.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	
	self assert:  0 equals:  (TransferNetGenerator forAccount: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:11:17'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:12:12'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:12:20' prior: 50661118!
test17
	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	
	aPortfolio :=	 Portfolio with: anAccount.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	
	self assert:  -100 equals:  (TransferNetGenerator forAccount: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:12:22'!
FAILURE!

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:13:12'!
FAILURE!

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:13:12'!
FAILURE!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:13:50' prior: 50661215!
test17
	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	aPortfolio :=	 Portfolio with: anAccount.
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
	
	self assert:  -100 equals:  (TransferNetGenerator forAccount: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:13:51'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'AB 10/24/2023 21:14:18'!
test18
	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	aPortfolio :=	 Portfolio with: anAccount with:anotherAccount .
	Transference transfer: 100  from: anAccount  to: anotherAccount.
	
		
	self assert:  0 equals:  (TransferNetGenerator forAccount: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test18 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/24/2023 21:14:19'!
PASSED!

----SNAPSHOT----(24 October 2023 21:14:23) CuisUniversity-Portfolio2.image priorSource: 10538964!

----SNAPSHOT----(24 October 2023 21:14:29) CuisUniversity-Portfolio2.image priorSource: 10550389!

----SNAPSHOT----(24 October 2023 21:14:54) CuisUniversity-Portfolio2.image priorSource: 10550488!

----SNAPSHOT----(24 October 2023 21:14:56) CuisUniversity-Portfolio2.image priorSource: 10550587!

----QUIT----(24 October 2023 21:14:58) CuisUniversity-Portfolio2.image priorSource: 10550686!

----STARTUP---- (25 October 2023 22:33:07) as C:\Users\Antonela\Desktop\windows64\windows64\CuisUniversity-Portfolio2.image!


!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:33:20'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AB 10/25/2023 22:34:54' prior: 50662707!
generateStructureInfo
	|structureInfo|
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
			(account isKindOf: ReceptiveAccount ) ifTrue: [			structureInfo add: String tab, account receptiveAccountName].
			(account isKindOf: Portfolio) ifTrue: [ structureInfo add: account generateStructureInfo ]. 
		].
	
	^structureInfo.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:35:02'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:35:02'!
FAILURE!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:35:02'!
FAILURE!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:35:08'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AB 10/25/2023 22:35:52' prior: 50663030!
generateStructureInfo
	|structureInfo|
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
			(account isKindOf: ReceptiveAccount ) ifTrue: [			structureInfo add: String tab, account receptiveAccountName].
			(account isKindOf: Portfolio) ifTrue: [ structureInfo addAll: account generateStructureInfo ]. 
		].
	
	^structureInfo.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 22:36:02'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 22:36:03'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 22:36:03'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 22:36:04'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 22:36:04'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:36:05'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:36:05'!
FAILURE!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:36:05'!
FAILURE!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:36:10'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AB 10/25/2023 22:38:08' prior: 50663097!
generateStructureInfo
	|structureInfo|
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
			(account isKindOf: ReceptiveAccount ) ifTrue: [			structureInfo add: String tab, account receptiveAccountName].
			(account isKindOf: Portfolio) ifTrue: [ structureInfo addAll: String tab,account generateStructureInfo ]. 
		].
	
	^structureInfo.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:38:15'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:38:15'!
ERROR!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:38:15'!
ERROR!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:38:17'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AB 10/25/2023 22:41:15' prior: 50663164!
generateStructureInfo
	|structureInfo|
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
			(account isKindOf: ReceptiveAccount ) ifTrue: [			structureInfo add: String tab, account receptiveAccountName].
			(account isKindOf: Portfolio) ifTrue: [account generateStructureInfo do:[:anotherAccount| structureInfo add:String tab, account receptiveAccountName] ]. 
		].
	
	^structureInfo.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:41:18'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:41:18'!
ERROR!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:41:18'!
ERROR!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:41:20'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AB 10/25/2023 22:44:11' prior: 50663232!
generateStructureInfo
	|structureInfo|
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account | structureInfo addAll:account generateStructureValue		].
	
	^structureInfo.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 22:44:22'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:44:22'!
ERROR!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:44:22'!
ERROR!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:44:22'!
ERROR!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:44:24'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AB 10/25/2023 22:44:39'!
generateStructureValue
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AB 10/25/2023 22:45:12' prior: 50663363!
generateStructureValue
		 ^String tab,  receptiveAccountName.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 22:45:15'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:45:15'!
FAILURE!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:45:15'!
ERROR!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:45:15'!
ERROR!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:45:17'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AB 10/25/2023 22:45:41' prior: 50663301!
generateStructureInfo
	|structureInfo|
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account | structureInfo add:account generateStructureValue		].
	
	^structureInfo.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 22:45:43'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 22:45:43'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 22:45:43'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 22:45:43'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:45:44'!
ERROR!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:45:44'!
ERROR!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:45:44'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:45:46'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'AB 10/25/2023 22:46:00'!
generateStructureValue
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reports' stamp: 'AB 10/25/2023 22:48:25' prior: 50663487!
generateStructureValue
	|structureInfo|
	structureInfo:= OrderedCollection new.

	accounts generateStructureInfo do:[:account| structureInfo add:String tab, account generateStructureValue].! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 22:48:31'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 22:48:31'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 22:48:31'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 22:48:31'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 22:48:31'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 22:48:31'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 22:48:31'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 22:48:31'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 22:48:31'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:48:32'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:48:32'!
ERROR!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:48:32'!
ERROR!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:48:34'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'AB 10/25/2023 22:50:03' prior: 50663492!
generateStructureValue
	|structureInfo|
	structureInfo:= OrderedCollection new.

	(accounts generateStructureInfo) do:[:account| structureInfo add:String tab, account generateStructureValue].! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:50:05'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:50:05'!
ERROR!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:50:05'!
ERROR!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:50:07'!
ERROR!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:50:16'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'AB 10/25/2023 22:50:31' prior: 50663553!
generateStructureValue
	|structureInfo|
	structureInfo:= OrderedCollection new.

	accounts do:[:account| structureInfo add:String tab, account generateStructureValue].! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 22:50:32'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 22:50:33'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:50:33'!
FAILURE!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 22:50:33'!
FAILURE!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 22:50:34'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'Joaco 10/25/2023 18:44:33' prior: 50663426!
generateStructureInfo
	|structureInfo|
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
			(account isKindOf: ReceptiveAccount ) ifTrue: [			structureInfo add: String tab, account receptiveAccountName].
			(account isKindOf: Portfolio) ifTrue: [ structureInfo add: String tab, account portfolioName]. 
		].
	
	^structureInfo.! !
!Portfolio methodsFor: 'reports' stamp: 'AB 10/25/2023 23:10:52' prior: 50663678!
generateStructureInfo
	|structureInfo |
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
			(account isKindOf: ReceptiveAccount ) ifTrue: [			structureInfo add: String tab, account receptiveAccountName].
			(account isKindOf: Portfolio) ifTrue: [ 
				(account generateStructureInfo) do:[:name|structureInfo add: String tab, name					].
					
				]. 
		].
	
	^structureInfo.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 23:10:56'!
PASSED!

!methodRemoval: Portfolio #generateStructureValue stamp: 'AB 10/25/2023 23:11:18'!
generateStructureValue
	|structureInfo|
	structureInfo:= OrderedCollection new.

	accounts do:[:account| structureInfo add:String tab, account generateStructureValue].!

!methodRemoval: ReceptiveAccount #generateStructureValue stamp: 'AB 10/25/2023 23:11:25'!
generateStructureValue
		 ^String tab,  receptiveAccountName.!
!Portfolio methodsFor: 'reports' stamp: 'AB 10/25/2023 23:11:58' prior: 50663693!
generateStructureInfo
	|structureInfo |
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
			(account isKindOf: ReceptiveAccount ) ifTrue: [			structureInfo add: String tab, account receptiveAccountName].
			(account isKindOf: Portfolio) ifTrue: [ 
				(account generateStructureInfo) do:[:name|structureInfo add: String tab, name					].
				]. 
		].
	
	^structureInfo.! !

!testRun: #ReportsTest #test01 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

!testRun: #ReportsTest #test22 stamp: 'AB 10/25/2023 23:12:06'!
PASSED!

----SNAPSHOT----(25 October 2023 23:15:07) CuisUniversity-Portfolio2.image priorSource: 10603807!

----QUIT----(25 October 2023 23:15:22) CuisUniversity-Portfolio2.image priorSource: 10629984!

----STARTUP---- (26 October 2023 15:20:04) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-Portfolio2.image!

!Portfolio methodsFor: 'reports' stamp: 'Jgv 10/26/2023 15:27:08'!
generateStructureInfo: aPortfolioReport
	
	accounts do: [: account |
			account generateStructureInfoValueForReport: aPortfolioReport.
		].! !

!methodRemoval: Portfolio #generateStructureInfo stamp: 'Jgv 10/26/2023 15:27:13'!
generateStructureInfo
	|structureInfo |
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
			(account isKindOf: ReceptiveAccount ) ifTrue: [			structureInfo add: String tab, account receptiveAccountName].
			(account isKindOf: Portfolio) ifTrue: [ 
				(account generateStructureInfo) do:[:name|structureInfo add: String tab, name					].
				]. 
		].
	
	^structureInfo.!
!Portfolio methodsFor: 'reports' stamp: 'Jgv 10/26/2023 15:30:27'!
generateStructureInfoValueForReport: aPortfolioReport
	
	accounts do: [: account |
			account generateStructureInfoValueForReport: aPortfolioReport.
		].! !
!Portfolio methodsFor: 'reports' stamp: 'AB 10/25/2023 23:11:58'!
generateStructureInfo
	|structureInfo |
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
			(account isKindOf: ReceptiveAccount ) ifTrue: [			structureInfo add: String tab, account receptiveAccountName].
			(account isKindOf: Portfolio) ifTrue: [ 
				(account generateStructureInfo) do:[:name|structureInfo add: String tab, name					].
				]. 
		].
	
	^structureInfo.! !

!methodRemoval: Portfolio #generateStructureInfo: stamp: 'Jgv 10/26/2023 15:33:36'!
generateStructureInfo: aPortfolioReport
	
	accounts do: [: account |
			account generateStructureInfoValueForReport: aPortfolioReport.
		].!
!ReportsTest methodsFor: 'tests' stamp: 'Jgv 10/26/2023 15:40:29'!
test23
	| aPortfolio vinDieselAccount jordanaBrewsterAccount anotherPortfolio|
	
	
	
	vinDieselAccount := ReceptiveAccount named: 'Cuenta de Vin Diesel'.
	jordanaBrewsterAccount := ReceptiveAccount named: 'Cuenta de Jordana Brewster'.
	
	anotherPortfolio := Portfolio named: 'Portfolio de hermanos' with: jordanaBrewsterAccount.
	
	aPortfolio :=	 Portfolio named: 'Portfolio de la familia' with: vinDieselAccount with: anotherPortfolio.

	self assert:  (OrderedCollection with: 'Portfolio de la familia' with: String tab, 'Cuenta de Vin Diesel' with: String tab, 'Portfolio de hermanos' with: String tab, String tab, 'Cuenta de Jordana Brewster')
		equals:  (PortfolioStructureInfo forPortfolio: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test23 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test22 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!

!testRun: #ReportsTest #test23 stamp: 'Jgv 10/26/2023 15:40:30'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'Jgv 10/26/2023 15:40:41' prior: 50662992!
test22
	| aPortfolio vinDieselAccount jordanaBrewsterAccount anotherPortfolio|
	
	
	
	vinDieselAccount := ReceptiveAccount named: 'Cuenta de Vin Diesel'.
	jordanaBrewsterAccount := ReceptiveAccount named: 'Cuenta de Jordana Brewster'.
	
	anotherPortfolio := Portfolio named: 'Portfolio de hermanos' with: jordanaBrewsterAccount.
	
	aPortfolio :=	 Portfolio named: 'Portfolio de la familia' with: vinDieselAccount with: anotherPortfolio.

	self assert:  (OrderedCollection with: 'Portfolio de la familia' with: String tab, 'Cuenta de Vin Diesel' with: String tab, 'Portfolio de hermanos' with: String tab, String tab, 'Cuenta de Jordana Brewster')
		equals:  (PortfolioStructureInfo forPortfolio: aPortfolio ) generateReport.
! !

!testRun: #ReportsTest #test22 stamp: 'Jgv 10/26/2023 15:40:43'!
PASSED!

!testRun: #ReportsTest #test01 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test22 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!testRun: #ReportsTest #test23 stamp: 'Jgv 10/26/2023 15:40:44'!
PASSED!

!methodRemoval: ReportsTest #test23 stamp: 'Jgv 10/26/2023 15:42:25'!
test23
	| aPortfolio vinDieselAccount jordanaBrewsterAccount anotherPortfolio|
	
	
	
	vinDieselAccount := ReceptiveAccount named: 'Cuenta de Vin Diesel'.
	jordanaBrewsterAccount := ReceptiveAccount named: 'Cuenta de Jordana Brewster'.
	
	anotherPortfolio := Portfolio named: 'Portfolio de hermanos' with: jordanaBrewsterAccount.
	
	aPortfolio :=	 Portfolio named: 'Portfolio de la familia' with: vinDieselAccount with: anotherPortfolio.

	self assert:  (OrderedCollection with: 'Portfolio de la familia' with: String tab, 'Cuenta de Vin Diesel' with: String tab, 'Portfolio de hermanos' with: String tab, String tab, 'Cuenta de Jordana Brewster')
		equals:  (PortfolioStructureInfo forPortfolio: aPortfolio ) generateReport.
!
!Portfolio methodsFor: 'reports' stamp: 'Jgv 10/26/2023 15:59:13' prior: 50663877!
generateStructureInfo
	|structureInfo |
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
			structureInfo add: String tab, account generateStrutureInfo.
			(account isKindOf: ReceptiveAccount ) ifTrue: [			structureInfo add: String tab, account receptiveAccountName].
			(account isKindOf: Portfolio) ifTrue: [ 
				(account generateStructureInfo) do:[:name|structureInfo add: String tab, name					].
				]. 
		].
	
	^structureInfo.! !
!Portfolio methodsFor: 'reports' stamp: 'Jgv 10/26/2023 16:00:53' prior: 50664086!
generateStructureInfo
	|structureInfo |
	
	structureInfo := OrderedCollection with: portfolioName.
	
	accounts do: [: account |
					(account generateStructureInfo) do:[ :name | structureInfo add: String tab, name					].
				].
	^structureInfo.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'Jgv 10/26/2023 16:01:40'!
generateStructureInfo
	^OrderedCollection with: receptiveAccountName.! !

!testRun: #ReportsTest #test01 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test02 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test03 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test04 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test05 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test06 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test07 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test08 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test09 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test10 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test11 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test12 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test13 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test14 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test15 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test21 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!

!testRun: #ReportsTest #test22 stamp: 'Jgv 10/26/2023 16:01:54'!
PASSED!
!PortfolioStructureInfo methodsFor: 'initialization' stamp: 'Jgv 10/26/2023 16:13:09'!
generateStructureInfoForPortfolio: aPortfolio
! !

Object subclass: #PortfolioStructureInfo
	instanceVariableNames: 'structure tabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureInfo category: 'Portfolio-Solucion' stamp: 'Jgv 10/26/2023 16:13:46'!
Object subclass: #PortfolioStructureInfo
	instanceVariableNames: 'structure tabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: PortfolioStructureInfo #generateStructureInfoForPortfolio: stamp: 'Jgv 10/26/2023 16:20:17'!
generateStructureInfoForPortfolio: aPortfolio
!

Object subclass: #PortfolioStructureInfo
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureInfo category: 'Portfolio-Solucion' stamp: 'Jgv 10/26/2023 16:20:44'!
Object subclass: #PortfolioStructureInfo
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----QUIT----(26 October 2023 16:27:53) CuisUniversity-Portfolio2.image priorSource: 10630083!