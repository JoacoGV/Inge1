

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (17 August 2023 19:40:10) as /home/clinux01/Descargas/linux64/CuisUniversity-5981.image!


ObjectBuilder create: #verdadero

	collaboratorNames: ''
	in: 'verdaderoFalso'
	!

!classDefinition: #verdadero category: 'verdaderoFalso' stamp: 'JG 8/17/2023 20:34:26'!
DenotativeObject subclass: #verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'verdaderoFalso'!

!classDefinition: 'verdadero class' category: 'verdaderoFalso' stamp: 'JG 8/17/2023 20:34:26'!
verdadero class
	instanceVariableNames: ''!

ObjectBuilder create: #falso asChildOf: DenotativeObject collaboratorNames: '' in: 'verdaderoFalso'!

!classDefinition: #falso category: 'verdaderoFalso' stamp: 'JG 8/17/2023 20:34:35'!
DenotativeObject subclass: #falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'verdaderoFalso'!

!classDefinition: 'falso class' category: 'verdaderoFalso' stamp: 'JG 8/17/2023 20:34:35'!
falso class
	instanceVariableNames: ''!

ObjectBuilder create: #verdaderoFalsoTest asChildOf: DenotativeObject collaboratorNames: '' in: 'verdaderoFalso'!

!classDefinition: #verdaderoFalsoTest category: 'verdaderoFalso' stamp: 'JG 8/17/2023 20:36:08'!
DenotativeObject subclass: #verdaderoFalsoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'verdaderoFalso'!

!classDefinition: 'verdaderoFalsoTest class' category: 'verdaderoFalso' stamp: 'JG 8/17/2023 20:36:08'!
verdaderoFalsoTest class
	instanceVariableNames: ''!
!verdaderoFalsoTest class methodsFor: 'no messages' stamp: 'JG 8/17/2023 20:39:25'!
test01notVerdaderoEsFalso

	! !
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 20:49:35'!
test01notVerdaderoEsFalso:
	Assert that: verdadero verdadero isEqualTo: falso

	! !
!verdadero class methodsFor: 'no messages' stamp: 'JG 8/17/2023 20:50:07'!
no! !

!methodRemoval: verdaderoFalsoTest class #test01notVerdaderoEsFalso:that: stamp: 'JG 8/17/2023 20:50:16'!
test01notVerdaderoEsFalso:
	Assert that: verdadero verdadero isEqualTo: falso

	!
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 20:50:41' prior: 50650367!
test01notVerdaderoEsFalso
	Assert that: verdadero no isEqualTo: falso

	! !

verdaderoFalsoTest test01notVerdaderoEsFalso !

verdaderoFalsoTest test01notVerdaderoEsFalso !
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 20:52:15' prior: 50650376!
no
	^falso! !

verdaderoFalsoTest test01notVerdaderoEsFalso !

verdaderoFalsoTest test01notVerdaderoEsFalso !

verdaderoFalsoTest test01notVerdaderoEsFalso !
!falso class methodsFor: 'no messages' stamp: 'JG 8/17/2023 20:55:06'!
no
	^verdadero! !

verdadero no!

verdadero no!

verdadero no!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 20:55:34'!
PASSED!
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 20:56:20'!
test02notFalsoEsVerdadero
	Assert that: falso no isEqualTo: verdadero ! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 20:56:53'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 20:58:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 20:58:13'!
PASSED!
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 20:59:56'!
y
	! !
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:01:31'!
test03verdaderoYVerdaderoEsVerdadero
	Assert that: verdadero y :verdadero isEqualTo: verdadero ! !
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:01:44' prior: 50650429!
test03verdaderoYVerdaderoEsVerdadero
	Assert that: verdadero y: verdadero isEqualTo: verdadero ! !
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:01:57' prior: 50650436!
test03verdaderoYVerdaderoEsVerdadero
	Assert that: verdadero y :verdadero isEqualTo: verdadero ! !
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:02:49' prior: 50650443!
test03verdaderoYVerdaderoEsVerdadero
	Assert that: (verdadero y :verdadero) isEqualTo: verdadero ! !
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:05:27'!
y: booleano
	
	! !

!methodRemoval: verdadero class #y: stamp: 'JG 8/17/2023 21:05:50'!
y: booleano
	
	!
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:06:53'!
y: booleano
	Assert that: booleano  isEqualTo: 	verdadero! !

!methodRemoval: verdadero class #y stamp: 'JG 8/17/2023 21:11:08'!
y
	!
!falso class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:13:26'!
y: booleano
	^falso! !
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:14:08'!
test03verdaderoYFalsoEsFalso
	Assert that: (falso y:falso) isEqualTo: falso! !

!methodRemoval: verdaderoFalsoTest class #test03verdaderoYFalsoEsFalso stamp: 'JG 8/17/2023 21:14:13'!
test03verdaderoYFalsoEsFalso
	Assert that: (falso y:falso) isEqualTo: falso!
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:14:47'!
test03verdaderoYFalsoEsFalso
	Assert that: (falso y:falso) isEqualTo: falso! !

!methodRemoval: verdaderoFalsoTest class #test03verdaderoYVerdaderoEsVerdadero stamp: 'JG 8/17/2023 21:14:53'!
test03verdaderoYVerdaderoEsVerdadero
	Assert that: (verdadero y :verdadero) isEqualTo: verdadero !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:14:56'!
PASSED!
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:16:17'!
test04falsoYFalsoEsFalso
	Assert that: (falso y: falso) isEqualTo: falso! !
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:16:26' prior: 50650484!
test03verdaderoYFalsoEsFalso
	Assert that: (falso y:verdadero) isEqualTo: falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:16:58'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:17:03'!
PASSED!
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:17:37'!
test05verdaderoYVerdaderoEsVerdadero! !
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:18:13'!
test03falsoYVerdaderoEsFalso
	Assert that: (falso y:verdadero) isEqualTo: falso! !

!methodRemoval: verdaderoFalsoTest class #test03verdaderoYFalsoEsFalso stamp: 'JG 8/17/2023 21:18:30'!
test03verdaderoYFalsoEsFalso
	Assert that: (falso y:verdadero) isEqualTo: falso!
!verdaderoFalsoTest class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:19:33' prior: 50650517!
test05verdaderoYVerdaderoEsVerdadero
	Assert that: (verdadero y:verdadero) isEqualTo: verdadero! !
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:19:55' prior: 50650462!
y: booleano
	^booleano! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:20:00'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:20:05'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:20:09'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:20:14'!
PASSED!
!verdaderoFalsoTest class methodsFor: 'nil' stamp: 'JG 8/17/2023 21:22:52'!
test06verdaderoOrVerdaderoEsVerdadero
	Assert that: (verdadero or: verdadero) isEqualTo: verdadero! !
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:23:22'!
or: booleano
	^verdadero! !
!falso class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:24:44'!
or: booleano
	^booleano! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:24:51'!
PASSED!
!verdaderoFalsoTest class methodsFor: 'or' stamp: 'JG 8/17/2023 21:26:17'!
test07falsoOrVerdaderoEsVerdadero
	Assert that: (falso or: verdadero) isEqualTo: verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:26:41'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:27:14'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:27:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:27:18'!
PASSED!
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:34:15'!
siEsVerdadero: aClosure
	[aClosure] value! !
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:36:15'!
siEsFalso: aClosure
	
	! !

'hola'!

verdadero siEsVerdadero: ['hola']!
!verdaderoFalsoTest class methodsFor: 'value' stamp: 'JG 8/17/2023 21:39:22'!
test08verdaderoSiEsVerdadero
	Assert that: (verdadero siEsVerdadero: [2+2]) isEqualTo: 4 
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:39:28'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:39:28'!
ERROR!
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:40:54' prior: 50650591!
siEsVerdadero: aClosure
	aClosure value! !
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:40:59' prior: 50650612!
siEsVerdadero: aClosure
	^aClosure value! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:41:06'!
PASSED!
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:42:14' prior: 50650595!
siEsFalso: aClosure
	^nil
	
	! !
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:42:54' prior: 50650625!
siEsFalso: aClosure
! !
!verdaderoFalsoTest class methodsFor: 'value' stamp: 'JG 8/17/2023 21:43:54'!
test08verdaderoSiEsVerdaderoo
	Assert that: (verdadero siEsVerdadero: [2+2]) isEqualTo: 4 
	! !
!verdaderoFalsoTest class methodsFor: 'value' stamp: 'JG 8/17/2023 21:44:15'!
test08verdaderoSiEsFalso
	Assert that: (verdadero siEsVerdadero: [2+2]) isEqualTo:  nil! !

!methodRemoval: verdaderoFalsoTest class #test08verdaderoSiEsFalso stamp: 'JG 8/17/2023 21:44:20'!
test08verdaderoSiEsFalso
	Assert that: (verdadero siEsVerdadero: [2+2]) isEqualTo:  nil!
!verdaderoFalsoTest class methodsFor: 'value' stamp: 'JG 8/17/2023 21:44:33'!
test08verdaderoSiEsFalso
	Assert that: (verdadero siEsVerdadero: [2+2]) isEqualTo: nil
	! !

!methodRemoval: verdaderoFalsoTest class #test08verdaderoSiEsVerdaderoo stamp: 'JG 8/17/2023 21:44:40'!
test08verdaderoSiEsVerdaderoo
	Assert that: (verdadero siEsVerdadero: [2+2]) isEqualTo: 4 
	!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:44:43'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:44:43'!
ERROR!
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:45:15' prior: 50650630!
siEsFalso: aClosure
	^nil! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:45:22'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:45:22'!
ERROR!
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:48:58' prior: 50650670!
siEsFalso: aClosure! !
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:52:31' prior: 50650680!
siEsFalso: aClosure
	! !
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:53:08' prior: 50650684!
siEsFalso: aClosure
	 ^self! !

verdaderoFalsoTest
	collaboratorNames: 'a'
	in: 'verdaderoFalso'!

!classDefinition: 'verdaderoFalsoTest class' category: 'verdaderoFalso' stamp: 'JG 8/17/2023 21:53:47'!
verdaderoFalsoTest class
	instanceVariableNames: 'a'!

!classDefinition: #verdaderoFalsoTest category: 'verdaderoFalso' stamp: 'JG 8/17/2023 21:53:47'!
DenotativeObject subclass: #verdaderoFalsoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'verdaderoFalso'!

!classDefinition: 'verdaderoFalsoTest class' category: 'verdaderoFalso' stamp: 'JG 8/17/2023 21:53:47'!
verdaderoFalsoTest class
	instanceVariableNames: 'a'!
!verdaderoFalsoTest class methodsFor: 'value' stamp: 'JG 8/17/2023 21:54:29' prior: 50650652!
test08verdaderoSiEsFalso
	a := 0
	Assert that: (verdadero siEsVerdadero: [a + 1]) isEqualTo: a
	! !
!verdaderoFalsoTest class methodsFor: 'value' stamp: 'JG 8/17/2023 21:54:51' prior: 50650600!
test08verdaderoSiEsVerdadero
	a := 0
	Assert that: (verdadero siEsVerdadero: [a + 1]) isEqualTo: a+1
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:54:54'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:54:54'!
ERROR!
!verdaderoFalsoTest class methodsFor: 'value' stamp: 'JG 8/17/2023 21:55:22' prior: 50650719!
test08verdaderoSiEsVerdadero
	a := 0
	Assert that: (verdadero siEsVerdadero: [a + 1]) isEqualTo: 1
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:55:24'!
ERROR!
!verdadero class methodsFor: 'as yet unclassified' stamp: 'JG 8/17/2023 21:55:43' prior: 50650688!
siEsFalso: aClosure! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:55:52'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:55:52'!
ERROR!
!verdaderoFalsoTest class methodsFor: 'value' stamp: 'JG 8/17/2023 21:56:24' prior: 50650732!
test08verdaderoSiEsVerdadero
	a := 0
	Assert that: (verdadero siEsVerdadero: [a:= a + 1]) isEqualTo: 1
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:56:26'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:56:26'!
ERROR!
!verdaderoFalsoTest class methodsFor: 'value' stamp: 'JG 8/17/2023 21:56:55' prior: 50650712!
test08verdaderoSiEsFalso
	a := 0
	Assert that: (verdadero siEsVerdadero: [a:= a + 1]) isEqualTo: a
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:56:59'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:56:59'!
ERROR!

verdaderoFalsoTest
	collaboratorNames: ''
	in: 'verdaderoFalso'!

!classDefinition: 'verdaderoFalsoTest class' category: 'verdaderoFalso' stamp: 'JG 8/17/2023 21:57:22'!
verdaderoFalsoTest class
	instanceVariableNames: ''!

!classDefinition: #verdaderoFalsoTest category: 'verdaderoFalso' stamp: 'JG 8/17/2023 21:57:22'!
DenotativeObject subclass: #verdaderoFalsoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'verdaderoFalso'!

!classDefinition: 'verdaderoFalsoTest class' category: 'verdaderoFalso' stamp: 'JG 8/17/2023 21:57:22'!
verdaderoFalsoTest class
	instanceVariableNames: ''!
!verdaderoFalsoTest class methodsFor: 'value' stamp: 'JG 8/17/2023 21:58:57' prior: 50650765!
test08verdaderoSiEsFalso
	|aClosure n1|
	n1 := 0.
	aClosure := [n1 := 5].
	verdadero siEsFalso: aClosure .
	Assert that: n1 isEqualTo: 0
	! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'JG 8/17/2023 21:59:00'!
PASSED!

----STARTUP---- (24 August 2023 20:29:15) as /home/clinux01/Documentos/CUISUniversity/linux64/CuisUniversity-5981.image!


ObjectBuilder create: #I asChildOf: DenotativeObject collaboratorNames: '' in: 'Peano'!

!classDefinition: #I category: 'Peano' stamp: 'JGV 8/24/2023 20:29:57'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'JGV 8/24/2023 20:29:57'!
I class
	instanceVariableNames: ''!

	^self cloneNamed: self name, 'I'!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #II category: 'Peano' stamp: 'JGV 8/24/2023 20:35:22'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II class
	instanceVariableNames: ''!

!classDefinition: 'II class' category: 'Peano' stamp: 'JGV 8/24/2023 20:35:22'!
II class
	instanceVariableNames: ''!

	^self cloneNamed: self name, 'I'!

	^self cloneNamed: self name, 'I'!
!I class methodsFor: 'no messages' stamp: 'JGV 8/24/2023 20:36:02'!
next

	^self cloneNamed: self name, 'I'! !

	^self cloneNamed: self name, 'I'!

!classRemoval: #II stamp: 'JGV 8/24/2023 20:36:23'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

	^self cloneNamed: self name, 'I'!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #II category: 'Peano' stamp: 'JGV 8/24/2023 20:36:41'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II class
	instanceVariableNames: ''!

!classDefinition: 'II class' category: 'Peano' stamp: 'JGV 8/24/2023 20:36:41'!
II class
	instanceVariableNames: ''!
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 20:36:41'!
next

	^self cloneNamed: self name, 'I'! !

 II .!

 II .!

 II .!

 II .!

 II .!

 II .!

 II .!

 II .!

 II .!

 II .!

 II .!

 II .!

	^self cloneNamed: self name, 'I'!

	^self cloneNamed: self name, 'I'!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'JGV 8/24/2023 20:37:07'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: ''!

!classDefinition: 'III class' category: 'Peano' stamp: 'JGV 8/24/2023 20:37:07'!
III class
	instanceVariableNames: ''!
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 20:37:07'!
next

	^self cloneNamed: self name, 'I'! !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 20:37:49' prior: 50650380!
next

	^self cloneNamed: self name, 'I' III .! !

I
	collaboratorNames: 'nextNumber'
	in: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'JGV 8/24/2023 20:47:24'!
I class
	instanceVariableNames: 'nextNumber'!

!classDefinition: #I category: 'Peano' stamp: 'JGV 8/24/2023 20:47:24'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'JGV 8/24/2023 20:47:24'!
I class
	instanceVariableNames: 'nextNumber'!

	^nextNumber isNil ifTrue: [self cloneNamed: self name, 'I'] value ifFalse: nextNumber!

	nextNumber ifNil: [^self cloneNamed: self name, 'I'].!
!I class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 20:55:52' prior: 50650353!
next
	nextNumber ifNotNil: [nextNumber ].
	nextNumber ifNil: [^self cloneNamed: self name, 'I'].! !

!classRemoval: #II stamp: 'JGV 8/24/2023 20:56:01'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'JGV 8/24/2023 20:56:09'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!I class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 20:56:29' prior: 50650435!
next
	nextNumber ifNotNil: [nextNumber ].
	^self cloneNamed: self name, 'I'! !

	^self cloneNamed: self name, 'I'!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #II category: 'Peano' stamp: 'JGV 8/24/2023 20:56:30'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II class
	instanceVariableNames: 'nextNumber'!

!classDefinition: 'II class' category: 'Peano' stamp: 'JGV 8/24/2023 20:56:30'!
II class
	instanceVariableNames: 'nextNumber'!
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 20:56:30'!
next
	nextNumber ifNotNil: [nextNumber ].
	^self cloneNamed: self name, 'I'! !

 II .!

 II .!

 II .!

 II .!

 II .!

 II .!

 II .!

	^self cloneNamed: self name, 'I'!

I next !

!classRemoval: #I stamp: 'JGV 8/24/2023 20:57:13'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #II stamp: 'JGV 8/24/2023 20:57:43'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

ObjectBuilder create: #I asChildOf: DenotativeObject collaboratorNames: '' in: 'Peano'!

!classDefinition: #I category: 'Peano' stamp: 'JGV 8/24/2023 20:57:59'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'JGV 8/24/2023 20:57:59'!
I class
	instanceVariableNames: ''!

I
	collaboratorNames: 'next'
	in: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'JGV 8/24/2023 20:58:15'!
I class
	instanceVariableNames: 'next'!

!classDefinition: #I category: 'Peano' stamp: 'JGV 8/24/2023 20:58:15'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'JGV 8/24/2023 20:58:15'!
I class
	instanceVariableNames: 'next'!

I
	collaboratorNames: 'nextNumber'
	in: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'JGV 8/24/2023 20:59:05'!
I class
	instanceVariableNames: 'nextNumber'!

!classDefinition: #I category: 'Peano' stamp: 'JGV 8/24/2023 20:59:05'!
DenotativeObject subclass: #I
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'I class' category: 'Peano' stamp: 'JGV 8/24/2023 20:59:05'!
I class
	instanceVariableNames: 'nextNumber'!
!I class methodsFor: 'nil' stamp: 'JGV 8/24/2023 20:59:11'!
next
	nextNumber ifNotNil: [nextNumber ].
	^self cloneNamed: self name, 'I'! !
!I class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:00:17' prior: 50650537!
next
	nextNumber ifNotNil: [nextNumber ].
	nextNumber:=self cloneNamed: self name, 'I'
		^nextNumber ! !

I next !
!I class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:00:40' prior: 50650543!
next
	nextNumber ifNotNil: [nextNumber ].
	nextNumber:=self cloneNamed: self name, 'I'
	^nextNumber ! !
!I class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:00:56' prior: 50650550!
next
	nextNumber ifNotNil: [^nextNumber ].
	nextNumber:=self cloneNamed: self name, 'I'.
	^nextNumber ! !

	^nextNumber !

	^nextNumber!

	^nextNumber!

	^nextNumber!

I next !

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #II category: 'Peano' stamp: 'JGV 8/24/2023 21:01:30'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II class
	instanceVariableNames: 'nextNumber'!

!classDefinition: 'II class' category: 'Peano' stamp: 'JGV 8/24/2023 21:01:30'!
II class
	instanceVariableNames: 'nextNumber'!
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:01:30'!
next
	nextNumber ifNotNil: [^nextNumber ].
	nextNumber:=self cloneNamed: self name, 'I'.
	^nextNumber ! !

I next !

I next !

I next.!

I next!

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'JGV 8/24/2023 21:02:05'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'nextNumber'!

!classDefinition: 'III class' category: 'Peano' stamp: 'JGV 8/24/2023 21:02:05'!
III class
	instanceVariableNames: 'nextNumber'!
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:02:05'!
next
	nextNumber ifNotNil: [^nextNumber ].
	nextNumber:=self cloneNamed: self name, 'I'.
	^nextNumber ! !
!I class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:03:51' prior: 50650557!
next
	nextNumber ifNotNil: [^nextNumber ].
	nextNumber := self cloneNamed: self name, 'I'.
	^nextNumber! !
!I class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:04:15'!
+ unNumeroNatural

	^ unNumeroNatural  next! !

!classRemoval: #III stamp: 'JGV 8/24/2023 21:04:34'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #II stamp: 'JGV 8/24/2023 21:04:37'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

I next!

I next!

I next!

I next!

I next!

I next!

I next!

DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #II category: 'Peano' stamp: 'JGV 8/24/2023 21:07:03'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

II class
	instanceVariableNames: 'nextNumber'!

!classDefinition: 'II class' category: 'Peano' stamp: 'JGV 8/24/2023 21:07:03'!
II class
	instanceVariableNames: 'nextNumber'!
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:07:03'!
+ unNumeroNatural

	^ unNumeroNatural  next! !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:07:03'!
next
	nextNumber ifNotNil: [^nextNumber ].
	nextNumber := self cloneNamed: self name, 'I'.
	^nextNumber! !

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'JGV 8/24/2023 21:07:13'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'nextNumber'!

!classDefinition: 'III class' category: 'Peano' stamp: 'JGV 8/24/2023 21:07:13'!
III class
	instanceVariableNames: 'nextNumber'!
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:07:13'!
+ unNumeroNatural

	^ unNumeroNatural  next! !
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:07:13'!
next
	nextNumber ifNotNil: [^nextNumber ].
	nextNumber := self cloneNamed: self name, 'I'.
	^nextNumber! !

II +I!

II +I!

II +I!

II +I!

II +I!

II +I!

II +I!

II +I!

I+I!

I+II!

I+II!

I+III!

DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #IIII category: 'Peano' stamp: 'JGV 8/24/2023 21:08:50'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

IIII class
	instanceVariableNames: 'nextNumber'!

!classDefinition: 'IIII class' category: 'Peano' stamp: 'JGV 8/24/2023 21:08:50'!
IIII class
	instanceVariableNames: 'nextNumber'!
!IIII class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:08:50'!
+ unNumeroNatural

	^ unNumeroNatural  next! !
!IIII class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:08:50'!
next
	nextNumber ifNotNil: [^nextNumber ].
	nextNumber := self cloneNamed: self name, 'I'.
	^nextNumber! !

II+II !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:18:57' prior: 50650655!
next
	nextNumber ifNotNil: [^nextNumber ].
	nextNumber := self cloneNamed: self name, 'I'.
	nextNumber  previous: self.
	^nextNumber! !

II
	collaboratorNames: 'nextNumber, previousNumber'
	in: 'Peano'!

!classDefinition: 'II class' category: 'Peano' stamp: 'JGV 8/24/2023 21:19:40'!
II class
	instanceVariableNames: 'nextNumber previousNumber'!

!classDefinition: #II category: 'Peano' stamp: 'JGV 8/24/2023 21:19:40'!
DenotativeObject subclass: #II
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: 'II class' category: 'Peano' stamp: 'JGV 8/24/2023 21:19:40'!
II class
	instanceVariableNames: 'nextNumber previousNumber'!
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:20:28'!
previous: unNumeroNatural

	previousNumber := unNumeroNatural .
	^unNumeroNatural.! !

!classRemoval: #IIII stamp: 'JGV 8/24/2023 21:20:44'!
DenotativeObject subclass: #IIII
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classRemoval: #III stamp: 'JGV 8/24/2023 21:20:46'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:21:22'!
previous

	^previousNumber ! !

II + I !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:26:06' prior: 50650651!
+ unNumeroNatural

	^self previous + unNumeroNatural next.! !

II + I !

II + I !

II!

II + I !

II + I !

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'JGV 8/24/2023 21:27:58'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'nextNumber previousNumber'!

!classDefinition: 'III class' category: 'Peano' stamp: 'JGV 8/24/2023 21:27:58'!
III class
	instanceVariableNames: 'nextNumber previousNumber'!
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:27:58'!
+ unNumeroNatural

	^self previous + unNumeroNatural next.! !
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:27:58'!
next
	nextNumber ifNotNil: [^nextNumber ].
	nextNumber := self cloneNamed: self name, 'I'.
	nextNumber  previous: self.
	^nextNumber! !
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:27:58'!
previous

	^previousNumber ! !
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:27:58'!
previous: unNumeroNatural

	previousNumber := unNumeroNatural .
	^unNumeroNatural.! !

II + I !

!classRemoval: #III stamp: 'JGV 8/24/2023 21:28:18'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:31:56'!
- unNumeroNatural
	^ self previousNumber -unNumeroNatural previus! !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:32:11' prior: 50650813!
- unNumeroNatural
	^ self previousNumber -unNumeroNatural previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:32:30' prior: 50650819!
- unNumeroNatural
	^ self previousNumber -unNumeroNatural previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:32:38' prior: 50650825!
- unNumeroNatural
	^ self previous -unNumeroNatural previous! !

II - I!
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:44:46' prior: 50650831!
- unNumeroNatural
	^ self previous - unNumeroNatural previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:46:12' prior: 50650837!
-unNumeroNatural
	^ self previous ! !

II next!

DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

!classDefinition: #III category: 'Peano' stamp: 'JGV 8/24/2023 21:46:40'!
DenotativeObject subclass: #III
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Peano'!

III class
	instanceVariableNames: 'nextNumber previousNumber'!

!classDefinition: 'III class' category: 'Peano' stamp: 'JGV 8/24/2023 21:46:40'!
III class
	instanceVariableNames: 'nextNumber previousNumber'!
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:46:40'!
+ unNumeroNatural

	^self previous + unNumeroNatural next.! !
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:46:40'!
-unNumeroNatural
	^ self previous ! !
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:46:40'!
next
	nextNumber ifNotNil: [^nextNumber ].
	nextNumber := self cloneNamed: self name, 'I'.
	nextNumber  previous: self.
	^nextNumber! !
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:46:40'!
previous

	^previousNumber ! !
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:46:40'!
previous: unNumeroNatural

	previousNumber := unNumeroNatural .
	^unNumeroNatural.! !
!III class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:47:00' prior: 50650868!
-unNumeroNatural
	^ self previous - unNumeroNatural previous! !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:49:05' prior: 50650842!
-unNumeroNatural
	unNumeroNatural  = I ifTrue: [^self previous].
	^ self previous - unNumeroNatural previous.! !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:57:37' prior: 50650894!
-unNumeroNatural
	^unNumeroNatural restateA: self.! !
!II class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:58:24'!
restateA: unNumeroNatural

	^unNumeroNatural previous - self previous.! !
!I class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:58:52'!
restateA: unNumeroNatural

	^unNumeroNatural previous .
! !
!I class methodsFor: 'as yet unclassified' stamp: 'JGV 8/24/2023 21:58:54' prior: 50650911!
restateA: unNumeroNatural

	^unNumeroNatural previous.
! !
!I class methodsFor: '--** private fileout/in **--' stamp: 'JGV 8/24/2023 21:59:14' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	nextNumber := II.! !
!II class methodsFor: '--** private fileout/in **--' stamp: 'JGV 8/24/2023 21:59:14' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	nextNumber := III.
	previousNumber := I.! !
!III class methodsFor: '--** private fileout/in **--' stamp: 'JGV 8/24/2023 21:59:14' overrides: 50637315!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	nextNumber := nil.
	previousNumber := II.! !

!methodRemoval: I class #initializeCollaboratorsFromFile stamp: 'JGV 8/24/2023 21:59:14'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	nextNumber := II.!

!methodRemoval: II class #initializeCollaboratorsFromFile stamp: 'JGV 8/24/2023 21:59:14'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	nextNumber := III.
	previousNumber := I.!

!methodRemoval: III class #initializeCollaboratorsFromFile stamp: 'JGV 8/24/2023 21:59:14'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	nextNumber := nil.
	previousNumber := II.!

----STARTUP---- (16 November 2023 19:07:27) as /home/clinux01/Documentos/CUISUniversity/linux64/CuisUniversity-CustomerImporter.image!


----End fileIn of /home/clinux01/Documentos/CUISUniversity/linux64/CustomerImporter-1.st----!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/16/2023 19:13:44' prior: 50650629 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer  |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'jgv 11/16/2023 19:13:44'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:14:15' prior: 50650843 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/16/2023 19:14:24' prior: 50650884 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'jgv 11/16/2023 19:14:24'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:15:21'!
createRecord

	^ line findTokens: $,! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:15:21' prior: 50650917 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self createRecord.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:15:21' prior: 50650962 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self createRecord.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self createRecord.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:16:31' prior: 50650995 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := self createRecord.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self createRecord.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:16:40' prior: 50651027 overrides: 16902254!
value

	"
	self importCustomers
	"
	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData record |
			record := self createRecord.
	customerData := record.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self createRecord.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:17:21' prior: 50651059 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(line beginsWith: 'C') ifTrue: [ | customerData |
			
			customerData := record.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !

!testRun: #ImportTest #test01Import stamp: 'jgv 11/16/2023 19:17:24'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:17:46' prior: 50651092 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			
			customerData := self createRecord.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := self createRecord.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:17:21' prior: 50651128 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(line beginsWith: 'C') ifTrue: [ | customerData |
			
			customerData := record.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:18:30' prior: 50651161 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(line beginsWith: 'C') ifTrue: [ newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := record.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:18:40' prior: 50651194 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(line beginsWith: 'C') ifTrue: [ newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:20:49'!
isCustomerRecord

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:20:49' prior: 50651225 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [ newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:21:08'!
isAddressRecord

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:21:08' prior: 50651258 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [ newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:21:57' prior: 50651291 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:22:38'!
importCustomer: aCustomerRecord

	newCustomer := Customer new.
			newCustomer firstName: aCustomerRecord second.
			newCustomer lastName: aCustomerRecord third.
			newCustomer identificationType: aCustomerRecord fourth.
			newCustomer identificationNumber: aCustomerRecord fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:22:38' prior: 50651320 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			self importCustomer: record ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:22:52' prior: 50651362 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [			self importCustomer: record ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:21:57' prior: 50651384 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:24:50' prior: 50651406 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	|record|
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/16/2023 19:24:52' prior: 50651435 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'jgv 11/16/2023 19:24:52'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:25:07'!
importCustomer

	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:25:07' prior: 50651464 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			self importCustomer ].

		(self isAddressRecord) ifTrue: [ | newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:25:16'!
importAddress

	| newAddress |
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: record second.
			newAddress streetNumber: record third asNumber .
			newAddress town: record fourth.
			newAddress zipCode: record fifth asNumber .
			newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:25:16' prior: 50651512 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [ 
			self importCustomer ].

		(self isAddressRecord) ifTrue: [ self importAddress ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:26:04' prior: 50651547 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	
	[ line := readStream nextLine. ^line notNil. ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [			self importCustomer ].
		(self isAddressRecord) ifTrue: [ self importAddress ].
		line := readStream nextLine.].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:26:38' prior: 50651560 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	
	[ line := readStream nextLine. ^line notNil. ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [			self importCustomer ].
		(self isAddressRecord) ifTrue: [ self importAddress ].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:28:00' prior: 50651573 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	
	[ line := readStream nextLine. line notNil. ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [			self importCustomer ].
		(self isAddressRecord) ifTrue: [ self importAddress ].
	].

	! !

!testRun: #ImportTest #test01Import stamp: 'jgv 11/16/2023 19:28:02'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:29:21' prior: 50651585 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	
	[ line := readStream nextLine. self halt. line notNil. ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [			self importCustomer ].
		(self isAddressRecord) ifTrue: [ self importAddress ].
	].

	! !

line notNil!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:29:48' prior: 50651600 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	
	[ line := readStream nextLine. line notNil. ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [			self importCustomer ].
		(self isAddressRecord) ifTrue: [ self importAddress ].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:31:46'!
canGetNextRecord

	line := readStream nextLine. line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:31:46' prior: 50651613 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	
	[ self canGetNextRecord. ] whileTrue: [
		record := self createRecord.
		(self isCustomerRecord) ifTrue: [			self importCustomer ].
		(self isAddressRecord) ifTrue: [ self importAddress ].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:32:00'!
importRecord

	(self isCustomerRecord) ifTrue: [			self importCustomer ].
		(self isAddressRecord) ifTrue: [ self importAddress ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:32:00' prior: 50651630 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	
	[ self canGetNextRecord. ] whileTrue: [
		record := self createRecord.
		self importRecord.
	].

	! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:33:15'!
test01ImportValidDataWorksAsExpected

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #test01Import stamp: 'jgv 11/16/2023 19:33:15'!
test01Import

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:34:14'!
test02CanNotImportCustomerWithLessThanFiveFields

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:34:17' prior: 50651674!
test02CanNotImportCustomerWithLessThanFiveFields

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:35:47' prior: 50651685!
test02CanNotImportCustomerWithLessThanFiveFields

	CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez') into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 19:36:06'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:36:38' prior: 50651624!
canGetNextRecord

	line := readStream nextLine. ^line notNil.! !

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 19:36:47'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 19:36:48'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:36:48'!
ERROR!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:36:48'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:36:59' prior: 50651655!
test01ImportValidDataWorksAsExpected

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:38:35' prior: 50651696!
test02CanNotImportCustomerWithLessThanFiveFields

	| importer |
	importer := CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez') into: session.

	self
		should: [importer value]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: importer InvalidCustomerImportValues.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:39:17' prior: 50651740!
test02CanNotImportCustomerWithLessThanFiveFields

	| importer |
	importer := CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez') into: session.

	self
		should: [importer value]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: importer InvalidCustomerImportValues.
				self assert: session 
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:40:27' prior: 50651753!
test02CanNotImportCustomerWithLessThanFiveFields

	| importer |
	importer := CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez') into: session.

	self
		should: [importer value]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: importer InvalidCustomerImportValues.
				self assert: (session selectAllOfType: Customer) size equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:41:08'!
getQuantityOfCustomers

	^ (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:41:08' prior: 50651767!
test02CanNotImportCustomerWithLessThanFiveFields

	| importer |
	importer := CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez') into: session.

	self
		should: [importer value]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: importer InvalidCustomerImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'assertions' stamp: 'jgv 11/16/2023 19:41:08' prior: 50650425!
assertImportedRightNumberOfCustomers

	^ self assert: 2 equals: self getQuantityOfCustomers! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:41:14' prior: 50651787!
test02CanNotImportCustomerWithLessThanFiveFields

	| importer |
	importer := CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez') into: session.

	self
		should: [importer value]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: importer InvalidCustomerImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			].! !

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:41:16'!
ERROR!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:41:48'!
ERROR!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:42:21'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:44:00' prior: 50651808!
test02CanNotImportCustomerWithLessThanFiveFields

	

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidCustomerImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:45:12' prior: 50651640!
importRecord

	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:48:49'!
getRecordFromLine

	^ line findTokens: $,! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/16/2023 19:48:49' prior: 50651648 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	
	[ self canGetNextRecord. ] whileTrue: [
		record := self getRecordFromLine.
		self importRecord.
	].

	! !

!methodRemoval: CustomerImporter #createRecord stamp: 'jgv 11/16/2023 19:48:49'!
createRecord

	^ line findTokens: $,!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:49:02'!
createRecord

	^ record := self getRecordFromLine! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:49:02' prior: 50651861 overrides: 16902254!
value

	"
	self importCustomers
	"
	 
	 
	
	[ self canGetNextRecord. ] whileTrue: [
		self createRecord.
		self importRecord.
	].

	! !

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 19:49:05'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:49:05'!
ERROR!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:49:05'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'jgv 11/16/2023 19:49:21'!
InvalidCustomerImportValues
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'jgv 11/16/2023 19:49:49' prior: 50651896!
InvalidCustomerImportValues
	^'Customer record should have five values'! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'jgv 11/16/2023 19:49:56' prior: 50651902!
InvalidCustomerImportValues
	^'Customer record should have fields'! !

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:49:57'!
FAILURE!

!methodRemoval: CustomerImporter #importCustomer: stamp: 'jgv 11/16/2023 19:50:22'!
importCustomer: aCustomerRecord

	newCustomer := Customer new.
			newCustomer firstName: aCustomerRecord second.
			newCustomer lastName: aCustomerRecord third.
			newCustomer identificationType: aCustomerRecord fourth.
			newCustomer identificationNumber: aCustomerRecord fifth.
			session persist: newCustomer!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 19:50:29'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:50:29'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:50:29'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:52:13' prior: 50651500!
importCustomer
	
	record size < 5 ifTrue: [self error: CustomerImporter InvalidCustomerImportValues ].
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 19:52:17'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:52:17'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:52:30'!
test03CanNotImportCustomerWithMoreThanFiveFields

	

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidCustomerImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 19:52:55' prior: 50651960!
test03CanNotImportCustomerWithMoreThanFiveFields

	

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidCustomerImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 19:52:57'!
FAILURE!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 19:53:11'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 19:53:28' prior: 50651940!
importCustomer
	
	record size ~= 5 ifTrue: [self error: CustomerImporter InvalidCustomerImportValues ].
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 19:53:36'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 19:53:37'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 19:53:37'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 19:53:37'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:01:01'!
test04xxxx

	

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidCustomerImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:01:08' prior: 50652023!
test04xxxx

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'C,Pepe,Sanchez,D,22333444,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidCustomerImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:02:17' prior: 50652036!
test04xxxx

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidCustomerImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:02:43' prior: 50652049!
test04xxxx

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecord.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !

!testRun: #ImportTest #test04xxxx stamp: 'jgv 11/16/2023 20:02:51'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:03:15' prior: 50652062!
test04xxxx

	CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444,x') into: session.
	! !

!testRun: #ImportTest #test04xxxx stamp: 'jgv 11/16/2023 20:03:15'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:03:16'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:03:16'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:03:16'!
PASSED!

!testRun: #ImportTest #test04xxxx stamp: 'jgv 11/16/2023 20:03:16'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:03:28' prior: 50652077!
test04xxxx

	CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444,x') into: session.
	self assert: self getQuantityOfCustomers equals: 0.! !

!testRun: #ImportTest #test04xxxx stamp: 'jgv 11/16/2023 20:03:29'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:03:30'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:03:30'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:03:30'!
PASSED!

!testRun: #ImportTest #test04xxxx stamp: 'jgv 11/16/2023 20:03:30'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:03:52' prior: 50652099!
test04xxxx

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecord.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !

!testRun: #ImportTest #test04xxxx stamp: 'jgv 11/16/2023 20:03:54'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:04:58'!
test04CanNotImportRecordWithInvalidRecordType
	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecord.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:05:04' prior: 50652137!
test04CanNotImportRecordWithInvalidRecordType

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !

!methodRemoval: ImportTest #test04xxxx stamp: 'jgv 11/16/2023 20:05:10'!
test04xxxx

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecord.
				self assert: self getQuantityOfCustomers equals: 0.
			]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:05:42' prior: 50651848!
importRecord

	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	self error: CustomerImporter invalidRecordType.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:06:14' prior: 50652177!
importRecord

	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	self error: CustomerImporter InvalidRecordType.! !

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:06:16'!
ERROR!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:06:16'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:06:16'!
PASSED!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:06:16'!
ERROR!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:06:23'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:06:38' prior: 50652186!
importRecord

	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:07:58' prior: 50652212!
importRecord

	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	(record ~= 'C' or: [ record ~= 'A']) ifTrue: [self CustomerImporter InvalidRecordType]! !

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:08:01'!
ERROR!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:08:01'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:08:01'!
PASSED!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:08:01'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:08:16' prior: 50652220!
importRecord

	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	(record ~= 'C' and: [ record ~= 'A']) ifTrue: [self CustomerImporter InvalidRecordType]! !

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:08:17'!
ERROR!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:08:17'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:08:17'!
PASSED!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:08:17'!
ERROR!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:08:20'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:08:34' prior: 50652244!
importRecord

	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	(record ~= 'C' and: [ record ~= 'A']) ifTrue: [self error: CustomerImporter InvalidRecordType]! !

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:08:36'!
ERROR!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:08:36'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:08:36'!
PASSED!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:08:36'!
ERROR!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:08:37'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:10:22' prior: 50652271!
importRecord

	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	(self isCustomerRecord negated and: [ self isAddressRecord negated]) ifTrue: [self error: CustomerImporter InvalidRecordType]! !

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:10:23'!
ERROR!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:10:23'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:10:23'!
PASSED!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:10:23'!
ERROR!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:10:31'!
ERROR!

self isCustomerRecord!

self negated!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:11:08' prior: 50652299!
importRecord

	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	(self isCustomerRecord not and: [ self isAddressRecord not]) ifTrue: [self error: CustomerImporter InvalidRecordType]! !

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:11:10'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:11:10'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:11:10'!
PASSED!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:11:10'!
ERROR!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:11:10'!
ERROR!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:11:18'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:11:18'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:11:18'!
PASSED!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:11:18'!
ERROR!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:11:18'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'jgv 11/16/2023 20:11:23'!
InvalidRecordType
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'jgv 11/16/2023 20:12:03' prior: 50652375!
InvalidRecordType
	'Import only allows lines that stars with letter C or A'.! !

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:12:04'!
FAILURE!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'jgv 11/16/2023 20:12:31' prior: 50652380!
InvalidRecordType
	^'Import only allows lines that stars with letter C or A'.! !

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:12:32'!
FAILURE!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:13:09'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:13:09'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:13:10'!
PASSED!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:13:10'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:13:24' prior: 50652151!
test04CanNotImportRecordWithInvalidRecordType

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:13:30'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:13:31'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:13:31'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:13:31'!
PASSED!

!testRun: #ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:13:31'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:14:19'!
test0XCanNotImportRecordWithInvalidRecordType

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:14:40'!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:15:30' prior: 50652457!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: (ReadStream on: 
			'R,Pepe,Sanchez,D,22333444
			A,San Martin,3322,Olivos,1636') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:15:37' prior: 50652471!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: (ReadStream on: 
			'R,Pepe,Sanchez,D,22333444
			A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:15:40' prior: 50652486!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: (ReadStream on: 
			'R,Pepe,Sanchez,D,22333444
			A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:15:43' prior: 50652501!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: (ReadStream on: 
			'R,Pepe,Sanchez,D,22333444
			A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			].! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:17:04' prior: 50652516!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: (ReadStream on: 
			'R,Pepe,Sanchez,D,22333444
			A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter .
				self assert: self getQuantityOfCustomers equals: 0.
			].! !

!methodRemoval: ImportTest #test04CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:17:12'!
test04CanNotImportRecordWithInvalidRecordType

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:17:27' prior: 50652531!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: (ReadStream on: 
			'R,Pepe,Sanchez,D,22333444
			A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			].! !

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:17:49'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'jgv 11/16/2023 20:17:53'!
InvalidAddressImportValues
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'jgv 11/16/2023 20:18:13' prior: 50652578!
InvalidAddressImportValues
	^'Address should have five fields'! !

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:18:14'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:18:17'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:19:49' prior: 50651533!
importAddress

	| newAddress |
	
	record size < 5 ifTrue: [self error: CustomerImporter InvalidAddressImportValues ].	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:19:56'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:19:56'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:19:56'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:19:57'!
PASSED!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:19:57'!
FAILURE!

!testRun: #ImportTest #test0XCanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:19:57'!
PASSED!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:19:57'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:20:00'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:20:09' prior: 50652559!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: (ReadStream on: 
			'C,Pepe,Sanchez,D,22333444
			A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			].! !

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:20:11'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:21:32' prior: 50652640!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: 
			(ReadStream on:
				'C,Pepe,Sanchez,D,22333444
				A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			].! !

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:21:36'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:21:57'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:22:04'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:22:18'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:22:54'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:23:05'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:23:06'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:23:21'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:23:41'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:23:41'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:23:54'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:24:11'!
FAILURE!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:24:40'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:25:31' prior: 50652329!
importRecord
	self halt.
	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	(self isCustomerRecord not and: [ self isAddressRecord not]) ifTrue: [self error: CustomerImporter InvalidRecordType]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:26:48' prior: 50652659!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: 
			(ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfCustomers equals: 0.
			].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:27:49' prior: 50652721!
importRecord
	(self isCustomerRecord) ifTrue: [			self importCustomer ].
	(self isAddressRecord) ifTrue: [ self importAddress ].
	(self isCustomerRecord not and: [ self isAddressRecord not]) ifTrue: [self error: CustomerImporter InvalidRecordType]! !

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:27:55'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:31:27' prior: 50652732!
test04CanNotImportAddressWithLessThanFiveFields
	self
		should: [CustomerImporter valueFrom: 
			(ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfAddresses equals: 0.
			].! !

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:31:29'!
ERROR!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:32:07'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'jgv 11/16/2023 20:32:46'!
getQuantityOfAddresses
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'jgv 11/16/2023 20:33:05' prior: 50652783!
getQuantityOfAddresses
	^ (session selectAllOfType: Address) size! !

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:33:07'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:33:07'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:33:07'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:33:08'!
PASSED!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:33:08'!
PASSED!

!testRun: #ImportTest #test0XCanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:33:08'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:33:30'!
test04CanNotImportAddressWithMoraThanFiveFields
	self
		should: [CustomerImporter valueFrom: 
			(ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfAddresses equals: 0.
			].! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:33:32'!
test04CanNotImportAddressWithMoreThanFiveFields
	self
		should: [CustomerImporter valueFrom: 
			(ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfAddresses equals: 0.
			].! !

!methodRemoval: ImportTest #test04CanNotImportAddressWithMoraThanFiveFields stamp: 'jgv 11/16/2023 20:34:00'!
test04CanNotImportAddressWithMoraThanFiveFields
	self
		should: [CustomerImporter valueFrom: 
			(ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfAddresses equals: 0.
			].!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:34:09'!
test05CanNotImportAddressWithMoreThanFiveFields
	self
		should: [CustomerImporter valueFrom: 
			(ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfAddresses equals: 0.
			].! !

!methodRemoval: ImportTest #test04CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:34:09'!
test04CanNotImportAddressWithMoreThanFiveFields
	self
		should: [CustomerImporter valueFrom: 
			(ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfAddresses equals: 0.
			].!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:34:23' prior: 50652858!
test05CanNotImportAddressWithMoreThanFiveFields
	self
		should: [CustomerImporter valueFrom: 
			(ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidAddressImportValues.
				self assert: self getQuantityOfAddresses equals: 0.
			].! !

!testRun: #ImportTest #test05CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:34:25'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:34:42' prior: 50652597!
importAddress

	| newAddress |
	
	record size ~= 5 ifTrue: [self error: CustomerImporter InvalidAddressImportValues ].	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:38:35' prior: 50651996!
importCustomer
	
	record size ~= 6 ifTrue: [self error: CustomerImporter InvalidCustomerImportValues ].
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !

!testRun: #ImportTest #test05CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:39:54'!
FAILURE!

!testRun: #ImportTest #test05CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:40:17'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:54:18' prior: 50652923!
importCustomer
	
	record size ~= 5 ifTrue: [self error: CustomerImporter InvalidCustomerImportValues ].
	newCustomer := Customer new.
			newCustomer firstName: record second.
			newCustomer lastName: record third.
			newCustomer identificationType: record fourth.
			newCustomer identificationNumber: record fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 20:54:23' prior: 50652907!
importAddress

	| newAddress |
	
	record size ~= 6 ifTrue: [self error: CustomerImporter InvalidAddressImportValues ].	
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test05CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:54:33'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 20:54:33'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:54:33'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:54:33'!
PASSED!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 20:54:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 20:54:34'!
PASSED!

!testRun: #ImportTest #test0XCanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:54:34'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 20:54:50'!
test06CanNotImportRecordWithInvalidRecordType

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !

!methodRemoval: ImportTest #test0XCanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 20:54:50'!
test0XCanNotImportRecordWithInvalidRecordType

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'R,Pepe,Sanchez,D,22333444') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]!

!testRun: #ImportTest #test06CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 21:34:44'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 21:34:45'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 21:34:45'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 21:34:45'!
PASSED!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 21:34:45'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 21:34:46'!
PASSED!

!testRun: #ImportTest #test06CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 21:34:46'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 21:35:14' prior: 50652747!
importRecord
	(self isCustomerRecord) ifTrue: [			^self importCustomer ].
	(self isAddressRecord) ifTrue: [ ^self importAddress ].
	self error: CustomerImporter InvalidRecordType.! !

!testRun: #ImportTest #test05CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 21:35:22'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 21:35:22'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 21:35:22'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 21:35:22'!
PASSED!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 21:35:23'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 21:35:23'!
PASSED!

!testRun: #ImportTest #test06CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 21:35:23'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 21:36:15'!
test07CanNotImportRecordWithRecordTypeFieldHavingACAndSomethingMore

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'CA,Pepe,Sanchez,D,22333444') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !

!testRun: #ImportTest #test07CanNotImportRecordWithRecordTypeFieldHavingACAndSomethingMore stamp: 'jgv 11/16/2023 21:36:16'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 21:38:07' prior: 50651253!
isCustomerRecord

	^ (line beginsWith: 'C') and: [line size = 1].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 21:40:13' prior: 50653103!
isCustomerRecord

	^ record first = 'C'.! !

!testRun: #ImportTest #test07CanNotImportRecordWithRecordTypeFieldHavingACAndSomethingMore stamp: 'jgv 11/16/2023 21:40:22'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 21:40:22'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 21:40:22'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 21:40:22'!
PASSED!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 21:40:22'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 21:40:23'!
PASSED!

!testRun: #ImportTest #test06CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 21:40:23'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithRecordTypeFieldHavingACAndSomethingMore stamp: 'jgv 11/16/2023 21:40:23'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 21:40:40'!
test08CanNotImportRecordWithRecordTypeFieldHavingAnAAndSomethingMore

	self
		should: [CustomerImporter valueFrom: (ReadStream on: 'CA,Pepe,Sanchez,D,22333444') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 21:41:04' prior: 50653142!
test08CanNotImportRecordWithRecordTypeFieldHavingAnAAndSomethingMore

	self
		should: [CustomerImporter valueFrom: (ReadStream on:
'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs,x') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !

!testRun: #ImportTest #test08CanNotImportRecordWithRecordTypeFieldHavingAnAAndSomethingMore stamp: 'jgv 11/16/2023 21:41:06'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 21:41:13' prior: 50653157!
test08CanNotImportRecordWithRecordTypeFieldHavingAnAAndSomethingMore

	self
		should: [CustomerImporter valueFrom: (ReadStream on:
'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 21:41:16' prior: 50653177!
test08CanNotImportRecordWithRecordTypeFieldHavingAnAAndSomethingMore

	self
		should: [CustomerImporter valueFrom: (ReadStream on:
'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfCustomers equals: 0.
			]! !

!testRun: #ImportTest #test08CanNotImportRecordWithRecordTypeFieldHavingAnAAndSomethingMore stamp: 'jgv 11/16/2023 21:41:18'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'jgv 11/16/2023 21:41:37' prior: 50651286!
isAddressRecord

	^ record first = 'A'.! !

!testRun: #ImportTest #test08CanNotImportRecordWithRecordTypeFieldHavingAnAAndSomethingMore stamp: 'jgv 11/16/2023 21:41:47'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'jgv 11/16/2023 21:41:56' prior: 50653193!
test08CanNotImportRecordWithRecordTypeFieldHavingAnAAndSomethingMore

	self
		should: [CustomerImporter valueFrom: (ReadStream on:
'C,Pepe,Sanchez,D,22333444
AA,San Martin,3322,Olivos,1636,BsAs') into: session.]
		raise: Error
		withExceptionDo: [:anError | 
				self assert: anError messageText equals: CustomerImporter InvalidRecordType.
				self assert: self getQuantityOfAddresses equals: 0.
			]! !

!testRun: #ImportTest #test08CanNotImportRecordWithRecordTypeFieldHavingAnAAndSomethingMore stamp: 'jgv 11/16/2023 21:41:57'!
PASSED!

!testRun: #ImportTest #test01ImportValidDataWorksAsExpected stamp: 'jgv 11/16/2023 21:41:57'!
PASSED!

!testRun: #ImportTest #test02CanNotImportCustomerWithLessThanFiveFields stamp: 'jgv 11/16/2023 21:41:57'!
PASSED!

!testRun: #ImportTest #test03CanNotImportCustomerWithMoreThanFiveFields stamp: 'jgv 11/16/2023 21:41:57'!
PASSED!

!testRun: #ImportTest #test04CanNotImportAddressWithLessThanFiveFields stamp: 'jgv 11/16/2023 21:41:58'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithMoreThanFiveFields stamp: 'jgv 11/16/2023 21:41:58'!
PASSED!

!testRun: #ImportTest #test06CanNotImportRecordWithInvalidRecordType stamp: 'jgv 11/16/2023 21:41:58'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithRecordTypeFieldHavingACAndSomethingMore stamp: 'jgv 11/16/2023 21:41:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportRecordWithRecordTypeFieldHavingAnAAndSomethingMore stamp: 'jgv 11/16/2023 21:41:58'!
PASSED!

----QUIT----(16 November 2023 21:42:20) CuisUniversity-CustomerImporter.image priorSource: 10197292!

----STARTUP---- (23 November 2023 17:34:19) as /home/clinux01/Documentos/CUISUniversity/linux64/CuisUniversity-CustomerImporter.image!


----End fileIn of /home/clinux01/Documentos/CUISUniversity/linux64/CustomerImporter-3.st----!

!classRemoval: #IntegrationEnvironment stamp: 'jgv 11/23/2023 17:44:09'!
Environment subclass: #IntegrationEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #DevelopmentEnvironment stamp: 'jgv 11/23/2023 17:44:09'!
Environment subclass: #DevelopmentEnvironment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Environment stamp: 'jgv 11/23/2023 17:44:09'!
Object subclass: #Environment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #DataBaseSession stamp: 'jgv 11/23/2023 17:44:09'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id inTransaction closed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #TransientCustomerSystem stamp: 'jgv 11/23/2023 17:44:09'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #PersistentCustomerSystem stamp: 'jgv 11/23/2023 17:44:09'!
CustomerSystem subclass: #PersistentCustomerSystem
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #CustomerSystem stamp: 'jgv 11/23/2023 17:44:10'!
Object subclass: #CustomerSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #CustomerImporter stamp: 'jgv 11/23/2023 17:44:10'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'readStream newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Customer stamp: 'jgv 11/23/2023 17:44:10'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #Address stamp: 'jgv 11/23/2023 17:44:10'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #ImportTest stamp: 'jgv 11/23/2023 17:44:10'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #PersistentSet stamp: 'jgv 11/23/2023 17:44:11'!
Set subclass: #PersistentSet
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

----End fileIn of /home/clinux01/Documentos/CUISUniversity/linux64/CustomerImporter-3.st----!

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 17:49:12'!
CustomerImporter subclass: #SupplierImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 17:48:52'!
test01
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !

	^self environmentVariable = self identifier!

	Smalltalk at: self environmentKey put: self identifier!

	Smalltalk at: self environmentKey put: self identifier!

	Smalltalk at: self environmentKey put: self identifier!

	^ Smalltalk at: self environmentKey!

	Smalltalk at: self environmentKey put: self identifier!

	Smalltalk at: self environmentKey put: self identifier!

	^ #DEV!

Environment current !

	^self environmentVariable = self identifier!

	^ Smalltalk at: self environmentKey!

DevelopmentEnvironment makeCurrent!

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:00:00'!
ERROR!

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:00:41'!
ERROR!

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:00:47'!
ERROR!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 18:00:56' overrides: 50654965!
importRecord
	self shouldBeImplemented.! !

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:18:53'!
CustomerImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:19:05'!
Customer subclass: #Supplier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 18:18:47' prior: 50655513 overrides: 50654965!
importRecord
	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system add: newSupplier.! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:19:12'!
ERROR!
!Supplier methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 18:19:26'!
name: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:19:48'!
Customer subclass: #Supplier
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Supplier methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 18:19:44' prior: 50655546!
name: aName 
	name := aName.! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:19:50'!
ERROR!
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:20:13'!
numberOfSuppliers
	self shouldBeImplemented.! !

!classDefinition: #TransientCustomerSystem category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:20:49'!
CustomerSystem subclass: #TransientCustomerSystem
	instanceVariableNames: 'customers suppliers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:20:47' prior: 50655564!
numberOfSuppliers
	suppliers size.! !

Set new!

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:21:45'!
ERROR!
!TransientCustomerSystem methodsFor: 'system lifecycle' stamp: 'jgv 11/23/2023 18:22:18' prior: 50655129 overrides: 50655050!
start

	customers := OrderedCollection new.
	suppliers := OrderedCollection new.! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:22:32'!
FAILURE!
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:22:49' prior: 50655578!
numberOfSuppliers
	^suppliers size.! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:22:57'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:22:57'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:22:57'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:22:57'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:22:57'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:22:57'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:22:57'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:22:57'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:22:57'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:22:57'!
PASSED!

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:22:57'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 18:23:42' prior: 50655534 overrides: 50654965!
importRecord
	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:23:50'!
ERROR!
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:23:54'!
addSupplier: aNewSupplier 
	self shouldBeImplemented.! !
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:24:05' prior: 50655649!
addSupplier: aNewSupplier 
	suppliers add: aNewSupplier.! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:24:06'!
ERROR!
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:24:22'!
supplierWithIdentificationType: aRenameMe1 number: aRenameMe2 
	self shouldBeImplemented.! !
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:24:33' prior: 50655661!
supplierWithIdentificationType: anIdentificationType number: aRenameMe2 
	self shouldBeImplemented.! !
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:24:45' prior: 50655667!
supplierWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	self shouldBeImplemented.! !
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:25:24' prior: 50655674!
supplierWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	! !
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:25:47' prior: 50655681!
supplierWithIdentificationType: anIdentificationType number: anIdentificationNumber 
		^customers detect: [ :aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]]! !
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:25:52' prior: 50655687!
supplierWithIdentificationType: anIdentificationType number: anIdentificationNumber 
		^customers detect: [ :aSupplier | aSupplier identificationType = anIdentificationType and: [ aSupplier identificationNumber = anIdentificationNumber ]]! !
!TransientCustomerSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 18:25:59' prior: 50655698!
supplierWithIdentificationType: anIdentificationType number: anIdentificationNumber 
		^suppliers detect: [ :aSupplier | aSupplier identificationType = anIdentificationType and: [ aSupplier identificationNumber = anIdentificationNumber ]]! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:26:00'!
ERROR!
!Supplier methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:26:11'!
isNamed: aRenameMe1 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:26:42' prior: 50655722!
isNamed: aName 
	^name = aName.! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:26:43'!
ERROR!
!Supplier methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:26:56'!
isIdentifiedAs: aRenameMe1 withNumber: aRenameMe2 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:27:04' prior: 50655733!
isIdentifiedAs: anIdentificationType withNumber: aRenameMe2 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:27:13' prior: 50655739!
isIdentifiedAs: anIdentificationType withNumber: anIndentificationNumber 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:27:48' prior: 50655745!
isIdentifiedAs: anIdentificationType withNumber: anIndentificationNumber 
	^identificationType = anIdentificationType and: [identificationNumber = anIndentificationNumber ].! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:27:50'!
ERROR!
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 18:28:23'!
isCustomersEmpty
	self shouldBeImplemented.! !

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:28:33'!
Customer subclass: #Supplier
	instanceVariableNames: 'name customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 18:28:31' prior: 50655762!
isCustomersEmpty
	^customers isEmpty.! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:28:36'!
ERROR!
!Supplier methodsFor: 'initialization' stamp: 'jgv 11/23/2023 18:30:28' overrides: 50654860!
initialize
	super initialize.
	customers := OrderedCollection new.! !

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:30:43'!
FAILURE!

!testRun: #ImportTest #test01 stamp: 'jgv 11/23/2023 18:30:53'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:30:53'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:30:53'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:30:53'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:30:53'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:30:53'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:30:53'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:30:53'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:30:53'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:30:53'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 18:31:18'!
test01ValidSupplierDataIsImportedCorrectly
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !

!methodRemoval: ImportTest #test01 stamp: 'jgv 11/23/2023 18:31:22'!
test01
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 18:31:29' prior: 50655823!
test01ValidSupplierDataIsImportedCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:35:58'!
Object subclass: #CSVImporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:35:58'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'readStream newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CSVImporter class methodsFor: 'importing' stamp: 'jgv 11/23/2023 18:36:38'!
valueFrom: aReadStream into: aCustomerSystem

	^(self from: aReadStream into: aCustomerSystem) value! !

!methodRemoval: CustomerImporter class #valueFrom:into: stamp: 'jgv 11/23/2023 18:36:38'!
valueFrom: aReadStream into: aCustomerSystem

	^(self from: aReadStream into: aCustomerSystem) value!
!CSVImporter class methodsFor: 'instance creation' stamp: 'jgv 11/23/2023 18:37:15'!
from: aReadStream into: aCustomerSystem

	^self new initializeFrom: aReadStream into: aCustomerSystem! !

!methodRemoval: CustomerImporter class #from:into: stamp: 'jgv 11/23/2023 18:37:15'!
from: aReadStream into: aCustomerSystem

	^self new initializeFrom: aReadStream into: aCustomerSystem!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:37:51'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer line record system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:37:51'!
Object subclass: #CSVImporter
	instanceVariableNames: 'readStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:37:51'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:37:51'!
Object subclass: #CSVImporter
	instanceVariableNames: 'readStream system'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CSVImporter methodsFor: 'initialization' stamp: 'jgv 11/23/2023 18:37:51'!
initializeFrom: aReadStream into: aCustomerSystem

	readStream := aReadStream.
	system := aCustomerSystem ! !

!methodRemoval: CustomerImporter #initializeFrom:into: stamp: 'jgv 11/23/2023 18:37:51'!
initializeFrom: aReadStream into: aCustomerSystem

	readStream := aReadStream.
	system := aCustomerSystem !
!CSVImporter methodsFor: 'evaluating' stamp: 'jgv 11/23/2023 18:38:51' overrides: 16902254!
value

	[ self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord ].

	! !

!methodRemoval: CustomerImporter #value stamp: 'jgv 11/23/2023 18:38:51'!
value

	[ self hasLineToImport ] whileTrue: [
		self createRecord.
		self importRecord ].

	!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:39:32'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:39:32'!
Object subclass: #CSVImporter
	instanceVariableNames: 'readStream system line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:39:33'!
CSVImporter subclass: #CustomerImporter
	instanceVariableNames: 'newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #CSVImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:39:33'!
Object subclass: #CSVImporter
	instanceVariableNames: 'readStream system line record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CSVImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 18:39:33'!
createRecord

	^ record := line findTokens: $,! !

!methodRemoval: CustomerImporter #createRecord stamp: 'jgv 11/23/2023 18:39:33'!
createRecord

	^ record := line findTokens: $,!
!CSVImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 18:39:39'!
hasLineToImport

	line := readStream nextLine.
	^line notNil! !

!methodRemoval: CustomerImporter #hasLineToImport stamp: 'jgv 11/23/2023 18:39:39'!
hasLineToImport

	line := readStream nextLine.
	^line notNil!
!CSVImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 18:39:47'!
assertRecordNotEmpty

	record isEmpty ifTrue: [ self error: self class invalidRecordTypeErrorDescription ]! !

!methodRemoval: CustomerImporter #assertRecordNotEmpty stamp: 'jgv 11/23/2023 18:39:47'!
assertRecordNotEmpty

	record isEmpty ifTrue: [ self error: self class invalidRecordTypeErrorDescription ]!
!CSVImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 18:40:01'!
importRecord

	self subclassResponsibility! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:40:22'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:40:22'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:40:22'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:40:22'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:40:22'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:40:22'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:40:22'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:40:22'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:40:22'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:40:22'!
PASSED!

CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:40:49'!
CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:40:52'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:40:52'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:40:52'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:40:52'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:40:52'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:40:52'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:40:52'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:40:52'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:40:52'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:40:52'!
PASSED!

!classRenamed: #CustomerSystem as: #ERPSystem stamp: 'jgv 11/23/2023 18:41:27'!
Smalltalk renameClassNamed: #CustomerSystem as: #ERPSystem!

!classRenamed: #PersistentCustomerSystem as: #PersistentERPSystem stamp: 'jgv 11/23/2023 18:41:45'!
Smalltalk renameClassNamed: #PersistentCustomerSystem as: #PersistentERPSystem!
!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 18:41:45' prior: 50655436 overrides: 50655334!
createCustomerSystem

	^PersistentERPSystem new! !

!classRenamed: #TransientCustomerSystem as: #TransientERPSystem stamp: 'jgv 11/23/2023 18:42:05'!
Smalltalk renameClassNamed: #TransientCustomerSystem as: #TransientERPSystem!
!DevelopmentEnvironment methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 18:42:05' prior: 50655398 overrides: 50655334!
createCustomerSystem

	^TransientERPSystem new! !
!Environment methodsFor: 'customer system' stamp: 'jgv 11/23/2023 18:43:45'!
createERPSystem

	self subclassResponsibility ! !
!DevelopmentEnvironment methodsFor: 'customer system' stamp: 'jgv 11/23/2023 18:43:45' overrides: 50656152!
createERPSystem

	^TransientERPSystem new! !
!IntegrationEnvironment methodsFor: 'customer system' stamp: 'jgv 11/23/2023 18:43:45' overrides: 50656152!
createERPSystem

	^PersistentERPSystem new! !

!methodRemoval: Environment #createCustomerSystem stamp: 'jgv 11/23/2023 18:43:45'!
createCustomerSystem

	self subclassResponsibility !

!methodRemoval: DevelopmentEnvironment #createCustomerSystem stamp: 'jgv 11/23/2023 18:43:45'!
createCustomerSystem

	^TransientERPSystem new!

!methodRemoval: IntegrationEnvironment #createCustomerSystem stamp: 'jgv 11/23/2023 18:43:45'!
createCustomerSystem

	^PersistentERPSystem new!
!ImportTest methodsFor: 'setUp/tearDown' stamp: 'jgv 11/23/2023 18:44:17' prior: 50654679 overrides: 16961394!
setUp

	system := Environment current createERPSystem.
	system start.
	system beginTransaction.
! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:44:19'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:44:20'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:44:24'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:44:24'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:44:24'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:44:24'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:44:24'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:44:24'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:44:24'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:44:24'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:44:24'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:44:24'!
PASSED!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:44:48'!
Object subclass: #Party
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:44:48'!
Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:52:07'!
Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:52:07'!
Object subclass: #Party
	instanceVariableNames: 'identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Party methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:52:07'!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber! !

!methodRemoval: Customer #identificationNumber: stamp: 'jgv 11/23/2023 18:52:07'!
identificationNumber: anIdentificationNumber

	identificationNumber := anIdentificationNumber!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:52:17'!
Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:52:17'!
Object subclass: #Party
	instanceVariableNames: 'identificationNumber identificationType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Party methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:52:17'!
identificationType: anIdentificationType

	identificationType := anIdentificationType! !

!methodRemoval: Customer #identificationType: stamp: 'jgv 11/23/2023 18:52:17'!
identificationType: anIdentificationType

	identificationType := anIdentificationType!
!Customer methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:52:28'!
isIdentifiedAs: anIdentificationType withNumber: anIndentificationNumber 
	^identificationType = anIdentificationType and: [identificationNumber = anIndentificationNumber ].! !

!methodRemoval: Supplier #isIdentifiedAs:withNumber: stamp: 'jgv 11/23/2023 18:52:28'!
isIdentifiedAs: anIdentificationType withNumber: anIndentificationNumber 
	^identificationType = anIdentificationType and: [identificationNumber = anIndentificationNumber ].!
!Party methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:53:00'!
isIdentifiedAs: anIdentificationType withNumber: anIndentificationNumber 
	^identificationType = anIdentificationType and: [identificationNumber = anIndentificationNumber ].! !

!methodRemoval: Customer #isIdentifiedAs:withNumber: stamp: 'jgv 11/23/2023 18:53:00'!
isIdentifiedAs: anIdentificationType withNumber: anIndentificationNumber 
	^identificationType = anIdentificationType and: [identificationNumber = anIndentificationNumber ].!

Party subclass: #Supplier
	instanceVariableNames: 'name customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Supplier category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:53:09'!
Party subclass: #Supplier
	instanceVariableNames: 'name customers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:53:12'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:53:12'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:53:12'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:53:12'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:53:12'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:53:12'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:53:12'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:53:12'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:53:12'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:53:12'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:53:12'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:53:33'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:53:33'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:53:33'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:53:33'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:53:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:53:33'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:53:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:53:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:53:33'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:53:33'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:53:33'!
ERROR!
!Party methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:53:47'!
identificationNumber

	^identificationNumber ! !

!methodRemoval: Customer #identificationNumber stamp: 'jgv 11/23/2023 18:53:47'!
identificationNumber

	^identificationNumber !
!Party methodsFor: 'identification' stamp: 'jgv 11/23/2023 18:53:51'!
identificationType

	^identificationType ! !

!methodRemoval: Customer #identificationType stamp: 'jgv 11/23/2023 18:53:51'!
identificationType

	^identificationType !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:53:59'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:53:59'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:53:59'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:53:59'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:53:59'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:53:59'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:53:59'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:53:59'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:53:59'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:53:59'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:53:59'!
ERROR!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:55:24'!
Party subclass: #Customer
	instanceVariableNames: 'id firstName lastName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Party category: 'CustomerImporter' stamp: 'jgv 11/23/2023 18:55:24'!
Object subclass: #Party
	instanceVariableNames: 'identificationNumber identificationType addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Party methodsFor: 'addresses' stamp: 'jgv 11/23/2023 18:55:24'!
addAddress: anAddress

	addresses add: anAddress ! !

!methodRemoval: Customer #addAddress: stamp: 'jgv 11/23/2023 18:55:24'!
addAddress: anAddress

	addresses add: anAddress !
!Party methodsFor: 'addresses' stamp: 'jgv 11/23/2023 18:55:29'!
addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock ! !

!methodRemoval: Customer #addressAt:ifNone: stamp: 'jgv 11/23/2023 18:55:29'!
addressAt: aStreetName ifNone: aNoneBlock

	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock !
!Party methodsFor: 'addresses' stamp: 'jgv 11/23/2023 18:55:32'!
addresses

	^ addresses! !

!methodRemoval: Customer #addresses stamp: 'jgv 11/23/2023 18:55:32'!
addresses

	^ addresses!
!Party methodsFor: 'addresses' stamp: 'jgv 11/23/2023 18:55:35'!
isAddressesEmpty

	^addresses isEmpty ! !

!methodRemoval: Customer #isAddressesEmpty stamp: 'jgv 11/23/2023 18:55:35'!
isAddressesEmpty

	^addresses isEmpty !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:55:40'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:55:40'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:55:40'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:55:40'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:55:40'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:55:40'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:55:40'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:55:40'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:55:40'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:55:40'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:55:40'!
ERROR!
!Party methodsFor: 'initialization' stamp: 'jgv 11/23/2023 18:56:32' overrides: 16920235!
initialize

	super initialize.
	addresses := OrderedCollection new.! !

!methodRemoval: Customer #initialize stamp: 'jgv 11/23/2023 18:56:32'!
initialize

	super initialize.
	addresses := OrderedCollection new.!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 18:56:45'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 18:56:45'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:05:44'!
test02DoesNotImportRecordsStartingWithSButMoreCharacters


	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:06:15' prior: 50656678!
test02DoesNotImportRecordsStartingWithSButMoreCharacters
	| stream |
	stream := ReadStream on: 'NC,Pepe,Sanchez,D,22333444'
	
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:06:44' prior: 50656683!
test02DoesNotImportRecordsStartingWithSButMoreCharacters
	| stream |
	stream := ReadStream on: 'Supplier,Supplier1,D,123'
	
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:09:02' prior: 50656690!
test02DoesNotImportRecordsStartingWithSButMoreCharacters
	| stream |
	stream := ReadStream on: 'Supplier,Supplier1,D,123'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 19:09:04'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:09:45' prior: 50655637 overrides: 50656036!
importRecord

	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:10:52' prior: 50656717 overrides: 50656036!
importRecord
	
	record first = 'S' ifFalse: [].

	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:12:31' prior: 50654965 overrides: 50656036!
importRecord

	self assertRecordNotEmpty.
	
	self halt.
	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].

	self error: self class invalidRecordTypeErrorDescription! !

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:12:35'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 19:12:35'!
FAILURE!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 19:12:35'!
PASSED!

record first!

record first!
!CustomerImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:13:38' prior: 50656740 overrides: 50656036!
importRecord

	self assertRecordNotEmpty.
	
	self isCustomerRecord ifTrue: [ ^self importCustomer ].
	self isAddressRecord ifTrue: [ ^self importAddress ].

	self error: self class invalidRecordTypeErrorDescription! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:14:25' prior: 50656728 overrides: 50656036!
importRecord
	
	record first = 'S' ifFalse: [SupplierImporter invalidRecordTypeErrorDescription].

	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:14:28' prior: 50656774 overrides: 50656036!
importRecord
	
	record first = 'S' ifFalse: [SupplierImporter invalidRecordTypeErrorDescription].

	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:14:44'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:14:44'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 19:14:44'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 19:14:44'!
ERROR!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 19:14:44'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 19:14:44'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 19:14:44'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 19:14:44'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 19:14:44'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 19:14:44'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 19:14:44'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 19:14:44'!
ERROR!
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 19:15:10'!
invalidRecordTypeErrorDescription
	self shouldBeImplemented.! !
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 19:15:28' prior: 50656844!
invalidRecordTypeErrorDescription
	^'Invalid record type'.! !

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 19:15:29'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:16:05' prior: 50656788 overrides: 50656036!
importRecord
	
	record first = 'S' ifFalse: [self error: SupplierImporter invalidRecordTypeErrorDescription].

	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 19:16:10'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:18:53'!
test03CanNotImportSupplierRecordWithLessThanFiveFields
	| stream |
	stream := ReadStream on: 'Supplier,Supplier1,D,123'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:19:11'!
test03CanNotImportSupplierRecordWithLessThanFourFields
	| stream |
	stream := ReadStream on: 'Supplier,Supplier1,D,123'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !

!methodRemoval: ImportTest #test03CanNotImportSupplierRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 19:19:11'!
test03CanNotImportSupplierRecordWithLessThanFiveFields
	| stream |
	stream := ReadStream on: 'Supplier,Supplier1,D,123'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:19:51' prior: 50656927!
test03CanNotImportSupplierRecordWithLessThanFourFields
	| stream |
	stream := ReadStream on: 'Supplier,Supplier1,D,123'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:20:02' prior: 50656958!
test03CanNotImportSupplierRecordWithLessThanFourFields
	| stream |
	stream := ReadStream on: 'Supplier,Supplier1'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:20:04' prior: 50656974!
test03CanNotImportSupplierRecordWithLessThanFourFields
	| stream |
	stream := ReadStream on: 'Supplier,Supplier1'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 19:20:05'!
ERROR!
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 19:20:15'!
invalidSupplierRecordErrorDescription
	self shouldBeImplemented.! !
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 19:20:41' prior: 50657008!
invalidSupplierRecordErrorDescription
	^'Invalid Supplier record'! !

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 19:20:42'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:21:06' prior: 50656989!
test03CanNotImportSupplierRecordWithLessThanFourFields
	| stream |
	stream := ReadStream on: 'S,Supplier1'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 19:21:07'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:22:21' prior: 50656860 overrides: 50656036!
importRecord
	
	record first = 'S' ifFalse: [self error: SupplierImporter invalidRecordTypeErrorDescription].
	
	record size < 4 ifTrue: [self error: SupplierImporter invalidSupplierRecordErrorDescription]. 
	
	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:22:27' prior: 50657043 overrides: 50656036!
importRecord
	
	record first = 'S' ifFalse: [self error: SupplierImporter invalidRecordTypeErrorDescription].
	record size < 4 ifTrue: [self error: SupplierImporter invalidSupplierRecordErrorDescription]. 
	
	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 19:22:32'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:23:24' prior: 50657060 overrides: 50656036!
importRecord
	
	record first = 'S' ifFalse: [self error: SupplierImporter invalidRecordTypeErrorDescription].
	self halt.
	record size < 4 ifTrue: [self error: SupplierImporter invalidSupplierRecordErrorDescription]. 
	
	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 19:23:31'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:23:35' prior: 50657081 overrides: 50656036!
importRecord
	
	record first = 'S' ifFalse: [self error: SupplierImporter invalidRecordTypeErrorDescription].
	self halt.	
	record size < 4 ifTrue: [self error: SupplierImporter invalidSupplierRecordErrorDescription]. 
	
	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 19:23:41'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:23:50' prior: 50657102 overrides: 50656036!
importRecord
	
	record first = 'S' ifFalse: [self error: SupplierImporter invalidRecordTypeErrorDescription].
	record size < 4 ifTrue: [self error: SupplierImporter invalidSupplierRecordErrorDescription]. 
	
	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 19:24:14'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:24:37'!
test04CanNotImportSupplierRecordWithMoreThanFourFields
	| stream |
	stream := ReadStream on: 'S,Supplier1'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:24:53' prior: 50657182!
test04CanNotImportSupplierRecordWithMoreThanFourFields
	| stream |
	stream := ReadStream on: 'S,Supplier1,D,123,Fravega'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 19:24:54'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 19:25:07' prior: 50657123 overrides: 50656036!
importRecord
	
	record first = 'S' ifFalse: [self error: SupplierImporter invalidRecordTypeErrorDescription].
	record size ~= 4 ifTrue: [self error: SupplierImporter invalidSupplierRecordErrorDescription]. 
	
	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 19:25:10'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:25:56'!
test01ValidSupplierWithCustomerDataIsImportedCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:26:13'!
test01ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:26:33' prior: 50657298!
test01ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.
	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:26:38' prior: 50657317!
test01ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !

!methodRemoval: ImportTest #test01ValidSupplierWithCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:27:19'!
test01ValidSupplierWithCustomerDataIsImportedCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123'.
	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:27:27'!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !

!methodRemoval: ImportTest #test01ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:27:27'!
test01ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:52:21' prior: 50657376!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	customer := system customerWithIdentificationType:  'D' number: '22333444'. ! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:56:23' prior: 50657416!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	customer := system customerWithIdentificationType:  'D' number: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:57:12' prior: 50657429!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:57:20' prior: 50657444!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444'.
	
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:58:47' prior: 50657459!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444'.
	
	self assert: customer firstName equals: 'Pepe'.
	
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 19:59:49' prior: 50657474!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444'.
	
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer secondName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	
	! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 19:59:51'!
ERROR!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 20:02:11' prior: 50657217 overrides: 50656036!
importRecord
	
	(record first = 'S') ifTrue: [
			record size ~= 4 ifTrue: [self error: SupplierImporter invalidSupplierRecordErrorDescription]. 
	
			newSupplier := Supplier new.
			newSupplier name: record second.
			newSupplier identificationType: record third.
			newSupplier identificationNumber: record fourth.
			system addSupplier: newSupplier.
		].
	(record first = 'NC') ifTrue: [
			
		].
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 20:02:33'!
importSupplier

	record size ~= 4 ifTrue: [self error: SupplierImporter invalidSupplierRecordErrorDescription]. 
	
			newSupplier := Supplier new.
			newSupplier name: record second.
			newSupplier identificationType: record third.
			newSupplier identificationNumber: record fourth.
			system addSupplier: newSupplier! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 20:02:33' prior: 50657518 overrides: 50656036!
importRecord
	
	(record first = 'S') ifTrue: [
			self importSupplier.
		].
	(record first = 'NC') ifTrue: [
			
		].
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 20:02:39' prior: 50657550 overrides: 50656036!
importRecord
	
	(record first = 'S') ifTrue: [
			^self importSupplier.
		].
	(record first = 'NC') ifTrue: [
			
		].
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'jgv 11/23/2023 20:03:38'!
CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:03:36'!
importCustomer

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system add: newCustomer.! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:03:45' prior: 50657577!
importCustomer
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system add: newCustomer.! !
!ERPSystem methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:04:53'!
addCustomers: aCustomer

	self subclassResponsibility ! !
!PersistentERPSystem methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:04:53' overrides: 50657598!
addCustomers: aCustomer

	^session persist: aCustomer ! !
!TransientERPSystem methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:04:53' overrides: 50657598!
addCustomers: aCustomer

	customers add: aCustomer ! !
!TransientERPSystem methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:04:53' prior: 50655654!
addSupplier: aNewSupplier 
	suppliers addCustomers: aNewSupplier.! !
!Party methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:04:53' prior: 50656559!
addAddress: anAddress

	addresses addCustomers: anAddress ! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:04:53' prior: 50654900!
importCustomer

	self assertValidCustomerRecord.

	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer! !
!PersistentSet methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:04:53' prior: 50654448 overrides: 16935667!
add: newObject

	super addCustomers: newObject.
	session persist: newObject.
	
	^newObject! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:04:53' prior: 50657588!
importCustomer
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.! !
!DataBaseSession methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:04:53' prior: 50655283!
persist: anObject

	| table |

	self assertCanUseDatabase.
	self assertTypeIsPersisted: anObject class.
	self delay.
	
	table := self tableOfType: anObject class.
	self defineIdOf: anObject.
	table addCustomers: anObject.
	self persistRelationsOf: anObject.
! !
!TransientERPSystem methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:04:53' prior: 50655147 overrides: 50655028!
add: aCustomer

	customers addCustomers: aCustomer ! !
!TransientERPSystem methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:04:53' prior: 50657608 overrides: 50657598!
addCustomers: aCustomer

	customers addCustomers: aCustomer ! !

!methodRemoval: ERPSystem #add: stamp: 'jgv 11/23/2023 20:04:53'!
add: aCustomer

	self subclassResponsibility !

!methodRemoval: PersistentERPSystem #add: stamp: 'jgv 11/23/2023 20:04:53'!
add: aCustomer

	^session persist: aCustomer !

!methodRemoval: TransientERPSystem #add: stamp: 'jgv 11/23/2023 20:04:53'!
add: aCustomer

	customers addCustomers: aCustomer !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:05:23'!
ERROR!
!TransientERPSystem methodsFor: 'suppliers' stamp: 'jgv 11/23/2023 20:05:56' prior: 50657613!
addSupplier: aNewSupplier 
	suppliers add: aNewSupplier.! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:05:59'!
ERROR!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 20:06:18' prior: 50657560 overrides: 50656036!
importRecord
	
	(record first = 'S') ifTrue: [
			^self importSupplier.
		].
	(record first = 'NC') ifTrue: [
			^self importCustomer.
		].
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:06:21'!
ERROR!
!TransientERPSystem methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:06:29' prior: 50657675 overrides: 50657598!
addCustomers: aCustomer

	customers add: aCustomer ! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:06:30'!
ERROR!
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:06:44'!
customerWithIdentificationType: aRenameMe1 number: aRenameMe2 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:07:25' prior: 50657728!
customerWithIdentificationType: aRenameMe1 number: aRenameMe2 
	customers find: [:aCustomer | aCustomer identificationType = aRenameMe1 ]! !
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:07:32' prior: 50657734!
customerWithIdentificationType: anIdentificationType number: aRenameMe2 
	customers find: [:aCustomer | aCustomer identificationType = anIdentificationType ]! !
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:07:39' prior: 50657742!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	customers find: [:aCustomer | aCustomer identificationType = anIdentificationType ]! !
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:07:59' prior: 50657750!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	customers find: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]].! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:08:01'!
ERROR!
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:08:13' prior: 50657759!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	^customers find: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]].! !
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:08:23' prior: 50657773!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	^customers find: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]].! !
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:11:01' prior: 50657784!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	^customers detect: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]] ifNone: [self error].! !
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:11:06' prior: 50657795!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	^customers detect: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]] ifNone: [self fail].! !
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:12:57'!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber ifNone: aNoneBlock  
	^customers detect: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]] ifNone: [self fail].! !

!methodRemoval: Supplier #customerWithIdentificationType:number: stamp: 'jgv 11/23/2023 20:12:57'!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	^customers detect: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]] ifNone: [self fail].!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:13:08'!
ERROR!
!Supplier methodsFor: 'nil' stamp: 'jgv 11/23/2023 20:13:38'!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	^customers detect: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]] ifNone: [^nil].! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:13:39'!
ERROR!
!Supplier methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:15:14' prior: 50657817!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber ifNone: aNoneBlock  
	^customers detect: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]] ifNone: [^nil].! !

!methodRemoval: Supplier #customerWithIdentificationType:number: stamp: 'jgv 11/23/2023 20:15:14'!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber 
	^customers detect: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]] ifNone: [^nil].!
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:15:29' prior: 50657858!
customerWithIdentificationType: anIdentificationType number: anIdentificationNumber ifNone: aNoneBlock  
	^customers detect: [:aCustomer | aCustomer identificationType = anIdentificationType and: [ aCustomer identificationNumber = anIdentificationNumber ]] ifNone: aNoneBlock.! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:15:32'!
ERROR!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:16:17' prior: 50657491!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer secondName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	
	! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:16:19'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:19:11' prior: 50657644!
importCustomer
	newCustomer := Customer new.
	newSupplier addCustomer: newCustomer.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:19:17'!
ERROR!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:19:17'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:19:21'!
ERROR!
!Party methodsFor: 'addresses' stamp: 'jgv 11/23/2023 20:19:32' prior: 50657618!
addAddress: anAddress

	addresses add: anAddress ! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:19:32'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:19:34'!
ERROR!
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:19:43'!
addCustomer: aNewCustomer 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'customers' stamp: 'jgv 11/23/2023 20:19:50' prior: 50658000!
addCustomer: aNewCustomer 
	customers add: aNewCustomer.! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:19:52'!
ERROR!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:20:01' prior: 50657897!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	
	! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:20:02'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:20:04'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:20:56' prior: 50658014!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:21:56' prior: 50658091!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:21:58'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:22:32'!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| stream |
	stream := ReadStream on: 'Supplier,Supplier1,D,123'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:22:42' prior: 50658191!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| stream |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:22:48'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:23:31' prior: 50658207!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| stream |
	stream := ReadStream on: 'S,Supplier1,D,123
NewCustomer,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:23:35' prior: 50658227!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| stream |
	stream := ReadStream on: 'S,Supplier1,D,123
NCustomer,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:23:37'!
FAILURE!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:23:49'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:23:58' prior: 50658243!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| stream |
	stream := ReadStream on: 'S,Supplier1,D,123
NCustomer,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfCustomers equals: 0.
		]! !

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:24:00'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:24:08' prior: 50658267!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| stream |
	stream := ReadStream on: 'S,Supplier1,D,123
NCustomer,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfCustomers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:25:39' prior: 50658342!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NCustomer,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:25:49' prior: 50658358!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NCustomer,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:25:50'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:29:00'!
test07CanNotImportNewCustomerRecordWithLessThanFiveFields
	| stream |
	stream := ReadStream on: 'S,Supplier1'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:29:10' prior: 50658460!
test07CanNotImportNewCustomerRecordWithLessThanFiveFields
	| stream |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:29:16' prior: 50658475!
test07CanNotImportNewCustomerRecordWithLessThanFiveFields
	| stream |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:29:18'!
ERROR!
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 20:29:22'!
invalidCustomerRecordErrorDescription
	self shouldBeImplemented.! !
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 20:29:30' prior: 50658511!
invalidCustomerRecordErrorDescription
	^'invalid customer record.'! !
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 20:29:32' prior: 50658517!
invalidCustomerRecordErrorDescription
	^'invalid customer record'.! !

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:29:33'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:30:16' prior: 50657923!
importCustomer
	
	record size < 5 ifTrue: [self error: SupplierImporter invalidCustomerRecordErrorDescription ].

	newCustomer := Customer new.
	newSupplier addCustomer: newCustomer.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:30:20'!
FAILURE!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:30:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:30:20'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:31:03' prior: 50658491!
test07CanNotImportNewCustomerRecordWithLessThanFiveFields
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:31:06'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:31:16'!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:31:33' prior: 50658693!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:31:49' prior: 50658714!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez, D, 122333444, Alias: Pepoide'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:31:51'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:32:12' prior: 50658532!
importCustomer
	
	record size ~= 5 ifTrue: [self error: SupplierImporter invalidCustomerRecordErrorDescription ].

	newCustomer := Customer new.
	newSupplier addCustomer: newCustomer.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.! !

----SNAPSHOT----(23 November 2023 20:32:23) CuisUniversity-CustomerImporter.image priorSource: 10291848!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:36:29'!
test08CanNotImportNewCustomerWithoutSupplier
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez, D, 122333444, Alias: Pepoide'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:37:13' prior: 50658781!
test08CanNotImportNewCustomerWithoutSupplier
	| stream supplier |
	stream := ReadStream on: 'NC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportNewCustomerWithoutSupplier.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !

!testRun: #ImportTest #test08CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 20:37:20'!
ERROR!
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 20:37:24'!
cannotImportNewCustomerWithoutSupplier
	self shouldBeImplemented.! !
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 20:37:41' prior: 50658827!
cannotImportNewCustomerWithoutSupplier
	^'Cannot import new customer without supplier'! !

!testRun: #ImportTest #test08CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 20:37:43'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:38:56' prior: 50658762!
importCustomer

	newSupplier isNil ifTrue: [self error: SupplierImporter cannotImportNewCustomerWithoutSupplier ]	.
	record size ~= 5 ifTrue: [self error: SupplierImporter invalidCustomerRecordErrorDescription ].

	newCustomer := Customer new.
	newSupplier addCustomer: newCustomer.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 20:38:58'!
FAILURE!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:38:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 20:38:58'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:39:15' prior: 50658803!
test08CanNotImportNewCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'NC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportNewCustomerWithoutSupplier.
		].! !

!testRun: #ImportTest #test08CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 20:39:20'!
PASSED!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 20:39:55'!
isSupplierRecord

	^ record first = 'S'! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 20:39:55' prior: 50657706 overrides: 50656036!
importRecord
	
	(self isSupplierRecord) ifTrue: [
			^self importSupplier.
		].
	(record first = 'NC') ifTrue: [
			^self importCustomer.
		].
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 20:40:23'!
isNewCustomerRecord

	^ record first = 'NC'! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 20:40:23' prior: 50658954 overrides: 50656036!
importRecord
	
	(self isSupplierRecord) ifTrue: [
			^self importSupplier.
		].
	(self isNewCustomerRecord) ifTrue: [
			^self importCustomer.
		].
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !
!SupplierImporter methodsFor: 'supplier' stamp: 'jgv 11/23/2023 20:40:39' prior: 50657536!
importSupplier

	record size ~= 4 ifTrue: [self error: SupplierImporter invalidSupplierRecordErrorDescription]. 
	
	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier! !
!SupplierImporter methodsFor: 'supplier' stamp: 'jgv 11/23/2023 20:40:55'!
assertValidSupplierRecord

	^ record size ~= 4 ifTrue: [self error: SupplierImporter invalidSupplierRecordErrorDescription]! !
!SupplierImporter methodsFor: 'supplier' stamp: 'jgv 11/23/2023 20:40:55' prior: 50658980!
importSupplier

	self assertValidSupplierRecord. 
	
	newSupplier := Supplier new.
	newSupplier name: record second.
	newSupplier identificationType: record third.
	newSupplier identificationNumber: record fourth.
	system addSupplier: newSupplier! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:41:13'!
assertIsValidCustomerRecord

	^ record size ~= 5 ifTrue: [self error: SupplierImporter invalidCustomerRecordErrorDescription ]! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:41:13' prior: 50658843!
importCustomer

	newSupplier isNil ifTrue: [self error: SupplierImporter cannotImportNewCustomerWithoutSupplier ]	.
	self assertIsValidCustomerRecord.

	newCustomer := Customer new.
	newSupplier addCustomer: newCustomer.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:41:32'!
assertSupplierHasBeenImported

	^ newSupplier isNil ifTrue: [self error: SupplierImporter cannotImportNewCustomerWithoutSupplier ]! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:41:32' prior: 50659018!
importCustomer

	self assertSupplierHasBeenImported	.
	self assertIsValidCustomerRecord.

	newCustomer := Customer new.
	newSupplier addCustomer: newCustomer.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:41:53'!
assertSupplierWasImported

	^ newSupplier isNil ifTrue: [self error: SupplierImporter cannotImportNewCustomerWithoutSupplier ]! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:41:53' prior: 50659042!
importCustomer

	self assertSupplierWasImported	.
	self assertIsValidCustomerRecord.

	newCustomer := Customer new.
	newSupplier addCustomer: newCustomer.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.! !

!methodRemoval: SupplierImporter #assertSupplierHasBeenImported stamp: 'jgv 11/23/2023 20:41:53'!
assertSupplierHasBeenImported

	^ newSupplier isNil ifTrue: [self error: SupplierImporter cannotImportNewCustomerWithoutSupplier ]!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:41:58'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:42:14'!
test09CanNotImportNewCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'NC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportNewCustomerWithoutSupplier.
		].! !

!methodRemoval: ImportTest #test08CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 20:42:14'!
test08CanNotImportNewCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'NC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportNewCustomerWithoutSupplier.
		].!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:42:31'!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:43:25' prior: 50659178!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:44:19' prior: 50659202!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	CustomerImporter valueFrom: self validImportData into: system..
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:44:20' prior: 50659226!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:44:31' prior: 50659252!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 2.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:44:56'!
ERROR!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 20:46:19' prior: 50658970 overrides: 50656036!
importRecord
	
	(self isSupplierRecord) ifTrue: [
			^self importSupplier.
		].
	(self isNewCustomerRecord) ifTrue: [
			^self importCustomer.
		].
	(self isExistingCustomerRecord) ifTrue: [
			^self importExistingCustomer.
		].
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:46:22'!
ERROR!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:46:28'!
isExistingCustomerRecord
	self shouldBeImplemented.! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:46:36' prior: 50659325!
isExistingCustomerRecord
	record = 'EC'.! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:46:38'!
ERROR!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:46:58' prior: 50659330!
isExistingCustomerRecord
	^record = 'EC'.! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:46:59'!
ERROR!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:47:21' prior: 50659339!
isExistingCustomerRecord
	^record first = 'EC'.! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:47:23'!
ERROR!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:47:32'!
importExistingCustomer
	self shouldBeImplemented.! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:49:07' prior: 50659356!
importExistingCustomer
	| existingCustomer |
	existingCustomer := system customerWithIdentificationType: record first number: record second.
	newSupplier addCustomer: existingCustomer.! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:49:19' prior: 50659361!
importExistingCustomer
	| existingCustomer |
	
	existingCustomer := system customerWithIdentificationType: record first number: record second.
	newSupplier addCustomer: existingCustomer.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 20:49:28' prior: 50659370!
importExistingCustomer
	 
	
	existingCustomer := system customerWithIdentificationType: record first number: record second.
	newSupplier addCustomer: existingCustomer.! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:49:35'!
ERROR!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:49:58' prior: 50659278!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 2.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:50:03'!
ERROR!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:50:16'!
ERROR!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:50:48'!
ERROR!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:51:04' prior: 50659380!
importExistingCustomer
	 |existingCustomer |
	
	existingCustomer := system customerWithIdentificationType: record second number: record third.
	newSupplier addCustomer: existingCustomer.! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:51:09'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:52:00'!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NCustomer,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:52:12' prior: 50659514!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:52:24' prior: 50659536!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 20:52:33'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 20:53:04' prior: 50659431!
importExistingCustomer
	 |existingCustomer |
	
	existingCustomer := system customerWithIdentificationType: record second number: record third.
	newSupplier addCustomer: existingCustomer.! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:53:14' prior: 50659559!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 20:53:15'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:56:58'!
test08CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez, D, 122333444, Alias: Pepoide'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:57:11'!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez, D, 122333444, Alias: Pepoide'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !

!methodRemoval: ImportTest #test08CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 20:57:11'!
test08CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez, D, 122333444, Alias: Pepoide'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:57:42' prior: 50659718!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:57:54' prior: 50659764!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:58:00' prior: 50659788!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 20:58:01'!
ERROR!
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 20:58:05'!
invalidExistingCustomerRecordErrorDescription
	self shouldBeImplemented.! !
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 20:58:15' prior: 50659840!
invalidExistingCustomerRecordErrorDescription
	'invalid existing customer record'.! !

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 20:58:16'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:58:32' prior: 50659812!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 20:58:37' prior: 50659856!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 20:58:38'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:01:13' prior: 50659586!
importExistingCustomer
	 |existingCustomer |
	
	record size < 3 ifTrue: [self error: SupplierImporter invalidExistingCustomerRecordErrorDescription]. 
	existingCustomer := system customerWithIdentificationType: record second number: record third.
	newSupplier addCustomer: existingCustomer.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:01:15'!
PASSED!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:01:34'!
importNewCustomer

	self assertSupplierWasImported	.
	self assertIsValidCustomerRecord.

	newCustomer := Customer new.
	newSupplier addCustomer: newCustomer.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 21:01:34' prior: 50659309 overrides: 50656036!
importRecord
	
	(self isSupplierRecord) ifTrue: [
			^self importSupplier.
		].
	(self isNewCustomerRecord) ifTrue: [
			^self importNewCustomer.
		].
	(self isExistingCustomerRecord) ifTrue: [
			^self importExistingCustomer.
		].
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !

!methodRemoval: SupplierImporter #importCustomer stamp: 'jgv 11/23/2023 21:01:34'!
importCustomer

	self assertSupplierWasImported	.
	self assertIsValidCustomerRecord.

	newCustomer := Customer new.
	newSupplier addCustomer: newCustomer.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:01:37'!
PASSED!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:02:01'!
assertIsValidNewCustomerRecord

	^ record size ~= 5 ifTrue: [self error: SupplierImporter invalidCustomerRecordErrorDescription ]! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 21:02:01' prior: 50659998!
importNewCustomer

	self assertSupplierWasImported	.
	self assertIsValidNewCustomerRecord.

	newCustomer := Customer new.
	newSupplier addCustomer: newCustomer.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	newCustomer identificationType: record fourth.
	newCustomer identificationNumber: record fifth.
	system addCustomers: newCustomer.! !

!methodRemoval: SupplierImporter #assertIsValidCustomerRecord stamp: 'jgv 11/23/2023 21:02:01'!
assertIsValidCustomerRecord

	^ record size ~= 5 ifTrue: [self error: SupplierImporter invalidCustomerRecordErrorDescription ]!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:02:07'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:02:29'!
test13CanNotImportExistingCustomerRecordWithMoraThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:02:40'!
test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !

!methodRemoval: ImportTest #test13CanNotImportExistingCustomerRecordWithMoraThanThreeFields stamp: 'jgv 11/23/2023 21:02:40'!
test13CanNotImportExistingCustomerRecordWithMoraThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:03:37' prior: 50660248!
test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'jgv 11/23/2023 21:03:38'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:04:01' prior: 50659908!
importExistingCustomer
	 |existingCustomer |
	
	record size ~= 3 ifTrue: [self error: SupplierImporter invalidExistingCustomerRecordErrorDescription]. 
	existingCustomer := system customerWithIdentificationType: record second number: record third.
	newSupplier addCustomer: existingCustomer.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'jgv 11/23/2023 21:04:03'!
PASSED!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:04:16'!
assertIsValidExistingCustomer

	^ record size ~= 3 ifTrue: [self error: SupplierImporter invalidExistingCustomerRecordErrorDescription]! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:04:16' prior: 50660324!
importExistingCustomer
	 |existingCustomer |
	
	self assertIsValidExistingCustomer. 
	existingCustomer := system customerWithIdentificationType: record second number: record third.
	newSupplier addCustomer: existingCustomer.! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:04:51'!
test09CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'NC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportNewCustomerWithoutSupplier.
		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:04:55' prior: 50660436!
test09CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'EC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportNewCustomerWithoutSupplier.
		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:05:01'!
test14CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'EC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportNewCustomerWithoutSupplier.
		].! !

!methodRemoval: ImportTest #test09CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:05:01'!
test09CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'EC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportNewCustomerWithoutSupplier.
		].!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:05:11' prior: 50660463!
test14CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'EC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportExistingCustomerWithoutSupplier.
		].! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:05:14'!
ERROR!
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 21:05:20'!
cannotImportExistingCustomerWithoutSupplier
	self shouldBeImplemented.! !
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 21:05:36' prior: 50660509!
cannotImportExistingCustomerWithoutSupplier
	'Cannot import existing customer without supplier'! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:05:37'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:05:46'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:05:46'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:05:46'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:05:46'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:05:46'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:05:46'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:05:47'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:06:11' prior: 50660491!
test14CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'EC,D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportExistingCustomerWithoutSupplier.
		].! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:06:12'!
FAILURE!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:06:24'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:07:40' prior: 50660700!
test14CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'NC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportExistingCustomerWithoutSupplier.
		].! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:07:42'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:07:46' prior: 50660721!
test14CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'EC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportExistingCustomerWithoutSupplier.
		].! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:07:47'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:08:02' prior: 50660739!
test14CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'EC,D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportExistingCustomerWithoutSupplier.
		].! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:08:07'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:08:55' prior: 50660426!
importExistingCustomer
	 |existingCustomer |
	self halt.
	self assertIsValidExistingCustomer. 
	existingCustomer := system customerWithIdentificationType: record second number: record third.
	newSupplier addCustomer: existingCustomer.! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:09:09' prior: 50660842!
test14CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'EC,Pepe, Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportExistingCustomerWithoutSupplier.
		].! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:09:27'!
PASSED!

SupplierImporter invalidExistingCustomerRecordErrorDescription!
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 21:11:46' prior: 50659846!
invalidExistingCustomerRecordErrorDescription
	^'invalid existing customer record'.! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:11:47'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:12:11' prior: 50660859!
importExistingCustomer
	 |existingCustomer |
	self assertIsValidExistingCustomer. 
	existingCustomer := system customerWithIdentificationType: record second number: record third.
	newSupplier addCustomer: existingCustomer.! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:12:12' prior: 50660970!
importExistingCustomer
	 |existingCustomer |

	self assertIsValidExistingCustomer. 
	existingCustomer := system customerWithIdentificationType: record second number: record third.
	newSupplier addCustomer: existingCustomer.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'jgv 11/23/2023 21:12:13'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:12:13'!
FAILURE!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:12:13'!
FAILURE!
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:12:28' prior: 50660980!
importExistingCustomer
	 |existingCustomer |
	self assertIsValidExistingCustomer. 
	existingCustomer := system customerWithIdentificationType: record second number: record third.
	newSupplier addCustomer: existingCustomer.! !
!SupplierImporter methodsFor: 'customer' stamp: 'jgv 11/23/2023 21:12:39' prior: 50661080!
importExistingCustomer
	 |existingCustomer |
	self assertSupplierWasImported.
	self assertIsValidExistingCustomer. 
	existingCustomer := system customerWithIdentificationType: record second number: record third.
	newSupplier addCustomer: existingCustomer.! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:12:47'!
FAILURE!
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 21:13:02' prior: 50660515!
cannotImportExistingCustomerWithoutSupplier
	^'Cannot import existing customer without supplier'! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:13:14'!
FAILURE!
!SupplierImporter class methodsFor: 'error description' stamp: 'jgv 11/23/2023 21:14:18'!
cannotImportCustomerWithoutSupplier
	^'Cannot import new customer without supplier'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 21:14:18' prior: 50659151!
test09CanNotImportNewCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'NC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportCustomerWithoutSupplier.
		].! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'jgv 11/23/2023 21:14:18' prior: 50659056!
assertSupplierWasImported

	^ newSupplier isNil ifTrue: [self error: SupplierImporter cannotImportCustomerWithoutSupplier ]! !

!methodRemoval: SupplierImporter class #cannotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:14:18'!
cannotImportNewCustomerWithoutSupplier
	^'Cannot import new customer without supplier'!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'jgv 11/23/2023 21:14:24'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:14:24'!
FAILURE!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:14:24'!
FAILURE!

!methodRemoval: SupplierImporter class #cannotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:14:30'!
cannotImportExistingCustomerWithoutSupplier
	^'Cannot import existing customer without supplier'!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:14:40' prior: 50660870!
test14CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'EC,Pepe, Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportCustomerWithoutSupplier .
		].! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:14:50'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:17:17'!
test05ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:17:27'!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !

!methodRemoval: ImportTest #test05ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:17:27'!
test05ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:18:56' prior: 50661368!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier customer address |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs	'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	address := supplier addressAt: 'San Martin' number: '3322' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:20:48' prior: 50661416!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier address |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs	'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	address := supplier addressAt: 'San Martin' number: '3322' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: '3322'.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: '1636'.
	self assert: address province equals: 'BsAs'.
	! !

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:20:52'!
ERROR!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'jgv 11/23/2023 21:21:35' prior: 50660014 overrides: 50656036!
importRecord
	
	(self isSupplierRecord) ifTrue: [
			^self importSupplier.
		].
	(self isNewCustomerRecord) ifTrue: [
			^self importNewCustomer.
		].
	(self isExistingCustomerRecord) ifTrue: [
			^self importExistingCustomer.
		].
	(record first = 'A') ifTrue: [
			^self importAddress.
		].
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:21:38'!
ERROR!
!SupplierImporter methodsFor: 'address' stamp: 'jgv 11/23/2023 21:21:47'!
importAddress
	self shouldBeImplemented.! !
!SupplierImporter methodsFor: 'address' stamp: 'jgv 11/23/2023 21:22:12' prior: 50661487!
importAddress

	| newAddress |

	newAddress := Address new.
	newSupplier addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:22:13'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:22:33' prior: 50661440!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier address |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs	'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' number: '3322' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: '3322'.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: '1636'.
	self assert: address province equals: 'BsAs'.
	! !

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:22:35'!
ERROR!
!Supplier methodsFor: 'addresses' stamp: 'jgv 11/23/2023 21:22:47'!
addressAt: aRenameMe1 number: aRenameMe2 ifNone: aRenameMe3 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'addresses' stamp: 'jgv 11/23/2023 21:22:58' prior: 50661535!
addressAt: aStreetName number: aRenameMe2 ifNone: aRenameMe3 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'addresses' stamp: 'jgv 11/23/2023 21:23:04' prior: 50661541!
addressAt: aStreetName number: aStreetNumber ifNone: aRenameMe3 
	self shouldBeImplemented.! !
!Supplier methodsFor: 'addresses' stamp: 'jgv 11/23/2023 21:23:09' prior: 50661547!
addressAt: aStreetName number: aStreetNumber ifNone: aNoneBlock 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:24:00' prior: 50661509!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier address |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs	'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: '3322'.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: '1636'.
	self assert: address province equals: 'BsAs'.
	! !

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:24:00'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:24:13' prior: 50661559!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier address |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs	'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:24:18' prior: 50661585!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier address |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs	'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:24:20' prior: 50661607!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier address |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs	'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'.
	! !

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:24:22'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'jgv 11/23/2023 21:24:32' prior: 50661629!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier address |
	
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'.
	! !

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'jgv 11/23/2023 21:24:33'!
PASSED!

----QUIT----(23 November 2023 21:25:46) CuisUniversity-CustomerImporter.image priorSource: 10468042!

----STARTUP---- (25 November 2023 17:06:41) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-CustomerImporter.image!


!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:07:23'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:08:00'!
test11DoesNotImportRecordsStartingWithAButMoreCharacters
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:08:10'!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !

!methodRemoval: ImportTest #test11DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:08:10'!
test11DoesNotImportRecordsStartingWithAButMoreCharacters
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:08:47' prior: 50661895!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
Ah re loco,San Martin,3322,Olivos,1636,BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:09:25' prior: 50661943!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
Ah re loco,San Martin,3322,Olivos,1636,BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			self assert: supplier numberOfAddresses equals: 1.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:08:47' prior: 50661965!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
Ah re loco,San Martin,3322,Olivos,1636,BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:11:19' prior: 50661984!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
Ah re loco,San Martin,3322,Olivos,1636,BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:11:21'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:19:18'!
test16CanNotImportAddressRecordWithLessThanSixFields
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:19:28'!
test17CanNotImportAddressRecordWithLessThanSixFields
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !

!methodRemoval: ImportTest #test16CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:19:29'!
test16CanNotImportAddressRecordWithLessThanSixFields
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:20:37' prior: 50662145!
test17CanNotImportAddressRecordWithLessThanSixFields
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:20:38'!
FAILURE!
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 17:23:31' prior: 50661492!
importAddress

	| newAddress |
	record size < 6 ifTrue: [self error: SupplierImporter].
	
	newAddress := Address new.
	newSupplier addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 17:23:52' prior: 50662210!
importAddress

	| newAddress |
	record size < 6 ifTrue: [self error: SupplierImporter invalidAddressRecordErrorDescription].
	
	newAddress := Address new.
	newSupplier addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:23:54'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:23:55'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:23:55'!
FAILURE!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:23:55'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:24:23' prior: 50662186!
test17CanNotImportAddressRecordWithLessThanSixFields
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:24:25'!
ERROR!
!SupplierImporter class methodsFor: 'address' stamp: 'joaco 11/25/2023 17:24:38'!
invalidAddressRecordErrorDescription
	self shouldBeImplemented.! !
!SupplierImporter class methodsFor: 'address' stamp: 'joaco 11/25/2023 17:24:47' prior: 50662367!
invalidAddressRecordErrorDescription
	^'invalid address record'.! !
!SupplierImporter class methodsFor: 'address' stamp: 'joaco 11/25/2023 17:24:49' prior: 50662373!
invalidAddressRecordErrorDescription
	^'invalid address record'.
	! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:24:50'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:24:52'!
FAILURE!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:26:31'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:29:22'!
test18CanNotImportAddressRecordWithMoreThanSixFields
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636, BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:29:24'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:29:32' prior: 50662589!
test18CanNotImportAddressRecordWithMoreThanSixFields
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636, BsAs, Argentina'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:29:33'!
FAILURE!
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 17:31:46' prior: 50662225!
importAddress

	| newAddress |
	record size ~= 6 ifTrue: [self error: SupplierImporter invalidAddressRecordErrorDescription].
	
	newAddress := Address new.
	newSupplier addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:31:47'!
PASSED!
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 17:32:01'!
assertIsValidAddressRecord

	^ record size ~= 6 ifTrue: [self error: SupplierImporter invalidAddressRecordErrorDescription]! !
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 17:32:01' prior: 50662638!
importAddress

	| newAddress |
	self assertIsValidAddressRecord.
	
	newAddress := Address new.
	newSupplier addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 17:32:09' prior: 50662763!

importAddress

	| newAddress |
	self assertIsValidAddressRecord.
	
	newAddress := Address new.
	newSupplier addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'joaco 11/25/2023 17:32:55'!
isAddressRecord

	^ record first = 'A'! !
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'joaco 11/25/2023 17:32:55' prior: 50661469 overrides: 50656036!
importRecord
	
	(self isSupplierRecord) ifTrue: [
			^self importSupplier.
		].
	(self isNewCustomerRecord) ifTrue: [
			^self importNewCustomer.
		].
	(self isExistingCustomerRecord) ifTrue: [
			^self importExistingCustomer.
		].
	(self isAddressRecord) ifTrue: [
			^self importAddress.
		].
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:33:34'!
test18CanNotImportAddressWithoutSupplier
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636, BsAs, Argentina'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:33:41' prior: 50662811!
test18CanNotImportAddressWithoutSupplier
	| stream supplier |
		
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636, BsAs, Argentina'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:34:05'!
test19CanNotImportAddressWithoutSupplier
	| stream supplier |
		
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636, BsAs, Argentina'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !

!methodRemoval: ImportTest #test18CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 17:34:05'!
test18CanNotImportAddressWithoutSupplier
	| stream supplier |
		
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636, BsAs, Argentina'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assert: system numberOfSuppliers equals: 1.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:34:17' prior: 50662850!
test19CanNotImportAddressWithoutSupplier
	| stream |
		
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636, BsAs, Argentina'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter cannotImportCustomerWithoutSupplier.	]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:34:30' prior: 50662890!
test19CanNotImportAddressWithoutSupplier
	| stream |
		
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636, BsAs, Argentina'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter cannotImportAddressWithoutSupplier.	]! !

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 17:34:32'!
ERROR!
!SupplierImporter class methodsFor: 'error description' stamp: 'joaco 11/25/2023 17:34:38'!
cannotImportAddressWithoutSupplier
	self shouldBeImplemented.! !
!SupplierImporter class methodsFor: 'error description' stamp: 'joaco 11/25/2023 17:34:53' prior: 50662922!
cannotImportAddressWithoutSupplier
	'can not import address without supplier!!'! !

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 17:34:55'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:35:04' prior: 50662904!
test19CanNotImportAddressWithoutSupplier
	| stream |
		
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636, BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter cannotImportAddressWithoutSupplier.	]! !

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 17:35:05'!
FAILURE!
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 17:35:43' prior: 50662777!
importAddress

	| newAddress |
	
	self assertSupplierWasImported.
	self assertIsValidAddressRecord.
	
	newAddress := Address new.
	newSupplier addAddress: newAddress.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 17:35:44'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 17:35:44'!
FAILURE!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 17:35:44'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:42:16'!
test20CanNotImportEmptyLine
	| stream |
		
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636, BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter cannotImportAddressWithoutSupplier.	]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:42:49' prior: 50663078!
test20CanNotImportEmptyLine
	| stream |
		
	stream := ReadStream on: ''.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter cannotImportFromEmptyStream.	]! !

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 17:42:53'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 17:43:53' prior: 50663091!
test20CanNotImportEmptyLine
	| stream |
		
	stream := ReadStream on: '
'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter cannotImportFromEmptyStream.	]! !

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 17:43:54'!
ERROR!
!SupplierImporter class methodsFor: 'error description' stamp: 'joaco 11/25/2023 17:44:05'!
cannotImportFromEmptyStream
	self shouldBeImplemented.! !
!SupplierImporter class methodsFor: 'error description' stamp: 'joaco 11/25/2023 17:44:17' prior: 50663121!
cannotImportFromEmptyStream
	'Can not import from empty stream!!'! !

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 17:44:18'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'joaco 11/25/2023 17:46:54' prior: 50662797 overrides: 50656036!
importRecord
	
	self assertRecordNotEmpty .
		
	self isSupplierRecord ifTrue: [			^self importSupplier].
	self isNewCustomerRecord ifTrue: [			^self importNewCustomer		].
	self isExistingCustomerRecord ifTrue: [			^self importExistingCustomer		].
	self isAddressRecord ifTrue: [			^self importAddress		].
	
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !

Object subclass: #AddressMapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #AddressMapper category: 'CustomerImporter' stamp: 'joaco 11/25/2023 18:04:32'!
Object subclass: #AddressMapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classRemoval: #AddressMapper stamp: 'joaco 11/25/2023 18:06:05'!
Object subclass: #AddressMapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:06:55' prior: 50662954!
importAddress

	| newAddress |
	
	self assertSupplierWasImported.
	self assertIsValidAddressRecord.
	
	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth.
	
	newSupplier addAddress: newAddress.
! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 18:08:06' prior: 50663170!
importAddress

	 
	
	self assertSupplierWasImported.
	self assertIsValidAddressRecord.
	
	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth.
	
	newSupplier addAddress: newAddress.
! !

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'joaco 11/25/2023 18:08:06'!
CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier newCustomer newAddress'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:08:42'!
mapAddressFromRecord

	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:08:42' prior: 50663185!
importAddress

	 
	
	self assertSupplierWasImported.
	self assertIsValidAddressRecord.
	
	self mapAddressFromRecord.
	
	newSupplier addAddress: newAddress.
! !
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:11:33' prior: 50663219!
importAddress

	|newAddresss|	 
	
	self assertSupplierWasImported.
	self assertIsValidAddressRecord.
	
	newAddresss := self mapAddressFromRecord.
	
	newSupplier addAddress: newAddresss.
! !
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:11:58' prior: 50663208!
mapAddressFromRecord
	|newAddresss|
	
	newAddresss := Address new.
	newAddresss streetName: record second.
	newAddresss streetNumber: record third asNumber .
	newAddresss town: record fourth.
	newAddresss zipCode: record fifth asNumber .
	newAddresss province: record sixth! !

!classDefinition: #SupplierImporter category: 'CustomerImporter' stamp: 'joaco 11/25/2023 18:12:06'!
CSVImporter subclass: #SupplierImporter
	instanceVariableNames: 'newSupplier newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:12:17' prior: 50663236!
mapAddressFromRecord
	|newAddresss|
	
	newAddresss := Address new.
	newAddresss streetName: record second.
	newAddresss streetNumber: record third asNumber .
	newAddresss town: record fourth.
	newAddresss zipCode: record fifth asNumber .
	newAddresss province: record sixth! !
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:12:20' prior: 50663256!
mapAddressFromRecord
	|newAddress|
	
	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth! !
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:13:01' prior: 50663268!
mapAddressFromRecord
	|newAddress|
	
	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth
	
	^newAddress.! !

!classDefinition: #AddressMapper category: 'CustomerImporter' stamp: 'joaco 11/25/2023 18:13:34'!
Object subclass: #AddressMapper
	instanceVariableNames: 'record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!AddressMapper class methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 18:13:34'!
from: aRecord
	^self new initializeFrom: aRecord! !
!AddressMapper methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 18:13:34'!
initializeFrom: aRecord
	record := aRecord.! !
!AddressMapper methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 18:13:34'!
map
	|newAddress|
	
	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth
	
	^newAddress.! !
!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 18:13:34' prior: 50663280!
mapAddressFromRecord
	(AddressMapper from: record) map! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:14:17'!
ERROR!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:14:17'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:14:17'!
FAILURE!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:14:17'!
FAILURE!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:14:21'!
ERROR!
!AddressMapper methodsFor: 'evaluating' stamp: 'joaco 11/25/2023 18:14:35' prior: 50663310!
map
	|newAddress|
	
	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth.
	
	^newAddress.! !

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:14:37'!
ERROR!
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:15:27' prior: 50663227!
importAddress

	|newAddress|	 
	
	self assertSupplierWasImported.
	self assertIsValidAddressRecord.
	
	newAddress := self mapAddressFromRecord.
	
	newSupplier addAddress: newAddress.
! !
!SupplierImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:15:38' prior: 50663322!
mapAddressFromRecord
	^(AddressMapper from: record) map! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:15:55'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:15:55'!
FAILURE!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:15:55'!
FAILURE!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:16:00'!
FAILURE!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:16:18'!
FAILURE!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:16:29'!
FAILURE!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:17:21'!
FAILURE!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:18:03'!
FAILURE!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:18:07'!
FAILURE!
!SupplierImporter class methodsFor: 'error description' stamp: 'joaco 11/25/2023 18:18:58' prior: 50662928!
cannotImportAddressWithoutSupplier
	^'can not import address without supplier!!'! !

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:18:59'!
FAILURE!
!SupplierImporter methodsFor: 'supplier' stamp: 'joaco 11/25/2023 18:20:59' prior: 50661136!
assertSupplierWasImported

	^ newSupplier isNil ifTrue: [self error: SupplierImporter cannotImportWithoutCustomer ]! !
!SupplierImporter methodsFor: 'supplier' stamp: 'joaco 11/25/2023 18:21:03' prior: 50663609!
assertSupplierWasImported

	^ newSupplier isNil ifTrue: [self error: SupplierImporter cannotImportWithoutCustomer ].! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:21:04'!
FAILURE!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:21:04'!
FAILURE!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:21:04'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:21:04'!
FAILURE!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:21:04'!
FAILURE!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:21:07'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:21:41' prior: 50661122!
test09CanNotImportNewCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'NC,Pepe,Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer.
		].! !

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:21:43'!
ERROR!
!SupplierImporter class methodsFor: 'error description' stamp: 'joaco 11/25/2023 18:21:49'!
cannotImportWithoutCustomer
	self shouldBeImplemented.! !
!SupplierImporter class methodsFor: 'error description' stamp: 'joaco 11/25/2023 18:22:11' prior: 50663753!
cannotImportWithoutCustomer
	^'Can not import without a customer record first!!'! !

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:22:14'!
FAILURE!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:22:44'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:23:13'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:23:13'!
FAILURE!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:23:13'!
FAILURE!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:23:13'!
FAILURE!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:23:19'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:23:30' prior: 50661246!
test14CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := ReadStream on: 'EC,Pepe, Sanchez, D, 122333444'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer .
		].! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:23:32'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:23:34'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:23:34'!
FAILURE!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:23:34'!
FAILURE!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:23:39'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:23:55' prior: 50662937!
test19CanNotImportAddressWithoutSupplier
	| stream |
		
	stream := ReadStream on: 'A,San Martin,3322,Olivos,1636, BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer .	]! !

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:23:57'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:23:59'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:42:33'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:42:33'!
FAILURE!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:42:33'!
FAILURE!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:42:51'!
FAILURE!
!SupplierImporter class methodsFor: 'error description' stamp: 'joaco 11/25/2023 18:43:23' prior: 50663127!
cannotImportFromEmptyStream
	^'Can not import from empty stream!!'! !

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:43:24'!
FAILURE!
!SupplierImporter methodsFor: 'evaluating - private' stamp: 'joaco 11/25/2023 18:43:56' prior: 50663137 overrides: 50656036!
importRecord
	
	self assertRecordNotEmpty.
		
	self isSupplierRecord ifTrue: [			^self importSupplier].
	self isNewCustomerRecord ifTrue: [			^self importNewCustomer		].
	self isExistingCustomerRecord ifTrue: [			^self importExistingCustomer		].
	self isAddressRecord ifTrue: [			^self importAddress		].
	
	self error: SupplierImporter invalidRecordTypeErrorDescription.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:45:11' prior: 50663106!
test20CanNotImportEmptyLine
	| stream |
		
	stream := ReadStream on: '
'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.	]! !

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:45:13'!
PASSED!
!CustomerImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:45:52' prior: 50654930!
importAddress

	| newAddress |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	newAddress := Address new.
	
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: record fifth asNumber .
	newAddress province: record sixth.
	
	newCustomer addAddress: newAddress.! !
!CustomerImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:46:18' prior: 50664299!
importAddress

	| newAddress |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	self mapAddressFromRecord.
	
	newCustomer addAddress: newAddress.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:46:25'!
ERROR!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:46:25'!
ERROR!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:46:25'!
ERROR!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:46:25'!
ERROR!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:46:25'!
ERROR!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:46:25'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:46:27'!
ERROR!
!CustomerImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:46:33'!
mapAddressFromRecord
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:46:48' prior: 50664434!
mapAddressFromRecord
	^(AddressMapper from: record) map.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:46:50'!
ERROR!
!CustomerImporter methodsFor: 'address' stamp: 'joaco 11/25/2023 18:47:18' prior: 50664314!
importAddress

	| newAddress |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	newAddress := self mapAddressFromRecord.
	
	newCustomer addAddress: newAddress.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:47:20'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:49:36'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'joaco 11/25/2023 18:52:24' prior: 50654484!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: system.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:55:19'!
validSupplierImportData

	^ ReadStream on: 'S,Supplier1,D,123'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:55:19' prior: 50655858!
test01ValidSupplierDataIsImportedCorrectly
	| stream supplier |
	
	stream := self validSupplierImportData.
	SupplierImporter valueFrom: stream into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:55:35' prior: 50664688!
test01ValidSupplierDataIsImportedCorrectly
	| supplier |
	
	SupplierImporter valueFrom: self validSupplierImportData into: system.
	self assert: system numberOfSuppliers equals: 1.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:55:41'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01'!
assertImporterdRightNumberOfSuppliers

	^ self assert: system numberOfSuppliers equals: 1! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01' prior: 50658380!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| stream supplier |
	
	stream := ReadStream on: 'S,Supplier1,D,123
NCustomer,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01' prior: 50662613!
test18CanNotImportAddressRecordWithMoreThanSixFields
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636, BsAs, Argentina'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01' prior: 50664706!
test01ValidSupplierDataIsImportedCorrectly
	| supplier |
	
	SupplierImporter valueFrom: self validSupplierImportData into: system.
	self assertImporterdRightNumberOfSuppliers.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). ! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01' prior: 50662343!
test17CanNotImportAddressRecordWithLessThanSixFields
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01' prior: 50662006!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	| stream supplier |
		
	stream := ReadStream on: 'S,Supplier1,D,123
Ah re loco,San Martin,3322,Olivos,1636,BsAs'.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01' prior: 50659880!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01' prior: 50658736!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez, D, 122333444, Alias: Pepoide'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01' prior: 50658610!
test07CanNotImportNewCustomerRecordWithLessThanFiveFields
	| stream supplier |
	stream := ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01' prior: 50660296!
test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
EC,Pepe,Sanchez,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:01' prior: 50659595!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:57:04'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 18:57:05'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:40' prior: 50664884!
test01ValidSupplierDataIsImportedCorrectly
	| supplier |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty). 
	
	SupplierImporter valueFrom: self validSupplierImportData into: system.
	self assertImporterdRightNumberOfSuppliers.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:58'!
assertSupplier1WasImportedCorrectly

	| supplier |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	self assert: (supplier isNamed: 'Supplier1').
	self assert: (supplier isIdentifiedAs: 'D' withNumber: '123').
	self assert: (supplier isAddressesEmpty).
	self assert: (supplier isCustomersEmpty)! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:57:58' prior: 50665169!
test01ValidSupplierDataIsImportedCorrectly
	self assertSupplier1WasImportedCorrectly. 
	
	SupplierImporter valueFrom: self validSupplierImportData into: system.
	self assertImporterdRightNumberOfSuppliers.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:58:07' prior: 50665200!
test01ValidSupplierDataIsImportedCorrectly
	
	SupplierImporter valueFrom: self validSupplierImportData into: system.
	self assertImporterdRightNumberOfSuppliers.
	self assertSupplier1WasImportedCorrectly. ! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 18:58:12' prior: 50665210!
test01ValidSupplierDataIsImportedCorrectly
	
	SupplierImporter valueFrom: self validSupplierImportData into: system.
	
	self assertImporterdRightNumberOfSuppliers.
	self assertSupplier1WasImportedCorrectly. ! !
!ImportTest methodsFor: 'assertions' stamp: 'joaco 11/25/2023 19:00:06'!
shouldFailImporting: aReadStream usingImporter: aCSVImporter messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: system. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:00:06' prior: 50654515!
test04DoesNotImportRecordsStartingWithAButMoreCharacters

	self
		shouldFailImporting: self invalidAddressRecordStartData
		usingImporter: CustomerImporter messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:00:06' prior: 50654505!
test03DoesNotImportRecordsStartingWithCButMoreCharacters

	self
		shouldFailImporting: self invalidCustomerRecordStartData
		usingImporter: CustomerImporter messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:00:06' prior: 50654558!
test08CanNotImportCustomerRecordWithMoreThanFiveFields

	self
		shouldFailImporting: self customerRecordWithMoreThanFiveFields
		usingImporter: CustomerImporter messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:00:06' prior: 50654526!
test05CanNotImportAddressRecordWithLessThanSixFields

	self
		shouldFailImporting: self addressRecordWithLessThanSixFields
		usingImporter: CustomerImporter messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:00:06' prior: 50654568!
test09CannotImportEmptyLine

	self
		shouldFailImporting: self emptyLine
		usingImporter: CustomerImporter messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:00:06' prior: 50654548!
test07CanNotImportCustomerRecordWithLessThanFiveFields

	self
		shouldFailImporting: self customerRecordWithLessThanFiveFields
		usingImporter: CustomerImporter messageText: CustomerImporter invalidCustomerRecordErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:00:06' prior: 50654537!
test06CanNotImportAddressRecordWithMoreThanSixFields

	self
		shouldFailImporting: self addressRecordWithMoreThanSixFields
		usingImporter: CustomerImporter messageText: CustomerImporter invalidAddressRecordErrorDescription
		asserting: [ self assertImportedOneCustomerWithoutAddress ]

	! !

!methodRemoval: ImportTest #shouldFailImporting:messageText:asserting: stamp: 'joaco 11/25/2023 19:00:06'!
shouldFailImporting: aReadStream messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ CustomerImporter valueFrom: aReadStream into: system. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:00:06' prior: 50665229!
shouldFailImporting: aReadStream usingImporter: aCSVImporter messageText: anErrorMessageText asserting: anAssertionBlock

	self
		should: [ aCSVImporter valueFrom: aReadStream into: system. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anErrorMessageText equals: anError messageText.
			anAssertionBlock value ]

	! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 19:00:33'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:02:48'!
invalidSupplierRecordStartData

	^ ReadStream on: 'Supplier,Supplier1,D,123'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:02:48' prior: 50656697!
test02DoesNotImportRecordsStartingWithSButMoreCharacters
	| stream |
	stream := self invalidSupplierRecordStartData.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:03:07' prior: 50665472!
test02DoesNotImportRecordsStartingWithSButMoreCharacters
	self should: [SupplierImporter valueFrom: self invalidSupplierRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:03:13' prior: 50665487!
test02DoesNotImportRecordsStartingWithSButMoreCharacters

	self should: [SupplierImporter valueFrom: self invalidSupplierRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assert: system numberOfSuppliers equals: 0.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:05:16'!
assertNoSupplierWasImported

	^ self assert: system numberOfSuppliers equals: 0! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:05:16' prior: 50657023!
test03CanNotImportSupplierRecordWithLessThanFourFields
	| stream |
	stream := ReadStream on: 'S,Supplier1'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assertNoSupplierWasImported.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:05:16' prior: 50665501!
test02DoesNotImportRecordsStartingWithSButMoreCharacters

	self should: [SupplierImporter valueFrom: self invalidSupplierRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertNoSupplierWasImported.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:05:16' prior: 50657197!
test04CanNotImportSupplierRecordWithMoreThanFourFields
	| stream |
	stream := ReadStream on: 'S,Supplier1,D,123,Fravega'.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assertNoSupplierWasImported.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:06:58' prior: 50665536!
test02DoesNotImportRecordsStartingWithSButMoreCharacters
	
	self shouldFailImporting: self invalidSupplierRecordStartData usingImporter: SupplierImporter  messageText: SupplierImporter invalidRecordTypeErrorDescription asserting: [ self assertNoSupplierWasImported ].

	self should: [SupplierImporter valueFrom: self invalidSupplierRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertNoSupplierWasImported.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:07:23' prior: 50665565!
test02DoesNotImportRecordsStartingWithSButMoreCharacters
	
	self
		shouldFailImporting: self invalidSupplierRecordStartData 
		usingImporter: SupplierImporter  
		messageText: SupplierImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoSupplierWasImported ].
! !
!ImportTest methodsFor: 'tests' stamp: 'joaco 11/25/2023 19:07:28' prior: 50665257!
test03DoesNotImportRecordsStartingWithCButMoreCharacters

	self
		shouldFailImporting: self invalidCustomerRecordStartData
		usingImporter: CustomerImporter 
		messageText: CustomerImporter invalidRecordTypeErrorDescription
		asserting: [ self assertNoCustomerWasImported ]

	! !

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 19:07:30'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:08:53'!
supplierRecordWithLessThanFourFields

	^ ReadStream on: 'S,Supplier1'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:08:53' prior: 50665521!
test03CanNotImportSupplierRecordWithLessThanFourFields
	| stream |
	stream := self supplierRecordWithLessThanFourFields.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assertNoSupplierWasImported.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:09:01' prior: 50665728!
test03CanNotImportSupplierRecordWithLessThanFourFields
	self should: [SupplierImporter valueFrom: self supplierRecordWithLessThanFourFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assertNoSupplierWasImported.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:10:02' prior: 50665743!
test03CanNotImportSupplierRecordWithLessThanFourFields
	self 
		shouldFailImporting: self supplierRecordWithLessThanFourFields
		usingImporter: SupplierImporter  
		messageText: SupplierImporter invalidSupplierRecordErrorDescription 
		asserting: [ self assertNoSupplierWasImported ].
	
	
	self should: [SupplierImporter valueFrom: self supplierRecordWithLessThanFourFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assertNoSupplierWasImported.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:10:07' prior: 50665757!
test03CanNotImportSupplierRecordWithLessThanFourFields
	self 
		shouldFailImporting: self supplierRecordWithLessThanFourFields
		usingImporter: SupplierImporter  
		messageText: SupplierImporter invalidSupplierRecordErrorDescription 
		asserting: [ self assertNoSupplierWasImported ].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:10:41'!
supplierRecordWithMoreThanFourFields

	^ ReadStream on: 'S,Supplier1,D,123,Fravega'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:10:41' prior: 50665550!
test04CanNotImportSupplierRecordWithMoreThanFourFields
	| stream |
	stream := self supplierRecordWithMoreThanFourFields.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assertNoSupplierWasImported.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:10:43' prior: 50665796!
test04CanNotImportSupplierRecordWithMoreThanFourFields
	self should: [SupplierImporter valueFrom: self supplierRecordWithMoreThanFourFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidSupplierRecordErrorDescription.
			self assertNoSupplierWasImported.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:11:50' prior: 50665811!
test04CanNotImportSupplierRecordWithMoreThanFourFields
	self shouldFailImporting: self supplierRecordWithMoreThanFourFields 
	usingImporter: SupplierImporter 
	messageText: SupplierImporter invalidSupplierRecordErrorDescription
	asserting: [	self assertNoSupplierWasImported		]! !

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/25/2023 19:11:52'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:12:04' prior: 50665825!
test04CanNotImportSupplierRecordWithMoreThanFourFields
	self 
		shouldFailImporting: self supplierRecordWithMoreThanFourFields 
		usingImporter: SupplierImporter 
		messageText: SupplierImporter invalidSupplierRecordErrorDescription
		asserting: [	self assertNoSupplierWasImported		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:15:07'!
validSupplierWithNewCustomerData

	^ ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:15:07' prior: 50658113!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	stream := self validSupplierWithNewCustomerData.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:15:10' prior: 50665969!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| supplier customer |
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:16:45' prior: 50665992!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| supplier customer |
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 1.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:17:21' prior: 50666014!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| supplier customer |
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedRightNumberOfCustomers.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:17:27' prior: 50666037!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| supplier customer |
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedRightNumberOfCustomers.
	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:19:42' prior: 50666059!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| supplier customer |
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	
	self assertImportedRightNumberOfCustomers.

	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:20:26' prior: 50666081!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.

	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	
	self assertImportedRightNumberOfCustomers.


	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:21:36'!
withName

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:21:36' prior: 50666103!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	self withName.

	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	
	self assertImportedRightNumberOfCustomers.


	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:22:47'!
withName: aCustomerName

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:22:47' prior: 50666142!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	self withName: 'Pepe'.

	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	
	self assertImportedRightNumberOfCustomers.


	! !

!methodRemoval: ImportTest #withName stamp: 'joaco 11/25/2023 19:22:47'!
withName

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:22:47' prior: 50666152!
withName: aCustomerName

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:23:36'!
withName: aCustomerName lastName: aCustomerLastName 

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:23:36' prior: 50666169!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	self withName: 'Pepe' lastName: 'Sanchez'.

	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	
	self assertImportedRightNumberOfCustomers.


	! !

!methodRemoval: ImportTest #withName: stamp: 'joaco 11/25/2023 19:23:36'!
withName: aCustomerName

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:23:36' prior: 50666212!
withName: aCustomerName lastName: aCustomerLastName 

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:24:19'!
withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType  

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:24:19' prior: 50666231!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	self withName: 'Pepe' lastName: 'Sanchez' identificationType: 'D'.

	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	
	self assertImportedRightNumberOfCustomers.


	! !

!methodRemoval: ImportTest #withName:lastName: stamp: 'joaco 11/25/2023 19:24:19'!
withName: aCustomerName lastName: aCustomerLastName 

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:24:19' prior: 50666276!
withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType  

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: anIdentificationType.
	self assert: customer identificationNumber equals: '22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:25:08'!
withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber   

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: anIdentificationType.
	self assert: customer identificationNumber equals: '22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:25:08' prior: 50666296!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	self withName: 'Pepe' lastName: 'Sanchez' identificationType: 'D' identificationNumber: '22333444'.

	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	
	self assertImportedRightNumberOfCustomers.


	! !

!methodRemoval: ImportTest #withName:lastName:identificationType: stamp: 'joaco 11/25/2023 19:25:08'!
withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType  

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: anIdentificationType.
	self assert: customer identificationNumber equals: '22333444'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:25:08' prior: 50666346!
withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber   

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: 'D' number: anIdentificationNumber ifNone: [self fail].
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: anIdentificationType.
	self assert: customer identificationNumber equals: anIdentificationNumber! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:25:48' prior: 50666401!
withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber   

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: anIdentificationType number: anIdentificationNumber ifNone: [self fail].
	
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: anIdentificationType.
	self assert: customer identificationNumber equals: anIdentificationNumber! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:28:38'!
assertCustomerOf: aSupplier withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber   

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: anIdentificationType number: anIdentificationNumber ifNone: [self fail].
	
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: anIdentificationType.
	self assert: customer identificationNumber equals: anIdentificationNumber! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:29:23' prior: 50666424!
withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber   

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: anIdentificationType number: anIdentificationNumber ifNone: [self fail].
	
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: anIdentificationType.
	self assert: customer identificationNumber equals: anIdentificationNumber! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:30:06' prior: 50666447!
assertCustomerOf: aSupplier withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber   

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: anIdentificationType number: anIdentificationNumber ifNone: [self fail].
	
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: anIdentificationType.
	self assert: customer identificationNumber equals: anIdentificationNumber! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/25/2023 19:30:06' prior: 50666368!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	self assertCustomerOf: supplier withName: 'Pepe' lastName: 'Sanchez' identificationType: 'D' identificationNumber: '22333444'.

	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	
	self assertImportedRightNumberOfCustomers.


	! !

!methodRemoval: ImportTest #withName:lastName:identificationType:identificationNumber: stamp: 'joaco 11/25/2023 19:30:06'!
withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber   

	| supplier customer |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.

	
	customer := supplier customerWithIdentificationType: anIdentificationType number: anIdentificationNumber ifNone: [self fail].
	
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: anIdentificationType.
	self assert: customer identificationNumber equals: anIdentificationNumber!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:30:46' prior: 50666494!
assertCustomerOf: aSupplier withName: aCustomerName lastName: aCustomerLastName identificationType: anIdentificationType identificationNumber: anIdentificationNumber   

	| customer |

	customer := aSupplier customerWithIdentificationType: anIdentificationType number: anIdentificationNumber ifNone: [self fail].
	
	self assert: customer firstName equals: aCustomerName.
	self assert: customer lastName equals: aCustomerLastName.
	self assert: customer identificationType equals: anIdentificationType.
	self assert: customer identificationNumber equals: anIdentificationNumber! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:32:03' prior: 50666518!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	|supplier|
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertCustomerOf: supplier withName: 'Pepe' lastName: 'Sanchez' identificationType: 'D' identificationNumber: '22333444'.
	
	self assertImportedRightNumberOfCustomers.


	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/25/2023 19:32:39' prior: 50666577!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	|supplier|
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'.
		
	self assertImportedRightNumberOfCustomers.


	! !

----QUIT----(25 November 2023 19:32:55) CuisUniversity-CustomerImporter.image priorSource: 10563803!

----STARTUP---- (26 November 2023 12:42:30) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-CustomerImporter.image!

!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:43:48' prior: 50666593!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	|supplier|
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedRightNumberOfCustomers.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'.
		
	


	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:46:32'!
invalidNewCustomerRecordStartData

	^ ReadStream on: 'S,Supplier1,D,123
NCustomer,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:46:32' prior: 50664841!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| stream supplier |
	
	stream := self invalidNewCustomerRecordStartData.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:46:42' prior: 50666640!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| supplier |
	
	self should: [SupplierImporter valueFrom: self invalidNewCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:47:29' prior: 50666661!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	| supplier |
	
	self should: [SupplierImporter valueFrom: self invalidNewCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assertNoCustomerWasImported.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:49:01' prior: 50666681!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	
	self should: [SupplierImporter valueFrom: self invalidNewCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | |supplier|
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assertNoCustomerWasImported.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:49:26' prior: 50666701!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	
	self should: [SupplierImporter valueFrom: self invalidNewCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | |supplier|
		
			self assertImporterdRightNumberOfSuppliers.
			
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assertNoCustomerWasImported.
			self assert: supplier isCustomersEmpty.
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:49:44'!
assertImportedOneSupplierWithoutCustomer

	|supplier|
		
			self assertImporterdRightNumberOfSuppliers.
			
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assertNoCustomerWasImported.
			self assert: supplier isCustomersEmpty! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:49:44' prior: 50666721!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	
	self should: [SupplierImporter valueFrom: self invalidNewCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | self assertImportedOneSupplierWithoutCustomer.
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:49:50' prior: 50666752!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	
	self should: [SupplierImporter valueFrom: self invalidNewCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImportedOneSupplierWithoutCustomer.
		]! !

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:49:52'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 12:49:52'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:49:52'!
FAILURE!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:51:25'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:52:13' prior: 50666617!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	|supplier|
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	 self assert: 2 equals: system numberOfCustomers.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'.
		
	


	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:52:56' prior: 50666902!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	|supplier|
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: 1 equals: system numberOfCustomers.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'.
		
	


	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:53:09' prior: 50666919!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	|supplier|
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: 1 equals: system numberOfCustomers.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'.
		
	


	! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 12:53:09'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:54:32'!
assertImportedRightNumberOfNewCustomersForSupplier

	^ self assert: 1 equals: system numberOfCustomers! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:54:32' prior: 50666936!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	|supplier|
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedRightNumberOfNewCustomersForSupplier.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'.
		
	


	! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 12:54:35'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:55:27'!
assertImportedOneNewCustomersForSupplier

	^ self assert: 1 equals: system numberOfCustomers! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 12:55:27' prior: 50667072!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	|supplier|
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedOneNewCustomersForSupplier.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'.
		
	


	! !

!methodRemoval: ImportTest #assertImportedRightNumberOfNewCustomersForSupplier stamp: 'joaco 11/26/2023 12:55:27'!
assertImportedRightNumberOfNewCustomersForSupplier

	^ self assert: 1 equals: system numberOfCustomers!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 12:55:40'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:57:06' prior: 50666767!
test06DoesNotImportRecordsStartingWithNCButMoreCharacters
	
	self shouldFailImporting: self invalidNewCustomerRecordStartData 
	usingImporter: SupplierImporter
	messageText: SupplierImporter invalidRecordTypeErrorDescription
	asserting: 	[self assertImportedOneSupplierWithoutCustomer].! !

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 12:57:08'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:58:18'!
newCustomerRecordForSupplierWithLessThanFiveFields

	^ ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:58:18' prior: 50664988!
test07CanNotImportNewCustomerRecordWithLessThanFiveFields
	| stream supplier |
	stream := self newCustomerRecordForSupplierWithLessThanFiveFields.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:58:23' prior: 50667476!
test07CanNotImportNewCustomerRecordWithLessThanFiveFields
	| supplier |
	self should: [SupplierImporter valueFrom: self newCustomerRecordForSupplierWithLessThanFiveFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 12:58:58' prior: 50667498!
test07CanNotImportNewCustomerRecordWithLessThanFiveFields
	
	
	self should: [SupplierImporter valueFrom: self newCustomerRecordForSupplierWithLessThanFiveFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assertImportedOneSupplierWithoutCustomer.
		]! !

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 12:59:02'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:00:16' prior: 50667519!
test07CanNotImportNewCustomerRecordWithLessThanFiveFields
	
	
	self shouldFailImporting: self newCustomerRecordForSupplierWithLessThanFiveFields
	usingImporter: SupplierImporter
	messageText: SupplierImporter invalidCustomerRecordErrorDescription
	asserting: 		[self assertImportedOneSupplierWithoutCustomer].! !

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:00:17'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:00:48'!
newCustomerRecordForSupplierWithMoreThanFiveFields

	^ ReadStream on: 'S,Supplier1,D,123
NC,Pepe,Sanchez, D, 122333444, Alias: Pepoide'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:00:48' prior: 50664966!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	| stream supplier |
	stream := self newCustomerRecordForSupplierWithMoreThanFiveFields.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:00:50' prior: 50667780!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	| supplier |
	self should: [SupplierImporter valueFrom: self newCustomerRecordForSupplierWithMoreThanFiveFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 0.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:02:40' prior: 50667802!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	
	
	self shouldFailImporting: self newCustomerRecordForSupplierWithMoreThanFiveFields
	usingImporter: SupplierImporter
	messageText: SupplierImporter invalidCustomerRecordErrorDescription
	asserting: self assertImportedOneSupplierWithoutCustomer! !

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:02:46'!
FAILURE!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:02:59'!
FAILURE!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:03:31' prior: 50667823!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	| supplier |
	
	self should: [SupplierImporter valueFrom: self newCustomerRecordForSupplierWithMoreThanFiveFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .
			self assertImportedOneSupplierWithoutCustomer 
		]! !

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:03:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:03:35'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:05:53' prior: 50667844!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	| supplier |
	
	self shouldFailImporting: self newCustomerRecordForSupplierWithMoreThanFiveFields
	usingImporter: SupplierImporter 
	messageText: SupplierImporter invalidCustomerRecordErrorDescription
	asserting: [self assertImportedOneSupplierWithoutCustomer	.	]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:05:56' prior: 50668085!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	| supplier |
	
	self shouldFailImporting: self newCustomerRecordForSupplierWithMoreThanFiveFields
	usingImporter: SupplierImporter 
	messageText: SupplierImporter invalidCustomerRecordErrorDescription
	asserting: [self assertImportedOneSupplierWithoutCustomer		.]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:06:00' prior: 50668099!
test08CanNotImportNewCustomerRecordWithMoreThanFiveFields
	
	
	self shouldFailImporting: self newCustomerRecordForSupplierWithMoreThanFiveFields
	usingImporter: SupplierImporter 
	messageText: SupplierImporter invalidCustomerRecordErrorDescription
	asserting: [self assertImportedOneSupplierWithoutCustomer		].! !

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:06:01'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:06:53'!
newCustomerWithoutSupplier

	^ ReadStream on: 'NC,Pepe,Sanchez, D, 122333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:06:53' prior: 50663736!
test09CanNotImportNewCustomerWithoutSupplier
	| stream |
	stream := self newCustomerWithoutSupplier.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer.
		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:06:59' prior: 50668244!
test09CanNotImportNewCustomerWithoutSupplier
	self should: [SupplierImporter valueFrom: self newCustomerWithoutSupplier into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer.
		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:07:57' prior: 50668257!
test09CanNotImportNewCustomerWithoutSupplier
	self should: [SupplierImporter valueFrom: self newCustomerWithoutSupplier into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer.
		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:08:45'!
validSupplierWithExistingCustomerData

	^ ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:08:45' prior: 50659393!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| stream supplier customer |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := self validSupplierWithExistingCustomerData.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 2.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:08:47' prior: 50668287!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| supplier customer |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	SupplierImporter valueFrom: self validSupplierWithExistingCustomerData into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assert: system numberOfCustomers equals: 2.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:09:39' prior: 50668313!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| supplier customer |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	SupplierImporter valueFrom: self validSupplierWithExistingCustomerData into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedRightNumberOfCustomers.
	customer := supplier customerWithIdentificationType: 'D' number: '22333444' ifNone: [self fail].
	self assert: customer firstName equals: 'Pepe'.
	self assert: customer lastName equals: 'Sanchez'.
	self assert: customer identificationType equals: 'D'.
	self assert: customer identificationNumber equals: '22333444'.
	! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:09:39'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:12:18' prior: 50668338!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	SupplierImporter valueFrom: self validSupplierWithExistingCustomerData into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedRightNumberOfCustomers.
	
	self 
		assertCustomerOf: supplier
		withName: 'Pepe'
		lastName: 'Sanchez'
		identificationType: 'D' 
		identificationNumber: '22333444'.
	! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:12:21'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:13:22' prior: 50668475!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	SupplierImporter valueFrom: self validSupplierWithExistingCustomerData into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedRightNumberOfCustomers.
	
	self 
		assertCustomerOf: supplier
		withName: 'Pepe'
		lastName: 'Sanchez'
		identificationType: 'D' 
		identificationNumber: '22333444'.
	! !

!methodRemoval: ImportTest #validSupplierWithExistingCustomerData stamp: 'joaco 11/26/2023 13:13:46'!
validSupplierWithExistingCustomerData

	^ ReadStream on: 'S,Supplier1,D,123
EC,D,22333444'!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:13:46' prior: 50668607!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	SupplierImporter valueFrom: ( ReadStream on: 'S,Supplier1,D,123
EC,D,22333444') into: system.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedRightNumberOfCustomers.
	
	self 
		assertCustomerOf: supplier
		withName: 'Pepe'
		lastName: 'Sanchez'
		identificationType: 'D' 
		identificationNumber: '22333444'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:14:54'!
validSupplierWithExistingCustomerData

	CustomerImporter valueFrom: self validImportData into: system.
	
	SupplierImporter valueFrom: ( ReadStream on: 'S,Supplier1,D,123
EC,D,22333444') into: system! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:14:54' prior: 50668632!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| supplier |
	
	self validSupplierWithExistingCustomerData.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedRightNumberOfCustomers.
	
	self 
		assertCustomerOf: supplier
		withName: 'Pepe'
		lastName: 'Sanchez'
		identificationType: 'D' 
		identificationNumber: '22333444'.
	! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:14:59'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:16:26' prior: 50665033!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:16:41' prior: 50668789!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	|  supplier stream  |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:17:31'!
invalidExistingCustomerRecordStartData

	^ ReadStream on: 'S,Supplier1,D,123
ECustomer,D,22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:17:31' prior: 50668813!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	|  supplier stream  |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := self invalidExistingCustomerRecordStartData.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:17:35' prior: 50668843!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	|  supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self should: [SupplierImporter valueFrom: self invalidExistingCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:21:20' prior: 50668661!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	| supplier |
	
	self validSupplierWithExistingCustomerData.
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self 
		assertCustomerOf: supplier
		withName: 'Pepe'
		lastName: 'Sanchez'
		identificationType: 'D' 
		identificationNumber: '22333444'.
	! !

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:21:22'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:21:31' prior: 50668866!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	|  supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self should: [SupplierImporter valueFrom: self invalidExistingCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'assertions' stamp: 'joaco 11/26/2023 13:22:23' prior: 50666740!
assertImportedOneSupplierWithoutCustomer

	|supplier|
		
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assertNoCustomerWasImported.
			self assert: supplier isCustomersEmpty! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:23:03' prior: 50669015!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self should: [SupplierImporter valueFrom: self invalidExistingCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | |supplier|
		self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isCustomersEmpty.
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:23:36'!
assertImportedOneSupplierWithoutExistingCustomer

	|supplier|
		self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isCustomersEmpty! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:23:36' prior: 50669048!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self should: [SupplierImporter valueFrom: self invalidExistingCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | self assertImportedOneSupplierWithoutExistingCustomer.
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:23:43' prior: 50669078!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self should: [SupplierImporter valueFrom: self invalidExistingCustomerRecordStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImportedOneSupplierWithoutExistingCustomer.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:24:53' prior: 50669095!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self shouldFailImporting: self invalidExistingCustomerRecordStartData 
	usingImporter: SupplierImporter
	messageText: SupplierImporter invalidRecordTypeErrorDescription
	asserting: [	self assertImportedOneSupplierWithoutExistingCustomer		].! !

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:24:56'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:25:32'!
existingCustomerRecordForSupplierWithLessThanThreeFields

	^ ReadStream on: 'S,Supplier1,D,123
EC,22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:25:32' prior: 50664942!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := self existingCustomerRecordForSupplierWithLessThanThreeFields.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:25:33' prior: 50669246!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	| supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self should: [SupplierImporter valueFrom: self existingCustomerRecordForSupplierWithLessThanThreeFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:26:17' prior: 50669270!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self should: [SupplierImporter valueFrom: self existingCustomerRecordForSupplierWithLessThanThreeFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter 
			invalidExistingCustomerRecordErrorDescription .
			self assertImportedOneSupplierWithoutExistingCustomer. 
		]! !

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:26:26'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:28:11' prior: 50669293!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self shouldFailImporting: self existingCustomerRecordForSupplierWithLessThanThreeFields
	usingImporter: SupplierImporter
	messageText: SupplierImporter 			invalidExistingCustomerRecordErrorDescription
	asserting: [	self assertImportedOneSupplierWithoutExistingCustomer		].! !

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:28:12'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:28:43'!
existingCustomerForSupplierWithMoreThanThreeFields

	^ ReadStream on: 'S,Supplier1,D,123
EC,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:28:43' prior: 50665009!
test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields
	| stream supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	stream := self existingCustomerForSupplierWithMoreThanThreeFields.

	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:28:46' prior: 50669560!
test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields
	| supplier |
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self should: [SupplierImporter valueFrom: self existingCustomerForSupplierWithMoreThanThreeFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: system numberOfCustomers equals: 2.
			self assert: supplier isCustomersEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:30:04' prior: 50669584!
test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields
	
	
	CustomerImporter valueFrom: self validImportData into: system.
	
	self shouldFailImporting: self existingCustomerForSupplierWithMoreThanThreeFields
	usingImporter: SupplierImporter
	messageText: SupplierImporter invalidExistingCustomerRecordErrorDescription
	asserting: [		self assertImportedOneSupplierWithoutExistingCustomer		].! !

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:30:05'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:30:05'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:30:05'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:30:05'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:30:05'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:30:05'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:30:05'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:30:06'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:30:35'!
existingCustomerWithoutSupplier

	^ ReadStream on: 'EC,Pepe, Sanchez, D, 122333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:30:35' prior: 50663885!
test14CanNotImportExistingCustomerWithoutSupplier
	| stream |
	stream := self existingCustomerWithoutSupplier.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer .
		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:30:38' prior: 50669741!
test14CanNotImportExistingCustomerWithoutSupplier
	self should: [SupplierImporter valueFrom: self existingCustomerWithoutSupplier into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer .
		].! !

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:30:41'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:31:02'!
validSupplierWithAddressData

	^ ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:31:02' prior: 50661655!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| stream supplier address |
	
	stream := self validSupplierWithAddressData.

	SupplierImporter valueFrom: stream into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:31:04' prior: 50669777!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| supplier address |
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:32:25' prior: 50669798!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'.
	
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:33:16'!
assertAddressOfSupplier1At

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:33:16' prior: 50669818!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	self assertAddressOfSupplier1At.
	
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:34:11'!
assertAddressOfSupplier1At: aStreetName

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:34:11' prior: 50669855!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	self assertAddressOfSupplier1At: 'San Martin'.
	
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	! !

!methodRemoval: ImportTest #assertAddressOfSupplier1At stamp: 'joaco 11/26/2023 13:34:11'!
assertAddressOfSupplier1At

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: 'San Martin' ifNone: [self fail].
	self assert: address streetName equals: 'San Martin'.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:34:11' prior: 50669863!
assertAddressOfSupplier1At: aStreetName

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:34:42'!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber 

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:34:42' prior: 50669880!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	self assertAddressOfSupplier1At: 'San Martin' withNumber: 3322.
	
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	! !

!methodRemoval: ImportTest #assertAddressOfSupplier1At: stamp: 'joaco 11/26/2023 13:34:42'!
assertAddressOfSupplier1At: aStreetName

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: 3322.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:34:42' prior: 50669923!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber 

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:35:06'!
town: aTown assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber 

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:35:06' prior: 50669941!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	self town: 'Olivos' assertAddressOfSupplier1At: 'San Martin' withNumber: 3322.
	
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	! !

!methodRemoval: ImportTest #assertAddressOfSupplier1At:withNumber: stamp: 'joaco 11/26/2023 13:35:06'!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber 

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:35:06' prior: 50669986!
town: aTown assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber 

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:36:23' prior: 50670034!
town: aTown assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber 

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:36:32'!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber 

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:36:32' prior: 50670005!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	self assertAddressOfSupplier1At: 'San Martin' withNumber: 3322.
	
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	! !

!methodRemoval: ImportTest #town:assertAddressOfSupplier1At:withNumber: stamp: 'joaco 11/26/2023 13:36:32'!
town: aTown assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber 

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:36:58'!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber town: aTown  

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:36:58' prior: 50670090!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	self assertAddressOfSupplier1At: 'San Martin' withNumber: 3322 town: 'Olivos'.
	
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	! !

!methodRemoval: ImportTest #assertAddressOfSupplier1At:withNumber: stamp: 'joaco 11/26/2023 13:36:58'!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber 

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: 'Olivos'.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:36:58' prior: 50670118!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber town: aTown  

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:37:07' prior: 50670166!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber town: aTown  

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:37:21'!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber town: aTown zipCode: aZipCode   

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:37:21' prior: 50670137!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	self assertAddressOfSupplier1At: 'San Martin' withNumber: 3322 town: 'Olivos' zipCode: 1636.
	
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	! !

!methodRemoval: ImportTest #assertAddressOfSupplier1At:withNumber:town: stamp: 'joaco 11/26/2023 13:37:21'!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber town: aTown  

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: 1636.
	self assert: address province equals: 'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:37:21' prior: 50670203!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber town: aTown zipCode: aZipCode   

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: aZipCode.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:37:59'!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince    

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: aZipCode.
	self assert: address province equals: 'BsAs'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:37:59' prior: 50670222!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	self assertAddressOfSupplier1At: 'San Martin' withNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	! !

!methodRemoval: ImportTest #assertAddressOfSupplier1At:withNumber:town:zipCode: stamp: 'joaco 11/26/2023 13:37:59'!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber town: aTown zipCode: aZipCode   

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: aZipCode.
	self assert: address province equals: 'BsAs'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:37:59' prior: 50670271!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince    

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: aZipCode.
	self assert: address province equals: aProvince! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:39:00'!
assertAddressOfSupplierWithId123At: aStreetName withNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince    

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: aZipCode.
	self assert: address province equals: aProvince! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:39:00' prior: 50670291!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	self assertAddressOfSupplierWithId123At: 'San Martin' withNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
	
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	! !

!methodRemoval: ImportTest #assertAddressOfSupplier1At:withNumber:town:zipCode:province: stamp: 'joaco 11/26/2023 13:39:00'!
assertAddressOfSupplier1At: aStreetName withNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince    

	| supplier address |
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	address := supplier addressAt: aStreetName ifNone: [self fail].
	self assert: address streetName equals: aStreetName.
	self assert: address streetNumber equals: aStreetNumber.
	self assert: address town equals: aTown.
	self assert: address zipCode equals: aZipCode.
	self assert: address province equals: aProvince!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:11'!
ERROR!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:39:11'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:11'!
ERROR!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:39:33' prior: 50670363!
test15ValidSupplierWithAddressDataIsImportedCorrectly
	
	SupplierImporter valueFrom: self validSupplierWithAddressData into: system.
	self assertAddressOfSupplierWithId123At: 'San Martin' withNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.! !

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:36'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:39:38'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:41:24' prior: 50667208!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	|supplier|
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedOneNewCustomersForSupplier.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'.
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	
		
	


	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:41:53'!
assertCustomerOfSupplierWithID123

	|supplier|
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedOneNewCustomersForSupplier.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:41:53' prior: 50670632!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	self assertCustomerOfSupplierWithID123.
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	
		
	


	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:42:00' prior: 50670662!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	self assertCustomerOfSupplierWithID123.
		
	


	! !

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:42:01'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:42:51'!
assertPepeSanchezIsCustomerOfSupplierWithID123

	|supplier|
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedOneNewCustomersForSupplier.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:42:51' prior: 50670672!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	self assertPepeSanchezIsCustomerOfSupplierWithID123.
		
	


	! !

!methodRemoval: ImportTest #assertCustomerOfSupplierWithID123 stamp: 'joaco 11/26/2023 13:42:51'!
assertCustomerOfSupplierWithID123

	|supplier|
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedOneNewCustomersForSupplier.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'!
!ImportTest methodsFor: 'assertions' stamp: 'joaco 11/26/2023 13:44:41'!
assertPepeSanchezWasImportedAsCustomerOfSupplierWithID123

	|supplier|
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedOneNewCustomersForSupplier.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'joaco 11/26/2023 13:44:41' prior: 50670808!
test05ValidSupplierWithNewCustomerDataIsImportedCorrectly
	
	SupplierImporter valueFrom: self validSupplierWithNewCustomerData into: system.
	
	self assertPepeSanchezWasImportedAsCustomerOfSupplierWithID123.
		
	


	! !

!methodRemoval: ImportTest #assertPepeSanchezIsCustomerOfSupplierWithID123 stamp: 'joaco 11/26/2023 13:44:41'!
assertPepeSanchezIsCustomerOfSupplierWithID123

	|supplier|
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	self assertImportedOneNewCustomersForSupplier.
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 13:44:43'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'joaco 11/26/2023 13:44:59' prior: 50670830!
assertPepeSanchezWasImportedAsCustomerOfSupplierWithID123

	|supplier|
	
	
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'
		
		self assertImportedOneNewCustomersForSupplier.! !
!ImportTest methodsFor: 'assertions' stamp: 'joaco 11/26/2023 13:45:04' prior: 50670981!
assertPepeSanchezWasImportedAsCustomerOfSupplierWithID123

	|supplier|
	
	
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'
		
	self assertImportedOneNewCustomersForSupplier.! !
!ImportTest methodsFor: 'assertions' stamp: 'joaco 11/26/2023 13:45:08' prior: 50670995!
assertPepeSanchezWasImportedAsCustomerOfSupplierWithID123

	|supplier|
	
	
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'.
		
	self assertImportedOneNewCustomersForSupplier.! !
!ImportTest methodsFor: 'assertions' stamp: 'joaco 11/26/2023 13:45:35'!
assertPepeSanchezIsCustomerOfSupplierWithID123

	|supplier|
	
	
	
	supplier := system supplierWithIdentificationType: 'D' number: '123'.
	
	
	
	self
		assertCustomerOf: supplier 
		withName: 'Pepe'
		lastName: 'Sanchez' 
		identificationType: 'D'
		identificationNumber: '22333444'! !
!ImportTest methodsFor: 'assertions' stamp: 'joaco 11/26/2023 13:45:35' prior: 50671009!
assertPepeSanchezWasImportedAsCustomerOfSupplierWithID123

	self assertPepeSanchezIsCustomerOfSupplierWithID123.
		
	self assertImportedOneNewCustomersForSupplier.! !
!ImportTest methodsFor: 'assertions' stamp: 'joaco 11/26/2023 13:45:48' prior: 50671035!
assertPepeSanchezWasImportedAsCustomerOfSupplierWithID123

	
		
	self assertImportedOneNewCustomersForSupplier.
	
	self assertPepeSanchezIsCustomerOfSupplierWithID123.! !
!ImportTest methodsFor: 'assertions' stamp: 'joaco 11/26/2023 13:45:52' prior: 50671043!
assertPepeSanchezWasImportedAsCustomerOfSupplierWithID123
	
	self assertImportedOneNewCustomersForSupplier.
	
	self assertPepeSanchezIsCustomerOfSupplierWithID123.! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:46:29' prior: 50668888!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	
	
	self validSupplierWithExistingCustomerData.
	
	self assertPepeSanchezIsCustomerOfSupplierWithID123.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:46:33' prior: 50671061!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	
	self validSupplierWithExistingCustomerData.
	
	self assertPepeSanchezIsCustomerOfSupplierWithID123.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:46:34' prior: 50671070!
test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly
	self validSupplierWithExistingCustomerData.
	
	self assertPepeSanchezIsCustomerOfSupplierWithID123.
	! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:47:44'!
importValidCustomers

	^ CustomerImporter valueFrom: self validImportData into: system! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:47:44' prior: 50669607!
test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields
	
	
	self importValidCustomers.
	
	self shouldFailImporting: self existingCustomerForSupplierWithMoreThanThreeFields
	usingImporter: SupplierImporter
	messageText: SupplierImporter invalidExistingCustomerRecordErrorDescription
	asserting: [		self assertImportedOneSupplierWithoutExistingCustomer		].! !
!ImportTest methodsFor: 'test data' stamp: 'joaco 11/26/2023 13:47:44' prior: 50668651!
validSupplierWithExistingCustomerData

	self importValidCustomers.
	
	SupplierImporter valueFrom: ( ReadStream on: 'S,Supplier1,D,123
EC,D,22333444') into: system! !
!ImportTest methodsFor: 'tests' stamp: 'joaco 11/26/2023 13:47:44' prior: 50664673!
test01ValidDataIsImportedCorrectly

	self importValidCustomers.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:47:44' prior: 50669424!
test12CanNotImportExistingCustomerRecordWithLessThanThreeFields
	
	
	self importValidCustomers.
	
	self shouldFailImporting: self existingCustomerRecordForSupplierWithLessThanThreeFields
	usingImporter: SupplierImporter
	messageText: SupplierImporter 			invalidExistingCustomerRecordErrorDescription
	asserting: [	self assertImportedOneSupplierWithoutExistingCustomer		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 13:47:44' prior: 50669112!
test11DoesNotImportRecordsStartingWithECButMoreCharacters
	
	self importValidCustomers.
	
	self shouldFailImporting: self invalidExistingCustomerRecordStartData 
	usingImporter: SupplierImporter
	messageText: SupplierImporter invalidRecordTypeErrorDescription
	asserting: [	self assertImportedOneSupplierWithoutExistingCustomer		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:33:11'!
invalidAddressRecordForSupplierStartData

	^ ReadStream on: 'S,Supplier1,D,123
Ah re loco,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:33:11' prior: 50664921!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	| stream supplier |
		
	stream := self invalidAddressRecordForSupplierStartData.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:33:14' prior: 50671161!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	| supplier |
		
	self should: [SupplierImporter valueFrom: self invalidAddressRecordForSupplierStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:34:43' prior: 50671181!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	self should: [SupplierImporter valueFrom: self invalidAddressRecordForSupplierStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			self assert: (system supplierWithIdentificationType: 'D' number: '123') isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:35:53'!
addressRecordForSupplierWithLessThanSixFields

	^ ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:35:53' prior: 50664901!
test17CanNotImportAddressRecordWithLessThanSixFields
	| stream supplier |
		
	stream := self addressRecordForSupplierWithLessThanSixFields.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:35:55' prior: 50671224!
test17CanNotImportAddressRecordWithLessThanSixFields
	| supplier |
		
	self should: [SupplierImporter valueFrom: self addressRecordForSupplierWithLessThanSixFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:35:58' prior: 50671244!
test17CanNotImportAddressRecordWithLessThanSixFields
	self should: [SupplierImporter valueFrom: self addressRecordForSupplierWithLessThanSixFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			self assert: (system supplierWithIdentificationType: 'D' number: '123') isAddressesEmpty.
		]! !

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 14:36:01'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:36:27'!
addressRecordForSupplierWithMoreThanSixFields

	^ ReadStream on: 'S,Supplier1,D,123
A,San Martin,3322,Olivos,1636, BsAs, Argentina'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:36:27' prior: 50664863!
test18CanNotImportAddressRecordWithMoreThanSixFields
	| stream supplier |
		
	stream := self addressRecordForSupplierWithMoreThanSixFields.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:36:30' prior: 50671401!
test18CanNotImportAddressRecordWithMoreThanSixFields
	| supplier |
		
	self should: [SupplierImporter valueFrom: self addressRecordForSupplierWithMoreThanSixFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			supplier := system supplierWithIdentificationType: 'D' number: '123'.
			self assert: supplier isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:36:33' prior: 50671421!
test18CanNotImportAddressRecordWithMoreThanSixFields
	self should: [SupplierImporter valueFrom: self addressRecordForSupplierWithMoreThanSixFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assertImporterdRightNumberOfSuppliers.
			self assert: (system supplierWithIdentificationType: 'D' number: '123') isAddressesEmpty.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:37:07'!
assertImportedOneSupplierWithoutAddresses

	self assertImporterdRightNumberOfSuppliers.
			self assert: (system supplierWithIdentificationType: 'D' number: '123') isAddressesEmpty! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:37:07' prior: 50671263!
test17CanNotImportAddressRecordWithLessThanSixFields
	self should: [SupplierImporter valueFrom: self addressRecordForSupplierWithLessThanSixFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assertImportedOneSupplierWithoutAddresses.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:37:07' prior: 50671200!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	self should: [SupplierImporter valueFrom: self invalidAddressRecordForSupplierStartData into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.
			self assertImportedOneSupplierWithoutAddresses.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:37:07' prior: 50671440!
test18CanNotImportAddressRecordWithMoreThanSixFields
	self should: [SupplierImporter valueFrom: self addressRecordForSupplierWithMoreThanSixFields into: system]
	raise: Error
	withExceptionDo: [ :anError | 
			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.
			self assertImportedOneSupplierWithoutAddresses.
		]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:37:44'!
addressWithoutSupplier

	^ ReadStream on: 'A,San Martin,3322,Olivos,1636, BsAs'! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:37:44' prior: 50664015!
test19CanNotImportAddressWithoutSupplier
	| stream |
		
	stream := self addressWithoutSupplier.


	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer .	]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:37:58' prior: 50671516!
test19CanNotImportAddressWithoutSupplier
	self should: [SupplierImporter valueFrom: self addressWithoutSupplier into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer .	]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:39:21' prior: 50671481!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	self shouldFailImporting: self invalidAddressRecordForSupplierStartData
	usingImporter: SupplierImporter 
	messageText: SupplierImporter invalidRecordTypeErrorDescription
	asserting: [		self assertImportedOneSupplierWithoutAddresses	.	]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:39:25' prior: 50671541!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	self shouldFailImporting: self invalidAddressRecordForSupplierStartData
	usingImporter: SupplierImporter 
	messageText: SupplierImporter invalidRecordTypeErrorDescription
	asserting: [		self assertImportedOneSupplierWithoutAddresses		].! !

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test01ValidSupplierDataIsImportedCorrectly stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test02DoesNotImportRecordsStartingWithSButMoreCharacters stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test03CanNotImportSupplierRecordWithLessThanFourFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test04CanNotImportSupplierRecordWithMoreThanFourFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test05ValidSupplierWithNewCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test06DoesNotImportRecordsStartingWithNCButMoreCharacters stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test07CanNotImportNewCustomerRecordWithLessThanFiveFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test08CanNotImportNewCustomerRecordWithMoreThanFiveFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test09CanNotImportNewCustomerWithoutSupplier stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test10ValidSupplierWithExistingCustomerDataIsImportedCorrectly stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test11DoesNotImportRecordsStartingWithECButMoreCharacters stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test12CanNotImportExistingCustomerRecordWithLessThanThreeFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test13CanNotImportExistingCustomerRecordWithMoreThanThreeFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test14CanNotImportExistingCustomerWithoutSupplier stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test15ValidSupplierWithAddressDataIsImportedCorrectly stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test16DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test17CanNotImportAddressRecordWithLessThanSixFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test18CanNotImportAddressRecordWithMoreThanSixFields stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test19CanNotImportAddressWithoutSupplier stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!

!testRun: #ImportTest #test20CanNotImportEmptyLine stamp: 'joaco 11/26/2023 14:39:26'!
PASSED!
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:39:38' prior: 50671554!
test16DoesNotImportRecordsStartingWithAButMoreCharacters
	self 
		shouldFailImporting: self invalidAddressRecordForSupplierStartData
		usingImporter: SupplierImporter 
		messageText: SupplierImporter invalidRecordTypeErrorDescription
		asserting: [		self assertImportedOneSupplierWithoutAddresses		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:40:45' prior: 50671466!
test17CanNotImportAddressRecordWithLessThanSixFields
	
	self shouldFailImporting: self addressRecordForSupplierWithLessThanSixFields
	usingImporter: SupplierImporter 
	messageText: SupplierImporter invalidAddressRecordErrorDescription
	asserting: [		self assertImportedOneSupplierWithoutAddresses		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:40:56' prior: 50671692!
test17CanNotImportAddressRecordWithLessThanSixFields
	
	self
		shouldFailImporting: self addressRecordForSupplierWithLessThanSixFields
		usingImporter: SupplierImporter 
		messageText: SupplierImporter invalidAddressRecordErrorDescription
		asserting: [		self assertImportedOneSupplierWithoutAddresses		].! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:41:57' prior: 50671496!
test18CanNotImportAddressRecordWithMoreThanSixFields
	self shouldFailImporting: self addressRecordForSupplierWithMoreThanSixFields 
	usingImporter: SupplierImporter
	messageText: SupplierImporter invalidAddressRecordErrorDescription
	asserting: [	self assertImportedOneSupplierWithoutAddresses.]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:42:07' prior: 50671718!
test18CanNotImportAddressRecordWithMoreThanSixFields
	self
		shouldFailImporting: self addressRecordForSupplierWithMoreThanSixFields 
		usingImporter: SupplierImporter
		messageText: SupplierImporter invalidAddressRecordErrorDescription
		asserting: [	self assertImportedOneSupplierWithoutAddresses.]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:42:31' prior: 50671529!
test19CanNotImportAddressWithoutSupplier
	self 
		should: [SupplierImporter valueFrom: self addressWithoutSupplier into: system]
		raise: Error
		withExceptionDo: [ :anError | 			
			self assert: anError messageText equals: SupplierImporter cannotImportWithoutCustomer.
			]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:42:53' prior: 50664175!
test20CanNotImportEmptyLine
	| stream |
		
	stream := self emptyLine.
	self should: [SupplierImporter valueFrom: stream into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.	]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:42:56' prior: 50671756!
test20CanNotImportEmptyLine
	self should: [SupplierImporter valueFrom: self emptyLine into: system]
	raise: Error
	withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.	]! !
!ImportTest methodsFor: 'tests-suppliers' stamp: 'joaco 11/26/2023 14:43:40' prior: 50671768!
test20CanNotImportEmptyLine
	self 
		should: [SupplierImporter valueFrom: self emptyLine into: system]
		raise: Error
		withExceptionDo: [ :anError | 			
			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription
			]! !

----QUIT----(26 November 2023 14:43:49) CuisUniversity-CustomerImporter.image priorSource: 10718663!

----STARTUP---- (27 November 2023 14:39:36) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-CustomerImporter.image!


----QUIT----(27 November 2023 14:39:51) CuisUniversity-CustomerImporter.image priorSource: 10884448!