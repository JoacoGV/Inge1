

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (14 September 2023 17:45:03) as /home/clinux01/Documentos/Inge/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/Documentos/Inge/linux64/Numeros-Ejercicio.st----!
!Entero methodsFor: 'arithmetic operations' stamp: 'AB 9/14/2023 17:51:26' prior: 50650760!
multiplyToEntero: anEnteroFirstMultiplier

^Entero with: anEnteroFirstMultiplier integerValue * value.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:51:28'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'AB 9/14/2023 17:51:28'!
ERROR!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:51:28'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:51:28'!
ERROR!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:51:28'!
ERROR!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:51:28'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'AB 9/14/2023 17:51:28'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'AB 9/14/2023 17:51:28'!
PASSED!
!Entero methodsFor: 'arithmetic operations' stamp: 'AB 9/14/2023 17:51:43' prior: 50650727!
addToEntero: anEnteroFirstAdder

			^Entero with: anEnteroFirstAdder integerValue + value.
! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:52:20'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'AB 9/14/2023 17:52:20'!
ERROR!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:52:20'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:52:20'!
ERROR!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:52:20'!
ERROR!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:52:20'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'AB 9/14/2023 17:52:20'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:52:23'!
ERROR!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:52:47'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:53:35'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'AB 9/14/2023 17:53:35'!
ERROR!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:53:35'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:53:35'!
ERROR!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:53:35'!
ERROR!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:53:35'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'AB 9/14/2023 17:53:35'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:53:40'!
ERROR!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:53:51'!
ERROR!
!EnteroPositivo methodsFor: 'as yet unclassified' stamp: 'AB 9/14/2023 17:56:14'!
CrearFraccion:aDividend
	
	^self subclassResponsibility .! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:56:16'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'AB 9/14/2023 17:56:16'!
ERROR!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:56:16'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:56:16'!
ERROR!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:56:16'!
ERROR!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 17:56:16'!
ERROR!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'AB 9/14/2023 17:56:16'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:56:22'!
ERROR!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 17:57:12'!
ERROR!
!Fraccion class methodsFor: 'intance creation' stamp: 'AB 9/14/2023 18:02:46' prior: 50651249!
with: aDividend over: aDivisor
	^aDivisor CrearFraccion: aDividend .
	"| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue:[ ^aDividend negated / aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator"! !
!EnterosMayoresAUno methodsFor: 'as yet unclassified' stamp: 'AB 9/14/2023 18:02:58' prior: 50651000 overrides: 50651690!
CrearFraccion: aDividend 

	| greatestCommonDivisor numerator denominator |
	
	aDividend isZero ifTrue: [ ^aDividend ].
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: self. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := self // greatestCommonDivisor.
	denominator isOne ifTrue: [ ^numerator ].
	^Fraccion new initializeWith: numerator over: denominator! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'AB 9/14/2023 18:03:00'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'AB 9/14/2023 18:03:00'!
PASSED!
!Fraccion methodsFor: 'initialization' stamp: 'AB 9/14/2023 18:03:56' prior: 50651209!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	"aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ]."
	
	numerator := aNumerator.
	denominator := aDenominator ! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'AB 9/14/2023 18:03:58'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'AB 9/14/2023 18:03:58'!
PASSED!
!EnterosMayoresAUno methodsFor: 'as yet unclassified' stamp: 'AB 9/14/2023 18:09:34' prior: 50651860 overrides: 50651690!
CrearFraccion: aDividend 

	| greatestCommonDivisor numerator denominator |
	
	aDividend isZero ifTrue: [ ^aDividend ].
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: self. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := self // greatestCommonDivisor.
	"denominator isOne ifTrue: [ ^numerator ]."
	^Fraccion new initializeWith: numerator over: denominator! !
!EnterosMayoresAUno methodsFor: 'as yet unclassified' stamp: 'AB 9/14/2023 18:10:31' prior: 50652165 overrides: 50651690!
CrearFraccion: aDividend 

	| greatestCommonDivisor numerator denominator |
	
	aDividend isZero ifTrue: [ ^aDividend ].
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: self. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := self // greatestCommonDivisor.
	"denominator isOne ifTrue: [ ^numerator ]."
	denominator  	CrearFraccion: numerator.
	^Fraccion new initializeWith: numerator over: denominator! !
!EnterosMayoresAUno methodsFor: 'as yet unclassified' stamp: 'AB 9/14/2023 18:11:20' prior: 50652182 overrides: 50651690!
CrearFraccion: aDividend 

	| greatestCommonDivisor numerator denominator |
	
	aDividend isZero ifTrue: [ ^aDividend ].
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: self. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := self // greatestCommonDivisor.
	denominator isOne ifTrue: [ ^numerator ].
	^Fraccion new initializeWith: numerator over: denominator! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'AB 9/14/2023 18:11:25'!
PASSED!

Fraccion subclass: #Denominador
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Fraccion subclass: #Denominador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Denominador category: 'Numero-Exercise' stamp: 'AB 9/14/2023 18:13:55'!
Fraccion subclass: #Denominador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Fraccion subclass: #Numerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numerator category: 'Numero-Exercise' stamp: 'AB 9/14/2023 18:14:02'!
Fraccion subclass: #Numerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Denominador methodsFor: 'no messages' stamp: 'AB 9/14/2023 18:14:27' overrides: 50652012!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	"aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ]."
	
	
	denominator := aDenominator ! !
!Numerator methodsFor: 'no messages' stamp: 'AB 9/14/2023 18:14:33' overrides: 50652012!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	"aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ]."
	
	numerator := aNumerator.
	! !
!Fraccion methodsFor: 'initialization' stamp: 'AB 9/14/2023 18:14:53' prior: 50652012!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	"aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ]."
	
^self subclassResponsibility.! !
!Fraccion methodsFor: 'initialization' stamp: 'AB 9/14/2023 18:14:58' prior: 50652408!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	"aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ]."
	
	^self subclassResponsibility.! !

!classRemoval: #Denominador stamp: 'AB 9/14/2023 18:15:30'!
Fraccion subclass: #Denominador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numerator stamp: 'AB 9/14/2023 18:15:32'!
Fraccion subclass: #Numerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Fraccion methodsFor: 'initialization' stamp: 'AB 9/14/2023 18:03:56' prior: 50652423!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	"aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ]."
	
	numerator := aNumerator.
	denominator := aDenominator ! !

----STARTUP---- (28 September 2023 20:03:22) as /home/clinux01/Documentos/Inge/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/Documentos/Inge/linux64/TDDBabyStepsGame.st----!

TDDBabyStepsGameContador start!

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'AB 9/28/2023 20:28:34'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'AB 9/28/2023 20:31:58'!
test01UnNuevoContadorEmpiezaConValorCero

	| contador |
		
	contador := Contador new.
	self assert: 0 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:33:19'!
ERROR!
!Object methodsFor: 'intance creation' stamp: 'AB 9/28/2023 20:33:38'!
new
	self shouldBeImplemented.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:35:15'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:36:03'!
ERROR!

Object subclass: #Contador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #Contador category: 'TDDBabyStepsGameContador' stamp: 'AB 9/28/2023 20:36:37'!
Object subclass: #Contador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:36:40'!
ERROR!
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:36:48'!
valor
	self shouldBeImplemented.! !
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:36:56' prior: 50652173!
valor
	^0! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:37:01'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:37:01'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:37:05'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'AB 9/28/2023 20:37:05'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:37:05'!
ERROR!

!methodRemoval: TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:37:05'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'AB 9/28/2023 20:37:05'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:37:05'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:37:23'!
ERROR!
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:37:32'!
incrementar
	self shouldBeImplemented.! !

Object subclass: #Contador
	instanceVariableNames: 'val'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #Contador category: 'TDDBabyStepsGameContador' stamp: 'AB 9/28/2023 20:38:17'!
Object subclass: #Contador
	instanceVariableNames: 'val'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:38:22' prior: 50652177!
valor
	^val! !
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:39:51' prior: 50652228!
incrementar
	^val +1! !
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:40:05' prior: 50652245!
valor
val:=0.
	^val! !

TDDBabyStepsGameContador start!

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'AB 9/28/2023 20:40:25'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'AB 9/28/2023 20:40:37' prior: 50652136!
test01UnNuevoContadorEmpiezaConValorCero

	| contador |
		
	contador := Contador new.
	self assert: 0 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:40:39'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:40:39'!
ERROR!

!classRemoval: #Contador stamp: 'AB 9/28/2023 20:40:57'!
Object subclass: #Contador
	instanceVariableNames: 'val'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classRemoval: #TDDBabyStepsContadorTest stamp: 'AB 9/28/2023 20:40:57'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

TDDBabyStepsGameContador  start!

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'AB 9/28/2023 20:41:12'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'AB 9/28/2023 20:41:21'!
test01UnNuevoContadorEmpiezaConValorCero

	| contador |
		
	contador := Contador new.
	self assert: 0 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:41:25'!
ERROR!

Object subclass: #Contador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #Contador category: 'TDDBabyStepsGameContador' stamp: 'AB 9/28/2023 20:41:47'!
Object subclass: #Contador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:41:52'!
ERROR!
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:42:33'!
valor
	self shouldBeImplemented.! !
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:42:45' prior: 50652331!
valor
	^0.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:42:49'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:42:49'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:42:51'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'AB 9/28/2023 20:42:51'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:42:51'!
ERROR!

!methodRemoval: TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:42:51'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'AB 9/28/2023 20:42:51'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:42:51'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:42:58'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:42:58'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:43:06'!
ERROR!
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:43:13'!
incrementar
	self shouldBeImplemented.! !
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:43:36' prior: 50652395!
incrementar
	^1.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:43:42'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:43:50'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:43:50'!
FAILURE!

Object subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #Contador category: 'TDDBabyStepsGameContador' stamp: 'AB 9/28/2023 20:44:36'!
Object subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:44:47' prior: 50652400!
incrementar
	^valor+1.
	! !
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:44:52' prior: 50652335!
valor
	^valor.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:44:54'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:44:54'!
ERROR!
!Contador methodsFor: 'intialice' stamp: 'AB 9/28/2023 20:45:35' overrides: 16920235!
initialize
	valor := 0.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:46:27'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:46:27'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:46:27'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:46:41'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:46:41'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:46:41'!
FAILURE!
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:47:05' prior: 50652432!
valor
	^valor := valor +1.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:47:07'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:47:07'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:47:07'!
FAILURE!
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:47:24' prior: 50652471!
valor
	^valor.! !
!Contador methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:47:32' prior: 50652428!
incrementar
	^valor := 1.
	! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:47:35'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:47:35'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'AB 9/28/2023 20:47:38'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'AB 9/28/2023 20:47:38'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'AB 9/28/2023 20:47:38'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'AB 9/28/2023 20:47:38'!
FAILURE!

!methodRemoval: TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'AB 9/28/2023 20:47:38'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'AB 9/28/2023 20:47:38'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'AB 9/28/2023 20:47:38'!
FAILURE!

!classRemoval: #Contador stamp: 'AB 9/28/2023 20:53:59'!
Object subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classRemoval: #TDDBabyStepsContadorTest stamp: 'AB 9/28/2023 20:53:59'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

TDDBabyStepsGameRot13 start!

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'AB 9/28/2023 20:54:22'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 20:55:59'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:56:30'!
ERROR!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:56:42'!
asRot13
	self shouldBeImplemented.! !
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:57:54' prior: 50652587!
asRot13
	^$a.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:57:56'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:58:09' prior: 50652592!
asRot13
	^$n.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:58:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:58:11'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:58:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:58:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:58:22'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 20:58:22'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:58:22'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:58:22'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 20:58:22'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:58:22'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 20:59:37' prior: 50652600!
asRot13
	self =$a ifTrue:[^$n].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:59:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:59:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:59:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:59:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 20:59:41'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 20:59:41'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 20:59:41'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 20:59:41'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 20:59:41'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 20:59:41'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:00:22' prior: 50652654!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:30'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:00:30'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:30'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:30'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:00:30'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:30'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:00:54' prior: 50652709!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:00:58'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:00:58'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:00:58'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:00:58'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:00:58'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:00:58'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:01:18' prior: 50652774!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	self =$` ifTrue: [^$`].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:01:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:01:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:01:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:01:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:01:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:01:36'!
PASSED!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:01:45' prior: 50652843!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	self =$` ifTrue: [^$`].
	^$z.! !
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:01:56' prior: 50652875!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	self =$` ifTrue: [^self].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:02:07'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:02:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:02:07'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:02:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:02:07'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:02:07'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:02:24'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:02:37' prior: 50652882!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	self =$` ifTrue: [^self].
	self =${ ifTrue: [^self].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:02:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:02:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:02:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:02:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:02:42'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:02:42'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:42'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:42'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:02:42'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:02:42'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:03:25' prior: 50652938!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	self =$` ifTrue: [^self].
	self =${ ifTrue: [^self].
	self =$A ifTrue:[^$N].
	self =$M ifTrue:[^$Z].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:03:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:03:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:03:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:03:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:30'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:03:30'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:30'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:30'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:03:30'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:30'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:03:53' prior: 50653031!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	self =$` ifTrue: [^self].
	self =${ ifTrue: [^self].
	self =$A ifTrue:[^$N].
	self =$M ifTrue:[^$Z].
	self =$N ifTrue:[^$A].
	self =$Z ifTrue:[^$M].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:03:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:03:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:55'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:03:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:03:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:03:58'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:03:58'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:03:58'!
ERROR!

!methodRemoval: TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:03:58'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:03:58'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:03:58'!
ERROR!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:04:17' prior: 50653137!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	self =$` ifTrue: [^self].
	self =${ ifTrue: [^self].
	self =$A ifTrue:[^$N].
	self =$M ifTrue:[^$Z].
	self =$N ifTrue:[^$A].
	self =$Z ifTrue:[^$M].
	self ='' ifTrue: [^self].
	^$z.! !

!testRun: #CharacterTest #testCaseConversion stamp: 'AB 9/28/2023 21:04:18'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'AB 9/28/2023 21:04:18'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'AB 9/28/2023 21:04:18'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'AB 9/28/2023 21:04:18'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'AB 9/28/2023 21:04:18'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'AB 9/28/2023 21:04:18'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'AB 9/28/2023 21:04:18'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'AB 9/28/2023 21:04:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:04:21'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:04:27'!
ERROR!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:05:00' prior: 50653242!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	self =$` ifTrue: [^self].
	self =${ ifTrue: [^self].
	self =$A ifTrue:[^$N].
	self =$M ifTrue:[^$Z].
	self =$N ifTrue:[^$A].
	self =$Z ifTrue:[^$M].
	self ='' ifTrue: [^self].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:05:03'!
ERROR!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:05:21'!
asRot13
	self shouldBeImplemented.! !
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:05:31' prior: 50653282!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	self =$` ifTrue: [^self].
	self =${ ifTrue: [^self].
	self =$A ifTrue:[^$N].
	self =$M ifTrue:[^$Z].
	self =$N ifTrue:[^$A].
	self =$Z ifTrue:[^$M].
	^$z.! !
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:05:38' prior: 50653297!
asRot13
	self ='' ifTrue: [^self].! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:05:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:05:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:05:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:05:40'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:05:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:05:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:05:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:05:43'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:05:43'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:05:43'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:05:43'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:05:43'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:05:43'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:06:14'!
FAILURE!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:06:48' prior: 50653313!
asRot13
	self ='' ifTrue: [^self].
	self ='a' ifTrue:[^'n'].! !
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:07:02' prior: 50653433!
asRot13
	self ='' ifTrue: [^self].
	self ='a' ifTrue:[^'n'].
	self ='M' ifTrue:[^'Z']
	.! !
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:07:05' prior: 50653438!
asRot13
	self ='' ifTrue: [^self].
	self ='a' ifTrue:[^'n'].
	self ='M' ifTrue:[^'Z'].! !
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:07:25' prior: 50653444!
asRot13
	self ='' ifTrue: [^self].
	self ='a' ifTrue:[^'n'].
	self ='M' ifTrue:[^'Z'].
	self ='n' ifTrue:[^'a'].
	self ='{' ifTrue:[^'{'].! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:07:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:07:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:07:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:07:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:07:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:07:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:07:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:07:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:07:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:07:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:07:27'!
PASSED!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:09:04' prior: 50653450!
asRot13
	self ='' ifTrue: [^self].
	self ='a' ifTrue:[^'n'].
	self ='M' ifTrue:[^'Z'].
	self ='n' ifTrue:[^'a'].
	self ='{' ifTrue:[^'{'].
	"(self at: 1)" ! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:09:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:09:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:09:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:09:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:09:24'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:09:24'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:09:24'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:09:24'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:09:24'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:09:24'!
FAILURE!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:09:50' prior: 50653502!
asRot13
	self ='' ifTrue: [^self].
	self ='a' ifTrue:[^'n'].
	self ='M' ifTrue:[^'Z'].
	self ='n' ifTrue:[^'a'].
	self ='{' ifTrue:[^'{'].
	self ='az' ifTrue:[^'nm'].
	"(self at: 1)" ! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:09:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:09:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:09:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:09:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:09:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:09:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:09:54'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:09:54'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:09:54'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:09:54'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:09:54'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:09:54'!
FAILURE!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:10:17' prior: 50653618!
asRot13
	self ='' ifTrue: [^self].
	self ='a' ifTrue:[^'n'].
	self ='M' ifTrue:[^'Z'].
	self ='n' ifTrue:[^'a'].
	self ='{' ifTrue:[^'{'].
	self ='az' ifTrue:[^'nm'].
	self ='hOlA!!' ifTrue:[^'uByN!!'].
	"(self at: 1)" ! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:10:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:10:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:10:31'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:10:31'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'AB 9/28/2023 21:10:31'!
FAILURE!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:13:22' prior: 50653744!
asRot13
	self ='' ifTrue: [^self].
	self inject: '' into:  [:acc :char | acc, char asRot13].! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:13:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:13:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:13:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:13:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:13:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:13:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:13:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:13:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:13:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:13:35'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:13:35'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:13:35'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'AB 9/28/2023 21:13:35'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:13:46'!
ERROR!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:15:41' prior: 50653865!
asRot13
	self ='' ifTrue: [^self].
	self inject: '' into:  [:acc :char | acc, char asRot13 asString ].! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:15:43'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:15:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:15:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:15:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:15:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:15:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:15:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:15:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:15:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:15:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:15:49'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:15:49'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:15:49'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'AB 9/28/2023 21:15:49'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:15:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:16:26'!
FAILURE!

self inject: '' into:  [:acc :char | acc, char asRot13 asString ].!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:17:20'!
FAILURE!

!classRemoval: #TDDBabyStepsRot13Test stamp: 'AB 9/28/2023 21:18:10'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!

TDDBabyStepsGameRot13 start!

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'AB 9/28/2023 21:18:12'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:18:16'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:18:33' prior: 50653302!
asRot13
	self =$a ifTrue:[^$n].
! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:18:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:18:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:18:37'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:18:37'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:18:37'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:18:37'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:18:37'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:18:37'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:19:11' prior: 50654023!
asRot13
	self =$a ifTrue:[^$n].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:19:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:19:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:19:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:20:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:20:12'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:20:12'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:20:12'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:20:12'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:20:12'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:20:12'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:20:19'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:20:34' prior: 50654069!
asRot13
	self =$a ifTrue:[^$n].
	
	self =$n ifTrue: [^$a].
	
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:20:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:20:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:20:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:20:35'!
PASSED!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:20:44' prior: 50654129!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	^$z.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:21:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:21:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:21:05'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:21:05'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:21:05'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:21:05'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:21:05'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:21:05'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:21:18' prior: 50654152!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	^$z.! !
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:21:51' prior: 50654199!
asRot13
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	^$z.! !
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:25:38' prior: 50654205!
asRot13
	self asciiValue between:($a asciiValue ) and: ($n asciiValue). 
	self asciiValue +13 
	self =$a ifTrue:[^$n].
	self =$n ifTrue: [^$a].
	self =$z ifTrue: [^$m].
	^$z.! !
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:28:13' prior: 50654211!
asRot13
	(self asciiValue between:($a asciiValue ) and: ($m asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($n asciiValue ) and: ($z asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		].
	! !
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:28:25' prior: 50654220!
asRot13
	(self asciiValue between:($a asciiValue ) and: ($m asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($n asciiValue ) and: ($z asciiValue)) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:28:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:28:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:28:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:28:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:28:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:28:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:28:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:28:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:28:31'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:28:31'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:28:31'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:28:31'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:31:22' prior: 50654231!
asRot13
	(self asciiValue  < $m asciiValue) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
		^(self asciiValue - 13) asCharacter
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:24'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:24'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:30'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:30'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:31:44' prior: 50654296!
asRot13
	(self asciiValue  <= $m asciiValue) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
		^(self asciiValue - 13) asCharacter
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:31:52'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:31:52'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:31:52'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:31:52'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:31:52'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:31:52'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:28:25' prior: 50654353!
asRot13
	(self asciiValue between:($a asciiValue ) and: ($m asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($n asciiValue ) and: ($z asciiValue)) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	! !
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:33:41' prior: 50654420!
asRot13
	(self asciiValue between:($a asciiValue ) and: ($m asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue  >= $n asciiValue ) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	^self.
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:33:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:33:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:33:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:33:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:33:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:33:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:33:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:33:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:33:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:33:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:33:58'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:33:58'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:33:58'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:33:58'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:33:58'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:33:58'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:34:09' prior: 50654431!
asRot13
	(self asciiValue between:($a asciiValue ) and: ($m asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($n asciiValue ) and: ($z asciiValue)) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	^self.
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:34:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:34:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:34:10'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:34:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:34:13'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:34:13'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:13'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:13'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:34:13'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:13'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:34:24'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:36:02' prior: 50654511!
asRot13
	(self asciiValue between:($a asciiValue ) and: ($m asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($n asciiValue ) and: ($z asciiValue)) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	(self asciiValue <= $M) ifTrue: [
		^(self asciiValue + 13) asCharacter
		].
	(self asciiValue >= $N) ifTrue: [
				^(self asciiValue - 13) asCharacter
		].
	^self.
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:36:05'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:36:05'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:05'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:26'!
ERROR!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:36:51' prior: 50654613!
asRot13
	(self asciiValue between:($a asciiValue ) and: ($m asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($n asciiValue ) and: ($z asciiValue)) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	(self asciiValue <= $M asciiValue )  ifTrue: [
		^(self asciiValue + 13) asCharacter
		].
	(self asciiValue >= $N asciiValue ) ifTrue: [
				^(self asciiValue - 13) asCharacter
		].
	^self.
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:36:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:36:54'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:36:54'!
PASSED!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:37:32' prior: 50654663!
asRot13
	(self asciiValue between:($a asciiValue ) and: ($m asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($n asciiValue ) and: ($z asciiValue)) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	(self asciiValue between:($A asciiValue ) and: ($M asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($N asciiValue ) and: ($Z asciiValue)) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	^self.
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:37:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:37:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:37:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:58'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:37:58'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:58'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:37:58'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:36:51' prior: 50654709!
asRot13
	(self asciiValue between:($a asciiValue ) and: ($m asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($n asciiValue ) and: ($z asciiValue)) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	(self asciiValue <= $M asciiValue )  ifTrue: [
		^(self asciiValue + 13) asCharacter
		].
	(self asciiValue >= $N asciiValue ) ifTrue: [
				^(self asciiValue - 13) asCharacter
		].
	^self.
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:43:11'!
FAILURE!
!Character methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:37:32' prior: 50654807!
asRot13
	(self asciiValue between:($a asciiValue ) and: ($m asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($n asciiValue ) and: ($z asciiValue)) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	(self asciiValue between:($A asciiValue ) and: ($M asciiValue)) ifTrue: [
		^(self asciiValue + 13) asCharacter
		]. 
	(self asciiValue between:($N asciiValue ) and: ($Z asciiValue)) ifTrue: [
		^(self asciiValue - 13) asCharacter
		].
	^self.
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:44:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:44:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:44:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:44:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:19'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:44:19'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:19'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:44:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:44:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:44:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:45:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:45:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:45:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:45:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:45:08'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:45:08'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:45:08'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:45:08'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:46:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:46:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:47'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:46:47'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:46:47'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:46:53' prior: 50655070!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:46:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:46:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:46:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:46:54'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:46:54'!
PASSED!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:47:14' prior: 50653926!
asRot13
	self ='' ifTrue: [^self].
	"self inject: '' into:  [:acc :char | acc, char asRot13 asString ]."! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:47:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:47:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:47:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:47:16'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:47:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:47:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:47:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:47:18'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:47:18'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:47:18'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:47:18'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:47:18'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:47:18'!
FAILURE!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:47:46' prior: 50655125!
asRot13
	self ='' ifTrue: [^self].
	"self inject: '' into:  [:acc :char | acc, char asRot13 asString ]."
	(self at: 1) asRot13 asString.! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:47:49'!
FAILURE!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:48:11' prior: 50655244!
asRot13
	self ='' ifTrue: [^self].
	"self inject: '' into:  [:acc :char | acc, char asRot13 asString ]."
	^((self at: 1) asRot13) asString.! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:48:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:48:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:48:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:48:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:48:13'!
PASSED!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:48:21' prior: 50655255!
asRot13
	self ='' ifTrue: [^self].
	"self inject: '' into:  [:acc :char | acc, char asRot13 asString ]."
	^(self at: 1) asRot13 asString.! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:48:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:48:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:48:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:48:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:48:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:48:26'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:48:26'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:48:26'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:48:26'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:48:26'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:48:26'!
FAILURE!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:49:15' prior: 50655307!
asRot13
	self ='' ifTrue: [^self].
	"self inject: '' into:  [:acc :char | acc, char asRot13 asString ]."
	(self size = 1) ifTrue:[^(self at: 1) asRot13 asString].! !
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:50:03' prior: 50655423!
asRot13
	self ='' ifTrue: [^self].
	"self inject: '' into:  [:acc :char | acc, char asRot13 asString ]."
	(self size = 1) ifTrue:[^(self at: 1) asRot13 asString].
	^(self at: 1) asRot13 asString, (self at: 2) asRot13 asString.! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:50:05'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:50:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:50:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:50:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:50:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:50:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:50:09'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:50:09'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:50:09'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:50:09'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:50:09'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:50:09'!
FAILURE!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:50:26' prior: 50655431!
asRot13
	self inject: '' into:  [:acc :char | acc, char asRot13 asString ].
! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:50:28'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:50:32'!
FAILURE!
!String methodsFor: 'as yet unclassified' stamp: 'AB 9/28/2023 21:50:45' prior: 50655559!
asRot13
	^self inject: '' into:  [:acc :char | acc, char asRot13 asString ].
! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:51:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'AB 9/28/2023 21:51:07'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'AB 9/28/2023 21:51:07'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'AB 9/28/2023 21:51:07'!
PASSED!

----SNAPSHOT----(28 September 2023 21:52:53) CuisUniversity-5981.image priorSource: 10197292!

----SNAPSHOT----(28 September 2023 21:52:59) CuisUniversity-5981.image priorSource: 10369072!

----SNAPSHOT----(28 September 2023 21:53:09) CuisUniversity-5981.image priorSource: 10369167!

----QUIT----(28 September 2023 21:55:58) CuisUniversity-5981.image priorSource: 10369262!

----STARTUP---- (5 October 2023 17:39:09) as /home/clinux01/Documentos/Inge/linux64/CuisUniversity-5981.image!


!classRemoval: #TDDBabyStepsRot13Test stamp: 'AB 10/5/2023 17:39:13'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!

!classRemoval: #TDDBabyStepsGameView stamp: 'AB 10/5/2023 17:39:18'!
Object subclass: #TDDBabyStepsGameView
	instanceVariableNames: 'model stepResult gameJourney'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #OnPrematureDecisionStep stamp: 'AB 10/5/2023 17:39:18'!
TDDBabyStepsGameState subclass: #OnPrematureDecisionStep
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #OnNormalStep stamp: 'AB 10/5/2023 17:39:18'!
TDDBabyStepsGameState subclass: #OnNormalStep
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #GameStarting stamp: 'AB 10/5/2023 17:39:18'!
TDDBabyStepsGameState subclass: #GameStarting
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #GameEnded stamp: 'AB 10/5/2023 17:39:18'!
TDDBabyStepsGameState subclass: #GameEnded
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameState stamp: 'AB 10/5/2023 17:39:18'!
Object subclass: #TDDBabyStepsGameState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameBase stamp: 'AB 10/5/2023 17:39:19'!
Object subclass: #TDDBabyStepsGameBase
	instanceVariableNames: 'name casesToTest currentStep currentStepReturnMessage category score currentTest journey definition extraTest state prematureDecisionVerifierStrategy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameRot13 stamp: 'AB 10/5/2023 17:39:19'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameRot13
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGamePrimeFactors stamp: 'AB 10/5/2023 17:39:19'!
TDDBabyStepsGame subclass: #TDDBabyStepsGamePrimeFactors
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameDemo stamp: 'AB 10/5/2023 17:39:19'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameDemo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameCuentaBancaria stamp: 'AB 10/5/2023 17:39:19'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameCuentaBancaria
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameContador stamp: 'AB 10/5/2023 17:39:20'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameContador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameAnagrams stamp: 'AB 10/5/2023 17:39:20'!
TDDBabyStepsGame subclass: #TDDBabyStepsGameAnagrams
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGame stamp: 'AB 10/5/2023 17:39:20'!
Object subclass: #TDDBabyStepsGame
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classRemoval: #TDDBabyStepsGameWindow stamp: 'AB 10/5/2023 17:39:20'!
SystemWindow subclass: #TDDBabyStepsGameWindow
	instanceVariableNames: 'stepResultTextBoxMorph nextButtonMorph forceNextButtonMorph definitionButtonMorph gameJourneyTextBoxMorph testNumberLabel pointsLabel helpButtonMorph lastStepPoints'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

----SNAPSHOT----(5 October 2023 17:39:35) CuisUniversity-5981.image priorSource: 10369357!

TestSuite subclass: #CalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!

!classDefinition: #CalendarTests category: 'Calendario' stamp: 'AB 10/5/2023 17:41:48'!
TestSuite subclass: #CalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!

TestCase subclass: #CalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!

!classDefinition: #CalendarTests category: 'Calendario' stamp: 'AB 10/5/2023 17:44:44'!
TestCase subclass: #CalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Calendario'!

!classDefinition: #CalendarioDeFeriados category: 'CalendarioDeFeriados' stamp: 'AB 10/5/2023 17:49:33'!
Object subclass: #CalendarioDeFeriados
	instanceVariableNames: 'feriados'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!CalendarTests methodsFor: 'no messages' stamp: 'AB 10/5/2023 17:49:12'!
test01FechaCalendarioEsFeriado
	|calendario|
	
	calendario := CalendarioDeFeriados new.
	
	self assert: true equals: (calendario esFeriado: 24/12/2023).
	! !

TestCase subclass: #CalendarioDeFeriadosTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classDefinition: #CalendarioDeFeriadosTests category: 'CalendarioDeFeriados' stamp: 'AB 10/5/2023 17:50:10'!
TestCase subclass: #CalendarioDeFeriadosTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classRemoval: #CalendarTests stamp: 'AB 10/5/2023 17:50:13'!
TestCase subclass: #CalendarTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!CalendarioDeFeriadosTests methodsFor: 'no messages' stamp: 'AB 10/5/2023 17:53:17'!
test01LaFechaDeNavidadEsFeriado
	
	|calendario|
	
	calendario  := CalendarioDeFeriados new.
	
	self assert: true equals: (calendario esFeriado: 25/12/2023).! !

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 17:53:50'!
ERROR!
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 17:54:01'!
esFeriado: aRenameMe1 
	self shouldBeImplemented.! !
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 17:54:16' prior: 50655895!
esFeriado: unaFecha 
	self true.! !
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 17:54:21' prior: 50655900!
esFeriado: unaFecha 
	^true.! !

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 17:54:24'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 17:54:24'!
PASSED!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 17:54:58'!
test02LaFechaDeVisperaDeNavidadNoEsFeriado
	
	|calendario|
	
	calendario  := CalendarioDeFeriados new.
	
	self assert: false equals: (calendario esFeriado: 25/12/2023).! !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 17:55:04' prior: 50655916!
test02LaFechaDeVisperaDeNavidadNoEsFeriado
	
	|calendario|
	
	calendario  := CalendarioDeFeriados new.
	
	self assert: false equals: (calendario esFeriado: 24/12/2023).! !

24/12/2023!

24/12/202!

24/12/2023!

GregorianDateTime now !
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 17:57:43' prior: 50655905!
esFeriado: unaFecha 
	unaFecha = (24/12/23) ifTrue: [^true.].
	^false! !

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 17:57:50'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test02LaFechaDeVisperaDeNavidadNoEsFeriado stamp: 'AB 10/5/2023 17:57:50'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 17:57:50'!
FAILURE!

FixedGregorianDate today !

FixedGregorianDate today !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:08:40' prior: 50655883!
test01LaFechaDeNavidadEsFeriado
	
	|calendario|
	
	calendario  := CalendarioDeFeriados new.
	
	self assert: true equals: (calendario esFeriado: December, 25, 2023).! !

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 18:08:42'!
ERROR!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:08:51' prior: 50655954!
test01LaFechaDeNavidadEsFeriado
	
	|calendario|
	
	calendario  := CalendarioDeFeriados new.
	
	self assert: true equals: (calendario esFeriado: December, 25/2023).! !

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 18:08:53'!
ERROR!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:14:12' prior: 50655966!
test01LaFechaDeNavidadEsFeriado
	
	|calendario feriado|
	
	calendario  := CalendarioDeFeriados new.
	feriado := December/ 25 / 2023.
	
	self assert: (calendario esFeriado: feriado).! !

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 18:14:13'!
FAILURE!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:14:34' prior: 50655978!
test01LaFechaDeNavidadEsFeriado
	
	|calendario feriado|
	
	calendario  := CalendarioDeFeriados new.
	feriado := December/ 25 / 2023.
	
	self assert: true equals: (calendario esFeriado: feriado).! !

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 18:14:35'!
FAILURE!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:15:32' prior: 50655991!
test01LaFechaDeNavidadEsFeriado
	
	|calendario feriado|
	
	calendario  := CalendarioDeFeriados new.
	feriado := December/ 25 / 2023.
	
	self assert: (calendario esFeriado: feriado).! !
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 18:15:50' prior: 50655936!
esFeriado: unaFecha
	^true! !

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 18:16:04'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02LaFechaDeVisperaDeNavidadNoEsFeriado stamp: 'AB 10/5/2023 18:16:04'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test02LaFechaDeVisperaDeNavidadNoEsFeriado stamp: 'AB 10/5/2023 18:16:04'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 18:16:12'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 18:16:14'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02LaFechaDeVisperaDeNavidadNoEsFeriado stamp: 'AB 10/5/2023 18:16:14'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test02LaFechaDeVisperaDeNavidadNoEsFeriado stamp: 'AB 10/5/2023 18:16:14'!
FAILURE!
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 18:16:51' prior: 50656014!
esFeriado: unaFecha
	^unaFecha day = Sunday.! !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:17:04' prior: 50656004!
test01LaFechaDeNavidadEsFeriado
	
	|calendario feriado|
	
	calendario  := CalendarioDeFeriados new.
	feriado := December/ 24 / 2023.
	
	self assert: (calendario esFeriado: feriado).! !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:17:13' prior: 50656049!
test01LaFechaDeNavidadEsFeriado
	
	|calendario feriado|
	
	calendario  := CalendarioDeFeriados new.
	feriado := December/ 24 / 2023.
	
	self deny: (calendario esFeriado: feriado).! !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:18:32' prior: 50655925!
test02LaFechaDeVisperaDeNavidadNoEsFeriado
	
	|calendario unNoFeriado|
	
	calendario  := CalendarioDeFeriados new.
	unNoFeriado := October / 8 / 2023.
	
	self assert: (calendario esFeriado: 24/12/2023).! !

!testRun: #CalendarioDeFeriadosTests #test02LaFechaDeVisperaDeNavidadNoEsFeriado stamp: 'AB 10/5/2023 18:18:37'!
ERROR!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:18:49' prior: 50656067!
test02LaFechaDeVisperaDeNavidadNoEsFeriado
	
	|calendario unNoFeriado|
	
	calendario  := CalendarioDeFeriados new.
	unNoFeriado := October / 8 / 2023.
	
	self assert: (calendario esFeriado: unNoFeriado ).! !

!testRun: #CalendarioDeFeriadosTests #test02LaFechaDeVisperaDeNavidadNoEsFeriado stamp: 'AB 10/5/2023 18:18:56'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 18:18:56'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test02LaFechaDeVisperaDeNavidadNoEsFeriado stamp: 'AB 10/5/2023 18:18:56'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 18:18:56'!
FAILURE!
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 18:19:23' prior: 50656044!
esFeriado: unPosibleFeriado
	^unPosibleFeriado day = Sunday.! !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:19:39'!
test01
	
	|calendario feriado|
	
	calendario  := CalendarioDeFeriados new.
	feriado := December/ 24 / 2023.
	
	self deny: (calendario esFeriado: feriado).! !

!methodRemoval: CalendarioDeFeriadosTests #test01LaFechaDeNavidadEsFeriado stamp: 'AB 10/5/2023 18:19:39'!
test01LaFechaDeNavidadEsFeriado
	
	|calendario feriado|
	
	calendario  := CalendarioDeFeriados new.
	feriado := December/ 24 / 2023.
	
	self deny: (calendario esFeriado: feriado).!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:19:46'!
test02
	
	|calendario unNoFeriado|
	
	calendario  := CalendarioDeFeriados new.
	unNoFeriado := October / 8 / 2023.
	
	self assert: (calendario esFeriado: unNoFeriado ).! !

!methodRemoval: CalendarioDeFeriadosTests #test02LaFechaDeVisperaDeNavidadNoEsFeriado stamp: 'AB 10/5/2023 18:19:46'!
test02LaFechaDeVisperaDeNavidadNoEsFeriado
	
	|calendario unNoFeriado|
	
	calendario  := CalendarioDeFeriados new.
	unNoFeriado := October / 8 / 2023.
	
	self assert: (calendario esFeriado: unNoFeriado ).!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:20:54'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:20:54'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:20:54'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:20:54'!
FAILURE!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:21:27' prior: 50656111!
test01
	
	|calendario noFeriado|
	
	calendario  := CalendarioDeFeriados new.
	noFeriado := December/ 24 / 2023.
	
	self deny: (calendario esFeriado: noFeriado).! !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:21:35' prior: 50656128!
test02
	
	|calendario unNoFeriado|
	
	calendario  := CalendarioDeFeriados new.
	unNoFeriado := October / 8 / 2023.
	
	self assert: (calendario esFeriado: unNoFeriado).! !

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:22:09'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:22:09'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:22:09'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:22:09'!
FAILURE!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:22:27' prior: 50656158!
test01
	
	|calendario noFeriado|
	
	calendario  := CalendarioDeFeriados new.
	noFeriado := October / 5 / 2023.
	
	self deny: (calendario esFeriado: noFeriado).! !

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:22:29'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:22:29'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:22:29'!
PASSED!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:23:44' prior: 50656167!
test02
	
	|calendario unFeriado|
	
	calendario  := CalendarioDeFeriados new.
	unFeriado := October / 8 / 2023.
	
	self assert: (calendario esFeriado: unFeriado).! !

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:23:48'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:23:48'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:23:48'!
PASSED!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:23:54'!
test03
	
	|calendario unFeriado|
	
	calendario  := CalendarioDeFeriados new.
	unFeriado := October / 7 / 2023.
	
	self assert: (calendario esFeriado: unFeriado).! !

!testRun: #CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:23:56'!
FAILURE!
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 18:24:37' prior: 50656106!
esFeriado: unPosibleFeriado
	^unPosibleFeriado day = Sunday or: [ unPosibleFeriado day = Saturday].! !

!classDefinition: #CalendarioDeFeriados category: 'CalendarioDeFeriados' stamp: 'AB 10/5/2023 18:29:49'!
Object subclass: #CalendarioDeFeriados
	instanceVariableNames: 'feriados feriadoDeDiaDeSemana'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 18:29:47' prior: 50656232!
esFeriado: unPosibleFeriado
	^unPosibleFeriado day = feriadoDeDiaDeSemana.! !

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:29:53'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:29:53'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:29:53'!
FAILURE!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:31:48' prior: 50656204!
test02
	
	|calendario unFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario marcarComoFeriadoDeDiaDeSemana: Sunday.
	unFeriado := October / 8 / 2023.
	
	self assert: (calendario esFeriado: unFeriado).! !

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:31:48'!
ERROR!
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 18:31:53'!
marcarComoFeriadoDeDiaDeSemana: Sunday 
	self shouldBeImplemented.! !
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 18:32:35' prior: 50656275!
marcarComoFeriadoDeDiaDeSemana: unFeriadoDeDiaDeSemana 
	feriadoDeDiaDeSemana := unFeriadoDeDiaDeSemana.! !

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:32:38'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:32:38'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:32:38'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:32:38'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:32:38'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:33:02'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:33:02'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:33:02'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:33:02'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:33:02'!
FAILURE!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:33:22' prior: 50656220!
test03
	
	|calendario unFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario  marcarComoFeriadoDeDiaDeSemana: Saturday.
	unFeriado := October / 7 / 2023.
	
	self assert: (calendario esFeriado: unFeriado).! !

!testRun: #CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:33:23'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:33:23'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:33:23'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:33:23'!
PASSED!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:35:20'!
test04
	
	|calendario unFeriado otroFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario  marcarComoFeriadoDeDiaDeSemana: Saturday.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	unFeriado := October / 7 / 2023.
	otroFeriado := October / 9 / 2023. 
	
	self assert: (calendario esFeriado: unFeriado).
	self assert: (calendario esFeriado: otroFeriado).! !

!testRun: #CalendarioDeFeriadosTests #test04 stamp: 'AB 10/5/2023 18:35:20'!
FAILURE!
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 18:35:45' overrides: 16920235!
initialize
	feriadoDeDiaDeSemana := OrderedCollection new.! !
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 18:35:57' prior: 50656281!
marcarComoFeriadoDeDiaDeSemana: unFeriadoDeDiaDeSemana 
	feriadoDeDiaDeSemana add: unFeriadoDeDiaDeSemana.! !

!testRun: #CalendarioDeFeriadosTests #test04 stamp: 'AB 10/5/2023 18:36:02'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test04 stamp: 'AB 10/5/2023 18:37:12'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:37:44'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:37:44'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:37:44'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test04 stamp: 'AB 10/5/2023 18:37:44'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:37:49'!
FAILURE!
!CalendarioDeFeriados methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 18:38:38' prior: 50656248!
esFeriado: unPosibleFeriado
	^feriadoDeDiaDeSemana includes: unPosibleFeriado day.! !

!testRun: #CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:38:40'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:38:40'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:38:40'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test04 stamp: 'AB 10/5/2023 18:38:40'!
PASSED!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:48:32'!
test01PuedeNoHaberFeriados
	
	|calendario noFeriado|
	
	calendario  := CalendarioDeFeriados new.
	noFeriado := October / 5 / 2023.
	
	self deny: (calendario esFeriado: noFeriado).! !

!methodRemoval: CalendarioDeFeriadosTests #test01 stamp: 'AB 10/5/2023 18:48:36'!
test01
	
	|calendario noFeriado|
	
	calendario  := CalendarioDeFeriados new.
	noFeriado := October / 5 / 2023.
	
	self deny: (calendario esFeriado: noFeriado).!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:48:48'!
test02PuedeHaberUnFeriado
	
	|calendario unFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario marcarComoFeriadoDeDiaDeSemana: Sunday.
	unFeriado := October / 8 / 2023.
	
	self assert: (calendario esFeriado: unFeriado).! !

!methodRemoval: CalendarioDeFeriadosTests #test02 stamp: 'AB 10/5/2023 18:48:48'!
test02
	
	|calendario unFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario marcarComoFeriadoDeDiaDeSemana: Sunday.
	unFeriado := October / 8 / 2023.
	
	self assert: (calendario esFeriado: unFeriado).!

!methodRemoval: CalendarioDeFeriadosTests #test03 stamp: 'AB 10/5/2023 18:48:52'!
test03
	
	|calendario unFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario  marcarComoFeriadoDeDiaDeSemana: Saturday.
	unFeriado := October / 7 / 2023.
	
	self assert: (calendario esFeriado: unFeriado).!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:49:03'!
test03PudeHaberMasDeUnFeriado
	
	|calendario unFeriado otroFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario  marcarComoFeriadoDeDiaDeSemana: Saturday.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	unFeriado := October / 7 / 2023.
	otroFeriado := October / 9 / 2023. 
	
	self assert: (calendario esFeriado: unFeriado).
	self assert: (calendario esFeriado: otroFeriado).! !

!methodRemoval: CalendarioDeFeriadosTests #test04 stamp: 'AB 10/5/2023 18:49:03'!
test04
	
	|calendario unFeriado otroFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario  marcarComoFeriadoDeDiaDeSemana: Saturday.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	unFeriado := October / 7 / 2023.
	otroFeriado := October / 9 / 2023. 
	
	self assert: (calendario esFeriado: unFeriado).
	self assert: (calendario esFeriado: otroFeriado).!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:49:14'!
test03PuedeHaberMasDeUnFeriado
	
	|calendario unFeriado otroFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario  marcarComoFeriadoDeDiaDeSemana: Saturday.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	unFeriado := October / 7 / 2023.
	otroFeriado := October / 9 / 2023. 
	
	self assert: (calendario esFeriado: unFeriado).
	self assert: (calendario esFeriado: otroFeriado).! !

!methodRemoval: CalendarioDeFeriadosTests #test03PudeHaberMasDeUnFeriado stamp: 'AB 10/5/2023 18:49:14'!
test03PudeHaberMasDeUnFeriado
	
	|calendario unFeriado otroFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario  marcarComoFeriadoDeDiaDeSemana: Saturday.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	unFeriado := October / 7 / 2023.
	otroFeriado := October / 9 / 2023. 
	
	self assert: (calendario esFeriado: unFeriado).
	self assert: (calendario esFeriado: otroFeriado).!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:50:14'!
test04
	
	|calendario unFeriado otroFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario  marcarComoFeriadoDeDiaDeSemana: Saturday.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	unFeriado := October / 7 / 2023.
	otroFeriado := October / 9 / 2023. 
	
	self assert: (calendario esFeriado: unFeriado).
	self assert: (calendario esFeriado: otroFeriado).! !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 18:59:39'!
test04PuedeHaberUnFeriadoYUnNoFeriadoEnElMismoDiaDeLaSemana
	
	|calendario unFeriado otroFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario  marcarComoFeriadoDeDiaDeSemana: Saturday.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	unFeriado := October / 7 / 2023.
	otroFeriado := October / 9 / 2023. 
	
	self assert: (calendario esFeriado: unFeriado).
	self assert: (calendario esFeriado: otroFeriado).! !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 19:00:51' prior: 50656522!
test04PuedeHaberUnFeriadoYUnNoFeriadoEnElMismoDiaDeLaSemana
	
	|calendario unLunesFeriado unLunesNoFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario  marcarComoFeriadoDeDiaDeSemana: Saturday.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	unLunesFeriado := October / 16 / 2023.
	 unLunesNoFeriado := October / 9 / 2023. 
	
	self assert: (calendario esFeriado: unLunesFeriado).
	self deny: (calendario esFeriado: unLunesNoFeriado).! !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 19:01:13' prior: 50656539!
test04PuedeHaberUnFeriadoYUnNoFeriadoEnElMismoDiaDeLaSemana
	
	|calendario unLunesFeriado unLunesNoFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	unLunesNoFeriado := October / 9 / 2023. 
	unLunesFeriado := October / 16 / 2023.

	
	self assert: (calendario esFeriado: unLunesFeriado).
	self deny: (calendario esFeriado: unLunesNoFeriado).! !

!testRun: #CalendarioDeFeriadosTests #test04PuedeHaberUnFeriadoYUnNoFeriadoEnElMismoDiaDeLaSemana stamp: 'AB 10/5/2023 19:01:16'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test01PuedeNoHaberFeriados stamp: 'AB 10/5/2023 19:01:28'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02PuedeHaberUnFeriado stamp: 'AB 10/5/2023 19:01:28'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test03PuedeHaberMasDeUnFeriado stamp: 'AB 10/5/2023 19:01:28'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test04 stamp: 'AB 10/5/2023 19:01:28'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test04PuedeHaberUnFeriadoYUnNoFeriadoEnElMismoDiaDeLaSemana stamp: 'AB 10/5/2023 19:01:28'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test04PuedeHaberUnFeriadoYUnNoFeriadoEnElMismoDiaDeLaSemana stamp: 'AB 10/5/2023 19:01:28'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test01PuedeNoHaberFeriados stamp: 'AB 10/5/2023 19:01:33'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test02PuedeHaberUnFeriado stamp: 'AB 10/5/2023 19:01:33'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test03PuedeHaberMasDeUnFeriado stamp: 'AB 10/5/2023 19:01:33'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test04 stamp: 'AB 10/5/2023 19:01:33'!
PASSED!

!testRun: #CalendarioDeFeriadosTests #test04PuedeHaberUnFeriadoYUnNoFeriadoEnElMismoDiaDeLaSemana stamp: 'AB 10/5/2023 19:01:33'!
FAILURE!

!testRun: #CalendarioDeFeriadosTests #test04PuedeHaberUnFeriadoYUnNoFeriadoEnElMismoDiaDeLaSemana stamp: 'AB 10/5/2023 19:01:33'!
FAILURE!

!methodRemoval: CalendarioDeFeriadosTests #test04PuedeHaberUnFeriadoYUnNoFeriadoEnElMismoDiaDeLaSemana stamp: 'AB 10/5/2023 19:03:19'!
test04PuedeHaberUnFeriadoYUnNoFeriadoEnElMismoDiaDeLaSemana
	
	|calendario unLunesFeriado unLunesNoFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	unLunesNoFeriado := October / 9 / 2023. 
	unLunesFeriado := October / 16 / 2023.

	
	self assert: (calendario esFeriado: unLunesFeriado).
	self deny: (calendario esFeriado: unLunesNoFeriado).!
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 19:03:51' prior: 50656507!
test04
	
	|calendario unFeriado otroFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	otroFeriado := October / 9 / 2023. 
	unFeriado := October / 16 / 2023.
	
	self assert: (calendario esFeriado: unFeriado).
	self assert: (calendario esFeriado: otroFeriado).! !
!CalendarioDeFeriadosTests methodsFor: 'tests' stamp: 'AB 10/5/2023 19:04:07' prior: 50656637!
test04
	
	|calendario unFeriado otroFeriado|
	
	calendario  := CalendarioDeFeriados new.
	calendario marcarComoFeriadoDeDiaDeSemana: Monday.
	otroFeriado := October / 9 / 2023. 
	unFeriado := October / 16 / 2023.
	
	self assert: (calendario esFeriado: unFeriado).
	self assert: (calendario esFeriado: otroFeriado).! !

----SNAPSHOT----(5 October 2023 20:10:41) CuisUniversity-5981.image priorSource: 10373457!

!classRemoval: #CalendarioDeFeriados stamp: 'AB 10/5/2023 20:10:49'!
Object subclass: #CalendarioDeFeriados
	instanceVariableNames: 'feriados feriadoDeDiaDeSemana'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

!classRemoval: #CalendarioDeFeriadosTests stamp: 'AB 10/5/2023 20:10:49'!
TestCase subclass: #CalendarioDeFeriadosTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CalendarioDeFeriados'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'AB 10/5/2023 20:29:46'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'AB 10/5/2023 20:34:12'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRover stamp: 'AB 10/5/2023 20:34:21'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'AB 10/5/2023 20:35:05'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'AB 10/5/2023 20:35:02'!
test01
	|rover|
	
	rover := MarsRover new.
	
	self assert: (0@0) equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:35:08'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 20:35:13'!
position
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 20:35:21' prior: 50656718!
position
	^(0@0).! !

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:35:24'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:35:24'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 20:36:15' prior: 50656710!
test01
	|rover|
	
	rover := MarsRover new.
	
	self assert: (0@0) equals: rover position.
	self assert: #North equals: rover direction.! !

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:36:15'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 20:36:19'!
direction
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 20:36:24' prior: 50656741!
direction
	^#North! !

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:36:26'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:36:26'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:37:20'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 20:39:13'!
test02
	|rover|
	
	rover := MarsRover new.
	rover sends: 'f'.
	
	self assert: (0@1) equals: rover position.
	self assert: #North equals: rover direction.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 20:39:19' prior: 50656756!
test02
	|rover|
	
	rover := MarsRover new.
	rover send: 'f'.
	
	self assert: (0@1) equals: rover position.
	self assert: #North equals: rover direction.! !

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:39:23'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 20:39:30'!
send: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 20:40:08' prior: 50656774!
send: aCommand
	^(0@1)! !

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:40:12'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'AB 10/5/2023 20:40:45'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 20:40:43' prior: 50656779!
send: aCommand
	position := (0@1).! !

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:40:47'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:40:47'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:40:47'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:40:53'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:40:53'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:40:53'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 20:42:05' prior: 50656732!
test01
	|rover|
	
	rover := MarsRover withPostion: (0@0) andDirection: #North.
	
	self assert: (0@0) equals: rover position.
	self assert: #North equals: rover direction.! !

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:42:11'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'AB 10/5/2023 20:42:15'!
withPostion: aRenameMe1 andDirection: aRenameMe2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPostion: aRenameMe1 andDirection: aRenameMe2 ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'AB 10/5/2023 20:42:48' prior: 50656821!
withPostion: aPoint andDirection: aDirection 
	^self new initializeWithPostion: aPoint andDirection: aDirection ! !

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:42:50'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'AB 10/5/2023 20:43:04'!
Object subclass: #MarsRover
	instanceVariableNames: 'position point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'AB 10/5/2023 20:43:04'!
Object subclass: #MarsRover
	instanceVariableNames: 'position point direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'AB 10/5/2023 20:43:04'!
initializeWithPostion: aPoint andDirection: aDirection 
	self shouldBeImplemented.
	point := aPoint.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'AB 10/5/2023 20:43:15' prior: 50656854!
initializeWithPostion: aPoint andDirection: aDirection 
	position := aPoint.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:43:20'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:43:20'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:43:20'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:43:20'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:43:33'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 20:43:36'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:43:36'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 20:43:36'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 21:01:47' prior: 50656810!
test01
	|rover|
	
	rover := MarsRover withPostion: (0@0) andDirection: #North.
	
	self assert: (rover isInPosition: (0@0) pointingTo: #North).! !
!MarsRover methodsFor: 'initialization' stamp: 'AB 10/5/2023 21:02:14'!
initializeWithPosition: aPoint andDirection: aDirection 
	position := aPoint.
	direction := aDirection.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 21:02:14' prior: 50656831!
withPostion: aPoint andDirection: aDirection 
	^self new initializeWithPosition: aPoint andDirection: aDirection ! !

!methodRemoval: MarsRover #initializeWithPostion:andDirection: stamp: 'AB 10/5/2023 21:02:14'!
initializeWithPostion: aPoint andDirection: aDirection 
	position := aPoint.
	direction := aDirection.!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 21:02:46'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 21:03:02'!
isInPosition: aRenameMe1 pointingTo: aRenameMe2 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 21:03:46' prior: 50656915!
isInPosition: aPosition pointingTo: aDirection 
	^position = aPosition and: [ direction = aDirection ]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 21:03:48' prior: 50656921!
isInPosition: aPosition pointingTo: aDirection 
	^position = aPosition and: [ direction = aDirection ].! !

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 21:03:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 21:03:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:03:49'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:03:49'!
FAILURE!
!MarsRover class methodsFor: 'instance creation' stamp: 'AB 10/5/2023 21:04:28'!
withPosition: aPoint andDirection: aDirection 
	^self new initializeWithPosition: aPoint andDirection: aDirection ! !

!methodRemoval: MarsRover class #withPostion:andDirection: stamp: 'AB 10/5/2023 21:04:28'!
withPostion: aPoint andDirection: aDirection 
	^self new initializeWithPosition: aPoint andDirection: aDirection !
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 21:04:38' prior: 50656886!
test01
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: #North.
	
	self assert: (rover isInPosition: (0@0) pointingTo: #North).! !

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 21:04:42'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 21:04:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:04:42'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:04:42'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 21:05:18' prior: 50656764!
test02
	|rover|
	
	rover := MarsRover new.
	rover send: 'f'.
	
	self assert: (rover isInPosition: (0@1) pointingTo: #North).! !

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:05:21'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:05:39'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 21:07:00' prior: 50656974!
test02
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: #North.
	rover send: 'f'.
	
	self assert: (rover isInPosition: (0@1) pointingTo: #North).! !

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:07:01'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 21:07:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:07:01'!
PASSED!

#North !

#North size!

#North size!

#North add !

#North add:#a!

#North add:'s'!

#North super!

#North superclass!

#North class!

#North class super!

#North class!

#North class!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 21:28:09'!
process: aCommand
	position := (0@1).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 21:28:09' prior: 50656986!
test02
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: #North.
	rover process: 'f'.
	
	self assert: (rover isInPosition: (0@1) pointingTo: #North).! !

!methodRemoval: MarsRover #send: stamp: 'AB 10/5/2023 21:28:09'!
send: aCommand
	position := (0@1).!
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 21:31:44' prior: 50657012!
test02
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: #North.
	rover process: ''.
	
	self assert: (rover isInPosition: (0@1) pointingTo: #North).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 21:31:57' prior: 50657007!
process: aCommand
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 21:32:03' prior: 50657024!
test02
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: #North.
	rover process: ''.
	
	self assert: (rover isInPosition: (0@0) pointingTo: #North).! !

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:32:04'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 21:32:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:32:04'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 21:34:28' prior: 50656957!
test01
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: #North.
	rover process: ''.
		
	self assert: (rover isInPosition: (0@0) pointingTo: #North).! !

!methodRemoval: MarsRoverTest #test02 stamp: 'AB 10/5/2023 21:37:12'!
test02
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: #North.
	rover process: ''.
	
	self assert: (rover isInPosition: (0@0) pointingTo: #North).!

!testRun: #MarsRoverTest #test01 stamp: 'AB 10/5/2023 21:37:14'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'AB 10/5/2023 21:40:04'!
test02
	|rover|
	
	rover := MarsRover withPosition: (0@0) andDirection: #North.
	rover process: 'f'.
		
	self assert: (rover isInPosition: (0@1) pointingTo: #North).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 21:42:35' prior: 50657033!
process: aCommand
	aCommand  = 'f' ifTrue: [^position := position x @ position y + 1].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'AB 10/5/2023 21:42:47' prior: 50657079!
process: aCommand
	aCommand  = 'f' ifTrue: [^position := position x @ (position y + 1)].! !