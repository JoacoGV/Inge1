

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (5 October 2023 20:18:32) as /home/clinux01/Escritorio/linux64/CuisUniversity-5981.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'IB 10/5/2023 20:19:49'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'IB 10/5/2023 20:19:56'!
test01! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:23:47' prior: 50650333!
test01

	| marsRover |
	self assert: marsRover position equals: (Point x: 0 y: 0);
	assert: marsRover direction equals: #North
	! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'IB 10/5/2023 20:24:40'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:24:34' prior: 50650337!
test01

	| marsRover cardinalPoint initialPoint |
	marsRover := MarsRover at: initialPoint facing: cardinalPoint.
	self assert: marsRover position equals: (Point x: 0 y: 0);
	assert: marsRover direction equals: #North
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:25:39' prior: 50650351!
test01

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := Point x: 0 y: 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	self assert: marsRover position equals: initialPosition;
	assert: marsRover direction equals: cardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:25:43' prior: 50650361!
test01

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := Point x: 0 y: 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	self assert: marsRover position equals: initialPosition;
	assert: marsRover direction equals: cardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:25:47' prior: 50650374!
test01

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := Point x: 0 y: 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	self 
		assert: marsRover position equals: initialPosition;
		assert: marsRover direction equals: cardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:26:23' prior: 50650387!
test01

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := Point x: 0 y: 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #().
	
	self 
		assert: marsRover position equals: initialPosition;
		assert: marsRover direction equals: cardinalPoint
	! !

!testRun: #MarsRoverTest #test01 stamp: 'IB 10/5/2023 20:26:28'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'IB 10/5/2023 20:26:43'!
at: initialPosition facing: cardinalPoint 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: initialPosition facing: cardinalPoint ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'IB 10/5/2023 20:26:59' prior: 50650416!
at: anInitialPosition facing: aCardinalPoint

	^self new initializeAt: anInitialPosition facing: aCardinalPoint ! !

!testRun: #MarsRoverTest #test01 stamp: 'IB 10/5/2023 20:27:01'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'IB 10/5/2023 20:27:14'!
Object subclass: #MarsRover
	instanceVariableNames: 'initialPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'IB 10/5/2023 20:27:14'!
Object subclass: #MarsRover
	instanceVariableNames: 'initialPosition cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'IB 10/5/2023 20:27:14'!
initializeAt: anInitialPosition facing: aCardinalPoint 
	self shouldBeImplemented.
	initialPosition := anInitialPosition.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'initialization' stamp: 'IB 10/5/2023 20:27:48' prior: 50650449!
initializeAt: anInitialPosition facing: aCardinalPoint! !

!testRun: #MarsRoverTest #test01 stamp: 'IB 10/5/2023 20:27:51'!
ERROR!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:28:06'!
executeCommands: aRenameMe1 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:28:14' prior: 50650464!
executeCommands: aCommandList

	! !

!testRun: #MarsRoverTest #test01 stamp: 'IB 10/5/2023 20:28:16'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'IB 10/5/2023 20:28:26'!
position
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'IB 10/5/2023 20:28:40' prior: 50650475!
position
	
	^Point x: 0 y: 0! !

!testRun: #MarsRoverTest #test01 stamp: 'IB 10/5/2023 20:28:41'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'IB 10/5/2023 20:28:46'!
direction
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'IB 10/5/2023 20:28:58' prior: 50650485!
direction
	
	^#North! !

!testRun: #MarsRoverTest #test01 stamp: 'IB 10/5/2023 20:29:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'IB 10/5/2023 20:29:00'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:31:11'!
test02

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('f').
	
	self 
		assert: marsRover position equals: initialPosition;
		assert: marsRover direction equals: cardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:31:20' prior: 50650400!
test01

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0@0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #().
	
	self 
		assert: marsRover position equals: initialPosition;
		assert: marsRover direction equals: cardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:31:24' prior: 50650510!
test01

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #().
	
	self 
		assert: marsRover position equals: initialPosition;
		assert: marsRover direction equals: cardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:31:59' prior: 50650497!
test02

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('f').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ 1));
		assert: marsRover direction equals: cardinalPoint
	! !

!testRun: #MarsRoverTest #test02 stamp: 'IB 10/5/2023 20:32:14'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'IB 10/5/2023 20:32:53' prior: 50650457!
initializeAt: anInitialPosition facing: aCardinalPoint

	initialPosition := anInitialPosition! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:34:20' prior: 50650469!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [initialPosition + (0@1)]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:34:28' prior: 50650559!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [initialPosition := initialPosition + (0@1)]! !
!MarsRover methodsFor: 'accessing' stamp: 'IB 10/5/2023 20:34:38' prior: 50650479!
position
	
	^initialPosition! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'IB 10/5/2023 20:34:48'!
Object subclass: #MarsRover
	instanceVariableNames: 'position cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:34:48' prior: 50650553!
initializeAt: anInitialPosition facing: aCardinalPoint

	position := anInitialPosition! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:34:48' prior: 50650566!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [position := position + (0@1)]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:34:48' prior: 50650573!
position
	
	^position! !

!testRun: #MarsRoverTest #test01 stamp: 'IB 10/5/2023 20:34:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'IB 10/5/2023 20:34:52'!
PASSED!

----SNAPSHOT----(5 October 2023 20:34:55) CuisUniversity-5981.image priorSource: 10197292!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:36:00'!
test01WhenNoCommandsExecutedStaysStills

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #().
	
	self 
		assert: marsRover position equals: initialPosition;
		assert: marsRover direction equals: cardinalPoint
	! !

!methodRemoval: MarsRoverTest #test01 stamp: 'IB 10/5/2023 20:36:00'!
test01

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #().
	
	self 
		assert: marsRover position equals: initialPosition;
		assert: marsRover direction equals: cardinalPoint
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:37:00'!
test02MovingFowardOneTime

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('f').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ 1));
		assert: marsRover direction equals: cardinalPoint
	! !

!methodRemoval: MarsRoverTest #test02 stamp: 'IB 10/5/2023 20:37:00'!
test02

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('f').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ 1));
		assert: marsRover direction equals: cardinalPoint
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:38:00'!
test03MovingFowardMoreThanOneTime

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('f' 'f').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ 2));
		assert: marsRover direction equals: cardinalPoint
	! !

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:38:06'!
FAILURE!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:38:33' prior: 50650591!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [position := position + (0@aCommandList size)]! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:38:36'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:38:36'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:38:36'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:40:32'!
test02MovingBackwardsOneTime

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('b').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ -1));
		assert: marsRover direction equals: cardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:40:37'!
test04MovingBackwardsOneTime

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('b').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ -1));
		assert: marsRover direction equals: cardinalPoint
	! !

!methodRemoval: MarsRoverTest #test02MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:40:37'!
test02MovingBackwardsOneTime

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('b').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ -1));
		assert: marsRover direction equals: cardinalPoint
	!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:40:42'!
FAILURE!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:40:42'!
FAILURE!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:42:05' prior: 50650682!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			aCommandList first = 'f' 
				ifTrue: [position := position + (0@aCommandList size)]
				ifFalse: [position := position - (0@1)]]! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:42:08'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:42:08'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:42:08'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:42:08'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:42:21'!
test04MovingBackwardsMoreThanOneTime

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('b' 'b').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ -2));
		assert: marsRover direction equals: cardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:42:26'!
test05MovingBackwardsMoreThanOneTime

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('b' 'b').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ -2));
		assert: marsRover direction equals: cardinalPoint
	! !

!methodRemoval: MarsRoverTest #test04MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:42:26'!
test04MovingBackwardsMoreThanOneTime

	| marsRover cardinalPoint initialPosition |
	
	initialPosition := 0 @ 0.
	cardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: cardinalPoint.
	
	marsRover executeCommands: #('b' 'b').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ -2));
		assert: marsRover direction equals: cardinalPoint
	!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:42:35' prior: 50650748!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			aCommandList first = 'f' 
				ifTrue: [position := position + (0@aCommandList size)]
				ifFalse: [position := position - (0@aCommandList size)]]! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:42:38'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:42:38'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:42:38'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:42:38'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:42:38'!
PASSED!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:43:16' prior: 50650816!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			aCommandList first = 'f' 
				ifTrue: [position := position + (0@aCommandList size)]
				ifFalse: [position := position + (0@aCommandList size negated)]]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:43:36' prior: 50650842!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			| delta |
	delta := 0@aCommandList size.
	aCommandList first = 'f' 
				ifTrue: [position := position + (delta)]
				ifFalse: [position := position + (0@aCommandList size negated)]]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:43:51' prior: 50650853!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			| delta delta2 |
	delta := 0@aCommandList size.
	delta2 := 0@aCommandList size negated.
	aCommandList first = 'f' 
				ifTrue: [position := position + (delta)]
				ifFalse: [position := position + (delta2)]]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:44:40'!
moveTo: delta

	^ position := position + (delta)! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:44:40' prior: 50650865!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			| delta delta2 |
	delta := 0@aCommandList size.
	delta2 := 0@aCommandList size negated.
	aCommandList first = 'f' 
				ifTrue: [self moveTo: delta]
				ifFalse: [position := position + (delta2)]]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:44:57' prior: 50650877!
moveTo: delta2

	^ position := position + (delta2)! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:44:57' prior: 50650882!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			| delta delta2 |
	delta := 0@aCommandList size.
	delta2 := 0@aCommandList size negated.
	aCommandList first = 'f' 
				ifTrue: [self moveTo: delta]
				ifFalse: [self moveTo: delta2]]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:46:04' prior: 50650899!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
	aCommandList first = 'f' 
				ifTrue: [aCommandList size timesRepeat: [self moveTo: 0@1]]
				ifFalse: [aCommandList size timesRepeat: [self moveTo: 0@-1]]]! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:46:07'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:46:07'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:46:07'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:46:07'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:46:07'!
PASSED!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:46:19' prior: 50650911!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			aCommandList first = 'f' 
				ifTrue: [aCommandList size timesRepeat: [self moveTo: 0@1]]
				ifFalse: [aCommandList size timesRepeat: [self moveTo: 0@-1]]]! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'IB 10/5/2023 20:48:30'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'IB 10/5/2023 20:48:32'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition1 initialCardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'IB 10/5/2023 20:48:33'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition1 initialCardinalPoint marsRover1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:48:29' overrides: 16961394!
setUp
	
	initialPosition1 := 0 @ 0.
	initialCardinalPoint := #North.
	marsRover1 := MarsRover at: initialPosition1 facing: initialCardinalPoint! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:49:38' prior: 50650609!
test01WhenNoCommandsExecutedStaysStills
	
	initialPosition1 := 0 @ 0.
	initialCardinalPoint := #North.
	marsRover1 := MarsRover at: initialPosition1 facing: initialCardinalPoint.
	
	marsRover1 executeCommands: #().
	
	self 
		assert: marsRover1 position equals: initialPosition1;
		assert: marsRover1 direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:49:43' prior: 50650981!
test01WhenNoCommandsExecutedStaysStills
	
	marsRover1 executeCommands: #().
	
	self 
		assert: marsRover1 position equals: initialPosition1;
		assert: marsRover1 direction equals: initialCardinalPoint
	! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:49:51'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:50:25' prior: 50650635!
test02MovingFowardOneTime
	
	marsRover1 executeCommands: #('f').
	
	self 
		assert: marsRover1 position equals: (initialPosition1 translatedBy: (0 @ 1));
		assert: marsRover1 direction equals: initialCardinalPoint
	! !

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:50:26'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:50:26'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:50:26'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:50:26'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:50:26'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:50:26'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:50:48' prior: 50650663!
test03MovingFowardMoreThanOneTime
	
	marsRover1 executeCommands: #('f' 'f').
	
	self 
		assert: marsRover1 position equals: (initialPosition1 translatedBy: (0 @ 2));
		assert: marsRover1 direction equals: initialCardinalPoint
	! !

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:50:49'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:50:49'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:50:49'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:50:49'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:50:49'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:50:49'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:51:05' prior: 50650712!
test04MovingBackwardsOneTime
	
	marsRover1 executeCommands: #('b').
	
	self 
		assert: marsRover1 position equals: (initialPosition1 translatedBy: (0 @ -1));
		assert: marsRover1 direction equals: initialCardinalPoint
	! !

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:51:06'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:51:06'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:51:06'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:51:06'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:51:06'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:51:06'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:51:16' prior: 50651065!
test04MovingBackwardsOneTime
	
	marsRover1 executeCommands: #('b').
	
	self 
		assert: marsRover1 position equals: (initialPosition1 translatedBy: (0 @ -1));
		assert: marsRover1 direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:51:32' prior: 50650785!
test05MovingBackwardsMoreThanOneTime
	
	marsRover1 executeCommands: #('b' 'b').
	
	self 
		assert: marsRover1 position equals: (initialPosition1 translatedBy: (0 @ -2));
		assert: marsRover1 direction equals: initialCardinalPoint
	! !

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:51:33'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:51:33'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:51:33'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:51:33'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:51:33'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:51:33'!
PASSED!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'IB 10/5/2023 20:51:42'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition1 initialCardinalPoint marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:42' prior: 50651036!
test03MovingFowardMoreThanOneTime
	
	marsRover executeCommands: #('f' 'f').
	
	self 
		assert: marsRover position equals: (initialPosition1 translatedBy: (0 @ 2));
		assert: marsRover direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:42' prior: 50651094!
test04MovingBackwardsOneTime
	
	marsRover executeCommands: #('b').
	
	self 
		assert: marsRover position equals: (initialPosition1 translatedBy: (0 @ -1));
		assert: marsRover direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:42' prior: 50650995!
test01WhenNoCommandsExecutedStaysStills
	
	marsRover executeCommands: #().
	
	self 
		assert: marsRover position equals: initialPosition1;
		assert: marsRover direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:42' prior: 50650973 overrides: 16961394!
setUp
	
	initialPosition1 := 0 @ 0.
	initialCardinalPoint := #North.
	marsRover := MarsRover at: initialPosition1 facing: initialCardinalPoint! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:42' prior: 50651104!
test05MovingBackwardsMoreThanOneTime
	
	marsRover executeCommands: #('b' 'b').
	
	self 
		assert: marsRover position equals: (initialPosition1 translatedBy: (0 @ -2));
		assert: marsRover direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:42' prior: 50651008!
test02MovingFowardOneTime
	
	marsRover executeCommands: #('f').
	
	self 
		assert: marsRover position equals: (initialPosition1 translatedBy: (0 @ 1));
		assert: marsRover direction equals: initialCardinalPoint
	! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'IB 10/5/2023 20:51:51'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition initialCardinalPoint marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:51' prior: 50651142!
test03MovingFowardMoreThanOneTime
	
	marsRover executeCommands: #('f' 'f').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ 2));
		assert: marsRover direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:51' prior: 50651153!
test04MovingBackwardsOneTime
	
	marsRover executeCommands: #('b').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ -1));
		assert: marsRover direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:51' prior: 50651163!
test01WhenNoCommandsExecutedStaysStills
	
	marsRover executeCommands: #().
	
	self 
		assert: marsRover position equals: initialPosition;
		assert: marsRover direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:51' prior: 50651173 overrides: 16961394!
setUp
	
	initialPosition := 0 @ 0.
	initialCardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: initialCardinalPoint! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:51' prior: 50651181!
test05MovingBackwardsMoreThanOneTime
	
	marsRover executeCommands: #('b' 'b').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ -2));
		assert: marsRover direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 20:51:51' prior: 50651192!
test02MovingFowardOneTime
	
	marsRover executeCommands: #('f').
	
	self 
		assert: marsRover position equals: (initialPosition translatedBy: (0 @ 1));
		assert: marsRover direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:52:35' prior: 50651232!
test01WhenNoCommandsExecutedStaysStills
	
	| finalPosition |
	marsRover executeCommands: #().
	
	finalPosition := initialPosition.
	self 
		assert: marsRover position equals: finalPosition;
		assert: marsRover direction equals: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:52:59' prior: 50651271!
test01WhenNoCommandsExecutedStaysStills
	
	| finalPosition actualCardinalPoint |
	marsRover executeCommands: #().
	
	finalPosition := initialPosition.
	actualCardinalPoint := initialCardinalPoint.
	self 
		assert: marsRover position equals: finalPosition;
		assert: marsRover direction equals: actualCardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:53:30'!
assertMarsRoverIsAt: actualCardinalPoint facing: finalPosition

	^ self 
		assert: marsRover position equals: finalPosition;
		assert: marsRover direction equals: actualCardinalPoint! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:53:30' prior: 50651282!
test01WhenNoCommandsExecutedStaysStills
	
	| finalPosition actualCardinalPoint |
	marsRover executeCommands: #().
	
	finalPosition := initialPosition.
	actualCardinalPoint := initialCardinalPoint.
	self assertMarsRoverIsAt: actualCardinalPoint facing: finalPosition
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:53:52' prior: 50651295!
assertMarsRoverIsAt: aFinalPosition facing: anActualCardinalPoint

	^ self 
		assert: marsRover position equals: aFinalPosition;
		assert: marsRover direction equals: anActualCardinalPoint! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:54:11'!
FAILURE!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:54:11'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:54:11'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:54:11'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:54:11'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:54:11'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:54:23' prior: 50651304!
test01WhenNoCommandsExecutedStaysStills
	
	| finalPosition actualCardinalPoint |
	marsRover executeCommands: #().
	
	finalPosition := initialPosition.
	actualCardinalPoint := initialCardinalPoint.
	self assertMarsRoverIsAt: finalPosition facing: actualCardinalPoint
	! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:54:24'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:54:28'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:54:28'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:54:28'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:54:28'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:54:28'!
PASSED!

----SNAPSHOT----(5 October 2023 20:54:31) CuisUniversity-5981.image priorSource: 10206572!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:54:51' prior: 50651344!
test01WhenNoCommandsExecutedStaysStills
	
	marsRover executeCommands: #().
	
	self assertMarsRoverIsAt: initialPosition facing: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:55:08' prior: 50651261!
test02MovingFowardOneTime
	
	marsRover executeCommands: #('f').
	
	self assertMarsRoverIsAt: (initialPosition translatedBy: (0 @ 1)) facing: initialCardinalPoint! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:55:18' prior: 50651211!
test03MovingFowardMoreThanOneTime
	
	marsRover executeCommands: #('f' 'f').
	
	
	self assertMarsRoverIsAt: (initialPosition translatedBy: (0 @ 2)) facing: initialCardinalPoint! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:55:21' prior: 50651393!
test03MovingFowardMoreThanOneTime
	
	marsRover executeCommands: #('f' 'f').
	
	self assertMarsRoverIsAt: (initialPosition translatedBy: (0 @ 2)) facing: initialCardinalPoint! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:55:36' prior: 50651222!
test04MovingBackwardsOneTime
	
	marsRover executeCommands: #('b').
	
	
	self assertMarsRoverIsAt: (initialPosition translatedBy: (0 @ -1)) facing: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:55:38' prior: 50651411!
test04MovingBackwardsOneTime
	
	marsRover executeCommands: #('b').
	
	self assertMarsRoverIsAt: (initialPosition translatedBy: (0 @ -1)) facing: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 20:55:52' prior: 50651250!
test05MovingBackwardsMoreThanOneTime
	
	marsRover executeCommands: #('b' 'b').
	
	self assertMarsRoverIsAt: (initialPosition translatedBy: (0 @ -2)) facing: initialCardinalPoint
	! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:57:38' prior: 50650938!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			aCommandList first = 'f' 
				ifTrue: [aCommandList size timesRepeat: [ position := position + 0@1]]
				ifFalse: [aCommandList size timesRepeat: [self moveTo: 0@-1]]]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:57:46' prior: 50651436!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			aCommandList first = 'f' 
				ifTrue: [aCommandList size timesRepeat: [ position := position + 0@1]]
				ifFalse: [aCommandList size timesRepeat: [position := position + 0@1]]]! !

!methodRemoval: MarsRover #moveTo: stamp: 'IB 10/5/2023 20:58:25'!
moveTo: delta2

	^ position := position + (delta2)!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:58:31'!
ERROR!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:58:31'!
ERROR!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 20:59:13' prior: 50651447!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [
			aCommandList first = 'f' 
				ifTrue: [aCommandList size timesRepeat: [ position := position + (0@1)]]
				ifFalse: [aCommandList size timesRepeat: [position := position + (0@-1)]]]! !

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:59:14'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 20:59:17'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 20:59:17'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 20:59:17'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 20:59:17'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 20:59:17'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:00:59'!
test06MovingFowardsAndBackwards
	
	marsRover executeCommands: #('f' 'b').
	
	self assertMarsRoverIsAt: initialPosition facing: initialCardinalPoint
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:02:17'!
test06
	
	marsRover executeCommands: #('f' 'b').
	
	self assertMarsRoverIsAt: initialPosition facing: initialCardinalPoint
	! !

!methodRemoval: MarsRoverTest #test06MovingFowardsAndBackwards stamp: 'IB 10/5/2023 21:02:17'!
test06MovingFowardsAndBackwards
	
	marsRover executeCommands: #('f' 'b').
	
	self assertMarsRoverIsAt: initialPosition facing: initialCardinalPoint
	!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:02:20'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:02:20'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:02:20'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:02:20'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:02:20'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:02:20'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:02:20'!
FAILURE!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:05:09' prior: 50651469!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			fowardMovements := aCommandList count: [:command | command = 'f']. 
			backwardMovements := aCommandList count: [:command | command = 'b'].
			fowardMovements timesRepeat: [ position := position + (0@1).
			backwardMovements timesRepeat: [position := position + (0@-1)]]]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:05:15' prior: 50651541!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			fowardMovements := aCommandList count: [:command | command = 'f']. 
			backwardMovements := aCommandList count: [:command | command = 'b'].
			
			fowardMovements timesRepeat: [ position := position + (0@1).
			backwardMovements timesRepeat: [position := position + (0@-1)]]]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:05:58' prior: 50651557!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			fowardMovements := aCommandList count: [:command | command = 'f']. 
			backwardMovements := aCommandList count: [:command | command = 'b'].
			position:= position + (0@fowardMovements - backwardMovements )]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:07:07' prior: 50651573!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			fowardMovements := aCommandList count: [:command | command = 'f']. 
			backwardMovements := aCommandList count: [:command | command = 'b'].
			position:= position + (0@ fowardMovements - backwardMovements )]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:07:13' prior: 50651587!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			fowardMovements := aCommandList count: [:command | command = 'f']. 
			backwardMovements := aCommandList count: [:command | command = 'b'].
			position:= position + (0@ (fowardMovements - backwardMovements) )]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:07:36' prior: 50651601!
executeCommands: aCommandList

	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			fowardMovements := aCommandList count: [:command | command = 'f']. 
			backwardMovements := aCommandList count: [:command | command = 'b']. 
			position:= position + (0@ (fowardMovements - backwardMovements) )]! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:07:57'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:07:57'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:07:57'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:07:57'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:07:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:07:57'!
PASSED!

----SNAPSHOT----(5 October 2023 21:07:59) CuisUniversity-5981.image priorSource: 10231150!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:08:42'!
test07RotateLeftOneTime
	
	marsRover executeCommands: #('l').
	
	self assertMarsRoverIsAt: initialPosition facing: #East.
	! !

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:08:44'!
FAILURE!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:11:07' prior: 50651615!
executeCommands: aCommandList
	
	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			aCommandList first = 'l' ifTrue: [cardinalPoint := #East] ifFalse:[ 
			fowardMovements := aCommandList count: [:command | command = 'f']. 
			backwardMovements := aCommandList count: [:command | command = 'b']. 
			position:= position + (0@ (fowardMovements - backwardMovements) )]]! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:11:09'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:11:09'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:11:09'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:11:09'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:11:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:11:09'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:11:09'!
FAILURE!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:11:09'!
FAILURE!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:11:28' prior: 50651659!
executeCommands: aCommandList
	
	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			aCommandList first = 'l' 
				ifTrue: [cardinalPoint := #East] 
				ifFalse:[ 
					fowardMovements := aCommandList count: [:command | command = 'f']. 
					backwardMovements := aCommandList count: [:command | command = 'b']. 
					position:= position + (0@ (fowardMovements - backwardMovements) )]]! !
!MarsRover methodsFor: 'accessing' stamp: 'IB 10/5/2023 21:11:37' prior: 50650489!
direction
	
	^cardinalPoint ! !
!MarsRover methodsFor: 'initialization' stamp: 'IB 10/5/2023 21:11:50' prior: 50650585!
initializeAt: anInitialPosition facing: aCardinalPoint

	position := anInitialPosition.
	cardinalPoint:= aCardinalPoint ! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:11:53'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:11:53'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:11:53'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:11:53'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:11:53'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:11:53'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:11:53'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:12:30'!
test08RotateLeftTwoTimes
	
	marsRover executeCommands: #('l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #South.
	! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:14:02' prior: 50651699!
executeCommands: aCommandList
	
	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			aCommandList first = 'l' 
				ifTrue: [aCommandList size = 1 ifTrue: [cardinalPoint := #East]ifFalse:[cardinalPoint := #South]] 
				ifFalse:[ 
					fowardMovements := aCommandList count: [:command | command = 'f']. 
					backwardMovements := aCommandList count: [:command | command = 'b']. 
					position:= position + (0@ (fowardMovements - backwardMovements) )]]! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:14:13' prior: 50651754!
executeCommands: aCommandList
	
	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			aCommandList first = 'l' 
				ifTrue: [aCommandList size = 1 
						ifTrue: [cardinalPoint := #East]
						ifFalse:[cardinalPoint := #South]] 
				ifFalse:[ 
					fowardMovements := aCommandList count: [:command | command = 'f']. 
					backwardMovements := aCommandList count: [:command | command = 'b']. 
					position:= position + (0@ (fowardMovements - backwardMovements) )]]! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:14:19'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:14:19'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:14:19'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:14:19'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:14:19'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:14:19'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:14:19'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:14:19'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:14:36'!
test08RotateLeftThreeTimes
	
	marsRover executeCommands: #('l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #South.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:14:42' prior: 50651815!
test08RotateLeftThreeTimes
	
	marsRover executeCommands: #('l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:14:47'!
test09RotateLeftThreeTimes
	
	marsRover executeCommands: #('l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	! !

!methodRemoval: MarsRoverTest #test08RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:14:49'!
test08RotateLeftThreeTimes
	
	marsRover executeCommands: #('l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:15:54' prior: 50651773!
executeCommands: aCommandList
	
	aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			aCommandList first = 'l' 
				ifTrue: [aCommandList size = 1 
						ifTrue: [cardinalPoint := #East]
						ifFalse:[aCommandList size = 2 
							ifTrue:[cardinalPoint := #South] 
							ifFalse:[cardinalPoint := #West]]] 
				ifFalse:[ 
					fowardMovements := aCommandList count: [:command | command = 'f']. 
					backwardMovements := aCommandList count: [:command | command = 'b']. 
					position:= position + (0@ (fowardMovements - backwardMovements) )]]! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:15:56'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:15:56'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:15:56'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:15:56'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:15:56'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:15:56'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:15:56'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:15:56'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:15:56'!
PASSED!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:19:08' prior: 50651844!
executeCommands: aCommandList
	aCommandList do:[:command| 
			command = 'l' ifTrue:[self rotateLeft].
			command = 'f' ifTrue:[self moveFoward].
			command = 'b' ifTrue:[self moveBackward]].
		
	"aCommandList isEmpty 
		ifTrue: [] 
		ifFalse: [|fowardMovements backwardMovements|
			aCommandList first = 'l' 
				ifTrue: [aCommandList size = 1 
						ifTrue: [cardinalPoint := #East]
						ifFalse:[aCommandList size = 2 
							ifTrue:[cardinalPoint := #South] 
							ifFalse:[cardinalPoint := #West]]] 
				ifFalse:[ 
					fowardMovements := aCommandList count: [:command | command = 'f']. 
					backwardMovements := aCommandList count: [:command | command = 'b']. 
					position:= position + (0@ (fowardMovements - backwardMovements) )]]"! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:19:23'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:19:23'!
ERROR!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:19:23'!
ERROR!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:19:23'!
ERROR!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:19:23'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:19:23'!
ERROR!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:19:23'!
ERROR!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:19:23'!
ERROR!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:19:23'!
ERROR!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:19:24'!
ERROR!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:19:36'!
moveFoward
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:20:47' prior: 50651947!
moveFoward
	position := position +(0@1).! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:20:51'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:20:51'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:20:51'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:20:51'!
ERROR!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:20:51'!
ERROR!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:20:51'!
ERROR!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:20:51'!
ERROR!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:20:51'!
ERROR!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:20:51'!
ERROR!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:20:52'!
ERROR!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:20:55'!
moveBackward
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:21:11' prior: 50651986!
moveBackward
	position := position  -(0@1).! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:21:12'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:21:12'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:21:12'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:21:12'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:21:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:21:12'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:21:12'!
ERROR!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:21:12'!
ERROR!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:21:12'!
ERROR!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:21:13'!
ERROR!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:21:17'!
rotateLeft
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:22:22' prior: 50652025!
rotateLeft
	cardinalPoint = #North ifTrue: [cardinalPoint := #East].! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:22:53' prior: 50652030!
rotateLeft
	cardinalPoint = #North ifTrue: [cardinalPoint := #East].
	cardinalPoint = #East ifTrue: [cardinalPoint := #South].
	cardinalPoint = #South ifTrue: [cardinalPoint := #West].
	
	! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:22:58' prior: 50652036!
rotateLeft
	cardinalPoint = #North ifTrue: [cardinalPoint := #East].
	cardinalPoint = #East ifTrue: [cardinalPoint := #South].
	cardinalPoint = #South ifTrue: [cardinalPoint := #West].
	
	! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:23:01'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:23:01'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:23:01'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:23:01'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:23:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:23:01'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:23:01'!
FAILURE!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:23:01'!
FAILURE!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:23:01'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:23:04'!
FAILURE!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:23:33'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:23:33'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:23:33'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:23:33'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:23:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:23:33'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:23:33'!
FAILURE!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:23:33'!
FAILURE!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:23:33'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:23:34'!
FAILURE!

marsRover direction!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:24:09'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:24:09'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:24:09'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:24:09'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:24:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:24:09'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:24:09'!
FAILURE!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:24:09'!
FAILURE!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:24:09'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:24:11'!
FAILURE!

cardinalPoint!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:25:30'!
FAILURE!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:25:30'!
FAILURE!

marsRover!

marsRover executeCommands: #('l').!
!MarsRoverTest methodsFor: 'running' stamp: 'IB 10/5/2023 21:26:18' prior: 50651242 overrides: 16961394!
setUp
	
	self halt.
	initialPosition := 0 @ 0.
	initialCardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: initialCardinalPoint! !

MarsRover at: initialPosition facing: initialCardinalPoint!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:27:04'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:27:12' prior: 50651649!
test07RotateLeftOneTime
	
	self halt.
	marsRover executeCommands: #('l').
	
	self assertMarsRoverIsAt: initialPosition facing: #East.
	! !
!MarsRoverTest methodsFor: 'running' stamp: 'IB 10/5/2023 21:27:20' prior: 50652152 overrides: 16961394!
setUp

	initialPosition := 0 @ 0.
	initialCardinalPoint := #North.
	marsRover := MarsRover at: initialPosition facing: initialCardinalPoint! !

marsRover!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:27:57' prior: 50652045!
rotateLeft
	cardinalPoint = #North ifTrue: [^cardinalPoint := #East].
	cardinalPoint = #East ifTrue: [^cardinalPoint := #South].
	cardinalPoint = #South ifTrue: [^cardinalPoint := #West].
	
	! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:27:59'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:27:59'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:27:59'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:27:59'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:27:59'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:27:59'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:27:59'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:27:59'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:28:03' prior: 50652165!
test07RotateLeftOneTime
	
	
	marsRover executeCommands: #('l').
	
	self assertMarsRoverIsAt: initialPosition facing: #East.
	! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:28:05'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:28:05'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:28:05'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:28:05'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:28:05'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:28:05'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:28:05'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:28:05'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:28:05'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:28:24'!
test09RotateLeftFourTimes
	
	marsRover executeCommands: #('l' 'l' 'l'  'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:28:25' prior: 50652247!
test09RotateLeftFourTimes
	
	marsRover executeCommands: #('l' 'l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:28:29'!
test10RotateLeftThreeTimes
	
	marsRover executeCommands: #('l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	! !

!methodRemoval: MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:28:30'!
test09RotateLeftThreeTimes
	
	marsRover executeCommands: #('l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:28:46'!
test10RotateLeftFourTimes
	
	marsRover executeCommands: #('l' 'l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	! !

!methodRemoval: MarsRoverTest #test09RotateLeftFourTimes stamp: 'IB 10/5/2023 21:28:46'!
test09RotateLeftFourTimes
	
	marsRover executeCommands: #('l' 'l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:28:50'!
test09RotateLeftThreeTimes
	
	marsRover executeCommands: #('l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	! !

!methodRemoval: MarsRoverTest #test10RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:28:50'!
test10RotateLeftThreeTimes
	
	marsRover executeCommands: #('l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #West.
	!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:31:22'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:31:22'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:31:22'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:31:22'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:31:22'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:31:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:31:22'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:31:22'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:31:22'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:31:22'!
PASSED!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:31:22'!
PASSED!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:31:34' prior: 50651892!
executeCommands: aCommandList
	aCommandList do:[:command| 
			command = 'l' ifTrue:[self rotateLeft].
			command = 'f' ifTrue:[self moveFoward].
			command = 'b' ifTrue:[self moveBackward]].
	! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:31:49' prior: 50652181!
rotateLeft
	cardinalPoint = #North ifTrue: [^cardinalPoint := #East].
	cardinalPoint = #East ifTrue: [^cardinalPoint := #South].
	cardinalPoint = #South ifTrue: [^cardinalPoint := #West].
	cardinalPoint = #West ifTrue: [^cardinalPoint := #North].
	
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:31:56' prior: 50652276!
test10RotateLeftFourTimes
	
	marsRover executeCommands: #('l' 'l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: #North.
	! !

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:31:57'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:31:57'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:31:57'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:31:57'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:31:57'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:31:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:31:57'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:31:57'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:31:57'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:31:57'!
PASSED!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:31:57'!
PASSED!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:33:34' prior: 50652347!
rotateLeft
	cardinalPoint:= cardinalPoint leftCardinalPoint .
	"cardinalPoint = #North ifTrue: [^cardinalPoint := #East].
	cardinalPoint = #East ifTrue: [^cardinalPoint := #South].
	cardinalPoint = #South ifTrue: [^cardinalPoint := #West].
	cardinalPoint = #West ifTrue: [^cardinalPoint := #North].
	"
	! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:33:37'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:33:37'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:33:37'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:33:37'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:33:37'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:33:37'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:33:37'!
ERROR!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:33:37'!
ERROR!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:33:37'!
ERROR!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:33:37'!
ERROR!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:33:38'!
ERROR!

Object subclass: #CardinalPoints
	instanceVariableNames: 'position cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #CardinalPoints category: 'MarsRover' stamp: 'IB 10/5/2023 21:33:55'!
Object subclass: #CardinalPoints
	instanceVariableNames: 'position cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoints subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'IB 10/5/2023 21:34:06'!
CardinalPoints subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #CardinalPoints
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #CardinalPoints category: 'MarsRover' stamp: 'IB 10/5/2023 21:34:10'!
Object subclass: #CardinalPoints
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoints subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'IB 10/5/2023 21:34:13'!
CardinalPoints subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoints subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'IB 10/5/2023 21:34:16'!
CardinalPoints subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoints subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'IB 10/5/2023 21:34:19'!
CardinalPoints subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'running' stamp: 'IB 10/5/2023 21:34:42' prior: 50652173 overrides: 16961394!
setUp

	initialPosition := 0 @ 0.
	initialCardinalPoint := North.
	marsRover := MarsRover at: initialPosition facing: initialCardinalPoint! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:34:49' prior: 50652214!
test07RotateLeftOneTime
	
	
	marsRover executeCommands: #('l').
	
	self assertMarsRoverIsAt: initialPosition facing: East.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:34:52' prior: 50651746!
test08RotateLeftTwoTimes
	
	marsRover executeCommands: #('l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: South.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:34:58' prior: 50652290!
test09RotateLeftThreeTimes
	
	marsRover executeCommands: #('l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: West.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:35:02' prior: 50652358!
test10RotateLeftFourTimes
	
	marsRover executeCommands: #('l' 'l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: North.
	! !

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:35:03'!
ERROR!
!North class methodsFor: 'x' stamp: 'IB 10/5/2023 21:35:10'!
leftCardinalPoint
	self shouldBeImplemented.! !
!North class methodsFor: 'x' stamp: 'IB 10/5/2023 21:35:17' prior: 50652548!
leftCardinalPoint
	^East new.! !

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:35:31'!
ERROR!
!East methodsFor: 'x' stamp: 'IB 10/5/2023 21:35:36'!
leftCardinalPoint
	self shouldBeImplemented.! !
!East methodsFor: 'x' stamp: 'IB 10/5/2023 21:35:45' prior: 50652558!
leftCardinalPoint
	^South! !
!East methodsFor: 'x' stamp: 'IB 10/5/2023 21:35:46' prior: 50652562!
leftCardinalPoint
	^South new.! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:35:54'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:35:54'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:35:54'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:35:54'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:35:54'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:35:54'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:35:54'!
FAILURE!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:35:54'!
FAILURE!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:35:54'!
ERROR!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:35:54'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:36:00' prior: 50652538!
test10RotateLeftFourTimes
	
	marsRover executeCommands: #('l' 'l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: North new.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:36:03' prior: 50652531!
test09RotateLeftThreeTimes
	
	marsRover executeCommands: #('l' 'l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: West new.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:36:08' prior: 50652524!
test08RotateLeftTwoTimes
	
	marsRover executeCommands: #('l' 'l').
	
	self assertMarsRoverIsAt: initialPosition facing: South new.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:36:11' prior: 50652517!
test07RotateLeftOneTime
	
	
	marsRover executeCommands: #('l').
	
	self assertMarsRoverIsAt: initialPosition facing: East new.
	! !

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:36:17'!
FAILURE!
!North methodsFor: 'nil' stamp: 'IB 10/5/2023 21:36:42'!
leftCardinalPoint
	^East new.! !

!methodRemoval: North class #leftCardinalPoint stamp: 'IB 10/5/2023 21:36:44'!
leftCardinalPoint
	^East new.!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:36:50'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:36:50'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:36:50'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:36:50'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:36:50'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:36:50'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:36:50'!
ERROR!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:36:50'!
ERROR!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:36:50'!
ERROR!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:36:50'!
ERROR!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:36:51'!
ERROR!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:37:08'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:37:08'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:37:08'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:37:08'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:37:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:37:08'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:37:08'!
ERROR!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:37:08'!
ERROR!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:37:08'!
ERROR!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:37:08'!
ERROR!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:37:09'!
ERROR!
!MarsRoverTest methodsFor: 'running' stamp: 'IB 10/5/2023 21:37:27' prior: 50652509 overrides: 16961394!
setUp

	initialPosition := 0 @ 0.
	initialCardinalPoint := North new.
	marsRover := MarsRover at: initialPosition facing: initialCardinalPoint! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:37:28'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:37:28'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:37:28'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:37:28'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:37:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:37:28'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:37:28'!
FAILURE!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:37:28'!
FAILURE!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:37:28'!
ERROR!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:37:28'!
ERROR!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:37:30'!
FAILURE!
!CardinalPoints methodsFor: 'nil' stamp: 'IB 10/5/2023 21:38:25' overrides: 16901772!
= aCardinalPoint
	^self isKindOf: aCardinalPoint 
! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:38:28'!
FAILURE!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:38:28'!
FAILURE!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:38:28'!
FAILURE!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:38:28'!
FAILURE!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:38:28'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:38:28'!
FAILURE!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:38:28'!
FAILURE!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:38:28'!
FAILURE!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:38:28'!
ERROR!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:38:28'!
ERROR!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:38:32'!
FAILURE!
!CardinalPoints methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 21:39:39' prior: 50652744 overrides: 16901772!
= aCardinalPoint
self halt.
	^self isKindOf: aCardinalPoint 
! !
!CardinalPoints methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 21:39:48' prior: 50652783 overrides: 16901772!
= aCardinalPoint
	self halt.
	^self isKindOf: aCardinalPoint 
! !

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:39:49'!
ERROR!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:39:49'!
ERROR!

self isKindOf: aCardinalPoint!

self!

aCardinalPoint!

self class = aCardinalPoint class!
!CardinalPoints methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 21:40:40' prior: 50652789 overrides: 16901772!
= aCardinalPoint
	self halt.
	^self class = aCardinalPoint class
! !

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:40:45'!
ERROR!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:40:45'!
ERROR!
!CardinalPoints methodsFor: 'as yet unclassified' stamp: 'IB 10/5/2023 21:40:53' prior: 50652804 overrides: 16901772!
= aCardinalPoint
	
	^self class = aCardinalPoint class
! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:40:54'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:41:01'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:41:01'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:41:01'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:41:01'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:41:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:41:01'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:41:01'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:41:01'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:41:01'!
ERROR!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:41:01'!
ERROR!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:41:05'!
ERROR!
!South methodsFor: 'x' stamp: 'IB 10/5/2023 21:41:11'!
leftCardinalPoint
	self shouldBeImplemented.! !
!South methodsFor: 'x' stamp: 'IB 10/5/2023 21:41:21' prior: 50652856!
leftCardinalPoint
	^West new.! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:41:22'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:41:22'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:41:22'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:41:22'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:41:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:41:22'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:41:22'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:41:22'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:41:22'!
PASSED!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:41:22'!
ERROR!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:41:22'!
ERROR!
!West methodsFor: 'x' stamp: 'IB 10/5/2023 21:41:27'!
leftCardinalPoint
	self shouldBeImplemented.! !
!West methodsFor: 'x' stamp: 'IB 10/5/2023 21:41:33' prior: 50652896!
leftCardinalPoint
	^North new.! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:41:39'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:41:39'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:41:39'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:41:39'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:41:39'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:41:39'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:41:39'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:41:39'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:41:39'!
PASSED!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:41:39'!
PASSED!
!CardinalPoints methodsFor: 'x' stamp: 'IB 10/5/2023 21:42:02'!
leftCardinalPoint

	self subclassResponsibility! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:42:11'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:42:11'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:42:11'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:42:11'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:42:11'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:42:11'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:42:11'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:42:11'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:42:11'!
PASSED!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:42:11'!
PASSED!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:42:54' prior: 50652398!
rotateLeft
	cardinalPoint:= cardinalPoint leftCardinalPoint .
! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:44:56'!
test11RotateRightWhenFacingNorthLeftYouFacingWest
	
	marsRover executeCommands: #('r').
	
	self assertMarsRoverIsAt: initialPosition facing:West new.
	! !

!testRun: #MarsRoverTest #test11RotateRightWhenFacingNorthLeftYouFacingWest stamp: 'IB 10/5/2023 21:44:58'!
FAILURE!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:45:15' prior: 50652337!
executeCommands: aCommandList
	aCommandList do:[:command| 
			command = 'l' ifTrue:[self rotateLeft].
			command = 'r' ifTrue:[self rotateRight].
			command = 'f' ifTrue:[self moveFoward].
			command = 'b' ifTrue:[self moveBackward]].
	! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:45:17'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:45:17'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:45:17'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:45:17'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:45:17'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:45:17'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:45:17'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:45:17'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:45:17'!
PASSED!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:45:17'!
PASSED!

!testRun: #MarsRoverTest #test11RotateRightWhenFacingNorthLeftYouFacingWest stamp: 'IB 10/5/2023 21:45:17'!
ERROR!

!testRun: #MarsRoverTest #test11RotateRightWhenFacingNorthLeftYouFacingWest stamp: 'IB 10/5/2023 21:45:17'!
ERROR!
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:45:25'!
rotateRight
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:45:42' prior: 50653032!
rotateRight
	cardinalPoint ! !
!MarsRover methodsFor: 'executing - commands' stamp: 'IB 10/5/2023 21:45:55' prior: 50653037!
rotateRight
	cardinalPoint:= cardinalPoint rightCardinalPoint .! !

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:45:57'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:45:57'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:45:57'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:45:57'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:45:57'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:45:57'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:45:57'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:45:57'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:45:57'!
PASSED!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:45:57'!
PASSED!

!testRun: #MarsRoverTest #test11RotateRightWhenFacingNorthLeftYouFacingWest stamp: 'IB 10/5/2023 21:45:57'!
ERROR!

!testRun: #MarsRoverTest #test11RotateRightWhenFacingNorthLeftYouFacingWest stamp: 'IB 10/5/2023 21:45:57'!
ERROR!
!North methodsFor: 'x' stamp: 'IB 10/5/2023 21:46:00'!
rightCardinalPoint
	self shouldBeImplemented.! !
!North methodsFor: 'x' stamp: 'IB 10/5/2023 21:46:11' prior: 50653082!
rightCardinalPoint
	^West new.! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:47:07'!
test12
	
	marsRover executeCommands: #( 'r' 'r').
	
	self assertMarsRoverIsAt: initialPosition facing:South new.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:47:38'!
test12RotateRightWhenFacingWestLeftYouFacingSouth
	
	marsRover executeCommands: #( 'r' 'r').
	
	self assertMarsRoverIsAt: initialPosition facing:South new.
	! !

!methodRemoval: MarsRoverTest #test12 stamp: 'IB 10/5/2023 21:47:43'!
test12
	
	marsRover executeCommands: #( 'r' 'r').
	
	self assertMarsRoverIsAt: initialPosition facing:South new.
	!

!testRun: #MarsRoverTest #test12RotateRightWhenFacingWestLeftYouFacingSouth stamp: 'IB 10/5/2023 21:47:47'!
ERROR!

!testRun: #MarsRoverTest #test12RotateRightWhenFacingWestLeftYouFacingSouth stamp: 'IB 10/5/2023 21:47:47'!
ERROR!
!West methodsFor: 'x' stamp: 'IB 10/5/2023 21:47:54'!
rightCardinalPoint
	self shouldBeImplemented.! !
!West methodsFor: 'x' stamp: 'IB 10/5/2023 21:48:05' prior: 50653116!
rightCardinalPoint
	
		^South new! !

!testRun: #MarsRoverTest #test12RotateRightWhenFacingWestLeftYouFacingSouth stamp: 'IB 10/5/2023 21:48:06'!
PASSED!

!testRun: #MarsRoverTest #test12RotateRightWhenFacingWestLeftYouFacingSouth stamp: 'IB 10/5/2023 21:48:09'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test11RotateRightWhenFacingNorthLeftYouFacingWest stamp: 'IB 10/5/2023 21:48:12'!
PASSED!

!testRun: #MarsRoverTest #test12RotateRightWhenFacingWestLeftYouFacingSouth stamp: 'IB 10/5/2023 21:48:12'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:48:37'!
test13RotateRightWhenFacingSouthLeftYouFacingEast
	
	marsRover executeCommands: #( 'r' 'r').
	
	self assertMarsRoverIsAt: initialPosition facing:East new.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:48:40' prior: 50653168!
test13RotateRightWhenFacingSouthLeftYouFacingEast
	
	marsRover executeCommands: #( 'r' 'r' 'r').
	
	self assertMarsRoverIsAt: initialPosition facing:East new.
	! !

!testRun: #MarsRoverTest #test13RotateRightWhenFacingSouthLeftYouFacingEast stamp: 'IB 10/5/2023 21:48:42'!
ERROR!
!South methodsFor: 'x' stamp: 'IB 10/5/2023 21:48:46'!
rightCardinalPoint
	self shouldBeImplemented.! !
!South methodsFor: 'x' stamp: 'IB 10/5/2023 21:48:54' prior: 50653187!
rightCardinalPoint
	
		^East new! !

!testRun: #MarsRoverTest #test13RotateRightWhenFacingSouthLeftYouFacingEast stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test11RotateRightWhenFacingNorthLeftYouFacingWest stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test12RotateRightWhenFacingWestLeftYouFacingSouth stamp: 'IB 10/5/2023 21:48:55'!
PASSED!

!testRun: #MarsRoverTest #test13RotateRightWhenFacingSouthLeftYouFacingEast stamp: 'IB 10/5/2023 21:48:55'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:49:21'!
test13RotateRightWhenFacingEastLeftYouFacingNorth
	
	marsRover executeCommands: #( 'r' 'r' 'r' 'r').
	
	self assertMarsRoverIsAt: initialPosition facing:North new.
	! !
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 10/5/2023 21:49:42'!
test14RotateRightWhenFacingEastLeftYouFacingNorth
	
	marsRover executeCommands: #( 'r' 'r' 'r' 'r').
	
	self assertMarsRoverIsAt: initialPosition facing:North new.
	! !

!methodRemoval: MarsRoverTest #test13RotateRightWhenFacingEastLeftYouFacingNorth stamp: 'IB 10/5/2023 21:49:46'!
test13RotateRightWhenFacingEastLeftYouFacingNorth
	
	marsRover executeCommands: #( 'r' 'r' 'r' 'r').
	
	self assertMarsRoverIsAt: initialPosition facing:North new.
	!

!testRun: #MarsRoverTest #test14RotateRightWhenFacingEastLeftYouFacingNorth stamp: 'IB 10/5/2023 21:49:47'!
ERROR!

!testRun: #MarsRoverTest #test14RotateRightWhenFacingEastLeftYouFacingNorth stamp: 'IB 10/5/2023 21:49:48'!
ERROR!
!East methodsFor: 'x' stamp: 'IB 10/5/2023 21:49:51'!
rightCardinalPoint
	self shouldBeImplemented.! !
!East methodsFor: 'x' stamp: 'IB 10/5/2023 21:49:56' prior: 50653270!
rightCardinalPoint
	
	^North new! !

!testRun: #MarsRoverTest #test14RotateRightWhenFacingEastLeftYouFacingNorth stamp: 'IB 10/5/2023 21:49:57'!
PASSED!

!testRun: #MarsRoverTest #test01WhenNoCommandsExecutedStaysStills stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test02MovingFowardOneTime stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test03MovingFowardMoreThanOneTime stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test04MovingBackwardsOneTime stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test05MovingBackwardsMoreThanOneTime stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test07RotateLeftOneTime stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test08RotateLeftTwoTimes stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test09RotateLeftThreeTimes stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test10RotateLeftFourTimes stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test11RotateRightWhenFacingNorthLeftYouFacingWest stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test12RotateRightWhenFacingWestLeftYouFacingSouth stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test13RotateRightWhenFacingSouthLeftYouFacingEast stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

!testRun: #MarsRoverTest #test14RotateRightWhenFacingEastLeftYouFacingNorth stamp: 'IB 10/5/2023 21:50:00'!
PASSED!

----SNAPSHOT----(5 October 2023 21:50:17) CuisUniversity-5981.image priorSource: 10239851!

----STARTUP---- (2 November 2023 18:27:40) as /home/clinux01/Escritorio/linux64/CuisUniversity-MisLibros.image!


!classRemoval: #MarsRover stamp: 'Joaco 11/2/2023 18:27:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #West stamp: 'Joaco 11/2/2023 18:27:59'!
CardinalPoints subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #South stamp: 'Joaco 11/2/2023 18:27:59'!
CardinalPoints subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #North stamp: 'Joaco 11/2/2023 18:27:59'!
CardinalPoints subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #East stamp: 'Joaco 11/2/2023 18:27:59'!
CardinalPoints subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #CardinalPoints stamp: 'Joaco 11/2/2023 18:28:00'!
Object subclass: #CardinalPoints
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverTest stamp: 'Joaco 11/2/2023 18:28:00'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition initialCardinalPoint marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

----End fileIn of /home/clinux01/Escritorio/linux64/TusLibros.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'Joaco 11/2/2023 18:31:04'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'Joaco 11/2/2023 18:32:06'!
test01CashierCantCheckoutAnEmptyCart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Joaco 11/2/2023 18:32:20' prior: 50653567!
test01CashierCantCheckoutAnEmptyCart! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Joaco 11/2/2023 18:34:04'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Joaco 11/2/2023 18:35:53' prior: 50653572!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier |
	aCashier := Cashier new.
	
	self should: [ | aCart |aCashier checkout: aCart] raise: Error - MessageNotUnderstood withExceptionDo: [ :anError | self assert: anError message equals: Cashier CanNotCheckoutEmptyCartErrorDescription].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Joaco 11/2/2023 18:36:58' prior: 50653583!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: 'validItems'.
	
	self should: [ aCashier checkout: aCart] raise: Error - MessageNotUnderstood withExceptionDo: [ :anError | self assert: anError message equals: Cashier CanNotCheckoutEmptyCartErrorDescription].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Joaco 11/2/2023 18:37:10' prior: 50653596!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: 'validItems'.
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError message equals: Cashier CanNotCheckoutEmptyCartErrorDescription
		].! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:37:29'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 18:37:40'!
checkout: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 18:37:58' prior: 50653627!
checkout: aCart 
	self assertCartIsNotEmpty.! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:38:02'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 18:38:07'!
assertCartIsNotEmpty
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Joaco 11/2/2023 18:39:17' prior: 50653610!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: 'validItems'.
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError message equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:39:30'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 18:39:49' prior: 50653632!
checkout: aCart 
	self assertCartIsNotEmpty: aCart.! !

!methodRemoval: Cashier #assertCartIsNotEmpty stamp: 'Joaco 11/2/2023 18:39:53'!
assertCartIsNotEmpty
	self shouldBeImplemented.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Joaco 11/2/2023 18:40:06' prior: 50653644!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: 'validItems'.
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:40:09'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 18:40:14'!
assertCartIsNotEmpty: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 18:41:11' prior: 50653687!
assertCartIsNotEmpty: aCart 
	aCart isEmpty ifTrue: [ self error: Cart CanNotCheckoutAnEmptyCartErrorDescription].! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:41:14'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 18:41:23' prior: 50653692!
assertCartIsNotEmpty: aCart 
	aCart isEmpty ifTrue: [ self error: Cashier CanNotCheckoutAnEmptyCartErrorDescription].! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:41:24'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'Joaco 11/2/2023 18:41:37'!
CanNotCheckoutAnEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'Joaco 11/2/2023 18:42:15' prior: 50653712!
CanNotCheckoutAnEmptyCartErrorDescription
	^'No se puede realizar el checkout sobre un carrito vacio!!'! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:42:16'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:42:16'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'Joaco 11/2/2023 18:42:50' prior: 50653670!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: 'validItems'.
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:43:23'!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: 'validItems'.
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:45:21' prior: 50653745!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'validItem').
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:46:44' prior: 50653759!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'validItem').
	aCart add: 'validItem'.
		
	aCashier
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:47:52' prior: 50653774!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'validItem').
	aCart add: 'validItem'.
		
	aCashier checkout: aCart.
	
	self assert: aCashier totalCheckoutAmount equals: 100.
! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 18:48:04'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'Joaco 11/2/2023 18:48:20'!
totalCheckoutAmount
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'Joaco 11/2/2023 18:48:29' prior: 50653798!
totalCheckoutAmount
	^100.! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 18:48:30'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:48:30'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 18:48:30'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:48:44'!
test03CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'validItem').
	aCart add: 'validItem'.
		
	aCashier checkout: aCart.
	
	self assert: aCashier totalCheckoutAmount equals: 100.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:48:52'!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'validItem').
	aCart add: 'validItem'.
		
	aCashier checkout: aCart.
	
	self assert: aCashier totalCheckoutAmount equals: 100.
! !

!methodRemoval: CashierTest #test03CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 18:49:34'!
test03CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'validItem').
	aCart add: 'validItem'.
		
	aCashier checkout: aCart.
	
	self assert: aCashier totalCheckoutAmount equals: 100.
!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:50:54' prior: 50653828!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'validItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOccurrences: 1.
		
	aCashier checkout: aCart.
	
	self assert: aCashier totalCheckoutAmount equals: 100.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:51:01' prior: 50653851!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'validItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOccurrences: 1.
		
	aCashier checkout: aCart.
	
	self assert: aCashier totalCheckoutAmount equals: 350.
! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 18:51:04'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 18:53:21'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:53:21'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 18:53:21'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 18:53:21'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 18:53:21'!
ERROR!

!methodRemoval: CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 18:53:44'!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'validItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOccurrences: 1.
		
	aCashier checkout: aCart.
	
	self assert: aCashier totalCheckoutAmount equals: 350.
!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 18:53:48'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:53:59' prior: 50653783!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'validItem').
	aCart add: 'validItem'.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 100.
! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 18:54:00'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 18:54:11' prior: 50653661!
checkout: aCart 
	self assertCartIsNotEmpty: aCart.
	^100.! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 18:54:18'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 18:54:18'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 18:54:18'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:51:01'!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'validItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOccurrences: 1.
		
	aCashier checkout: aCart.
	
	self assert: aCashier totalCheckoutAmount equals: 350.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 18:55:12' prior: 50653949!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier new.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'validItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOccurrences: 1.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 350.
! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 18:55:15'!
ERROR!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/TerseGuide.pck.st----!

aCart := Cart acceptingItemsOf: (Array with: 'validItem1' with: 'validItem2').!

aCart := Cart acceptingItemsOf: (Array with: 'validItem1' with: 'validItem2').!

 a Cart .!

 a Cart .!
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 19:03:41' prior: 50653934!
checkout: aCart 
	|totalAmountOfPayment|
	
	totalAmountOfPayment := 0.
	self assertCartIsNotEmpty: aCart.
	aCart items do: [:aCartItem | ]! !
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 19:06:52' prior: 50656907!
checkout: aCart 
	|totalAmountOfPayment|
	
	totalAmountOfPayment := 0.
	self assertCartIsNotEmpty: aCart.
	aCart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) * (aCart items occurrencesOf: aCartItem) + totalAmountOfPayment ].! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:06:59'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:06:59'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:06:59'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:07:02'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'Joaco 11/2/2023 19:07:10'!
items
	self shouldBeImplemented.
	^items! !
!Cart methodsFor: 'queries' stamp: 'Joaco 11/2/2023 19:07:16' prior: 50656939!
items
	^items.! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:07:18'!
ERROR!
!Cashier methodsFor: 'queries' stamp: 'Joaco 11/2/2023 19:07:28'!
itemPrice: aCartItem 
	self shouldBeImplemented.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Joaco 11/2/2023 19:08:05'!
Object subclass: #Cashier
	instanceVariableNames: 'itemsPriceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'queries' stamp: 'Joaco 11/2/2023 19:08:04' prior: 50656949!
itemPrice: aCartItem 
	^itemsPriceList at: aCartItem.! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:08:08'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:11:22' prior: 50653964!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'validItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOccurrences: 1.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 350.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:12:43'!
priceList
	|aPriceList|
	
	aPriceList := Dictionary new.
	aPriceList add: 'aValidItem' -> 100.
	aPriceList add: 'anotherValidItem' -> 100.! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:12:51'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 19:12:55'!
withPriceList: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceList: aRenameMe1 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 19:13:01' prior: 50656994!
withPriceList: aRenameMe1
	^self new initializeWithPriceList: aRenameMe1 ! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:13:03'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Joaco 11/2/2023 19:13:22'!
Object subclass: #Cashier
	instanceVariableNames: 'itemsPriceList renameMe1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'Joaco 11/2/2023 19:13:22'!
initializeWithPriceList: aRenameMe1 
	self shouldBeImplemented.
	renameMe1 := aRenameMe1.! !
!Cashier methodsFor: 'initialization' stamp: 'Joaco 11/2/2023 19:13:55' prior: 50657019!
initializeWithPriceList: aPriceList
	itemsPriceList := aPriceList ! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:13:56'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:14:11'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:14:24' prior: 50656969!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOccurrences: 1.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 350.
! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:14:25'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:14:53' prior: 50657038!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 350.
! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:14:54'!
ERROR!
!Cashier methodsFor: 'queries' stamp: 'Joaco 11/2/2023 19:16:07' prior: 50656961!
itemPrice: aCartItem 
	^itemsPriceList at: aCartItem ifEmpty: [].! !

!methodRemoval: Cashier #totalCheckoutAmount stamp: 'Joaco 11/2/2023 19:16:16'!
totalCheckoutAmount
	^100.!
!Cashier class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 19:16:29' prior: 50657003!
withPriceList: aPriceList
	^self new initializeWithPriceList: aPriceList ! !

aDict := Dictionary new.!

aDict add: 'fdafsd' -> 2.!

aDict at: 'fdafsf'.!

aDict at: 'fdafsd'.!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:18:01'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:18:01'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:18:37' prior: 50656983!
priceList
	|aPriceList|
	
	aPriceList := Dictionary new.
	aPriceList add: 'aValidItem' -> 100.
	aPriceList add: 'anotherValidItem' -> 100.
	
	^aPriceList.! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:18:42'!
ERROR!
!Cashier methodsFor: 'queries' stamp: 'Joaco 11/2/2023 19:18:51' prior: 50657074!
itemPrice: aCartItem 
	^itemsPriceList at: aCartItem.! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:18:52'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 19:19:07' prior: 50656915!
checkout: aCart 
	|totalAmountOfPayment|
	
	totalAmountOfPayment := 0.
	self assertCartIsNotEmpty: aCart.
	aCart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) * (aCart items occurrencesOf: aCartItem) + totalAmountOfPayment ].
	^totalAmountOfPayment.! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:19:10'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:19:10'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:19:21' prior: 50657099!
priceList
	|aPriceList|
	
	aPriceList := Dictionary new.
	aPriceList add: 'aValidItem' -> 100.
	aPriceList add: 'anotherValidItem' -> 50.
	
	^aPriceList.! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:19:26'!
FAILURE!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:19:26'!
FAILURE!

aCart items occurrencesOf: aCartItem!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:21:00'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 19:21:13' prior: 50657120!
checkout: aCart 
	|totalAmountOfPayment|
	
	totalAmountOfPayment := 0.
	self assertCartIsNotEmpty: aCart.
	aCart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) + totalAmountOfPayment ].
	^totalAmountOfPayment.! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:21:20'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:21:20'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:21:20'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:21:20'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:21:20'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:21:44'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:22:17' prior: 50653920!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList .
	aCart := Cart acceptingItemsOf: (Array with: 'validItem').
	aCart add: 'validItem'.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 100.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:22:19' prior: 50657190!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: (Array with: 'validItem').
	aCart add: 'validItem'.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 100.
! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:22:21'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:22:28' prior: 50657201!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem').
	aCart add: 'validItem'.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 100.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:22:32' prior: 50657216!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem').
	aCart add: 'aValidItem'.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 100.
! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:22:36'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:22:36'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:22:36'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:22:36'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:23:04'!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 350.
! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Joaco 11/2/2023 19:26:59'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate securityCode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:26:36' prior: 50657252!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart aCreditCard |
	
	aCashier := Cashier withPriceList: self priceList.
	
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	aCreditCard := CreditCard number: '123456789' expirationDate: '17/08/2023' securityCode: '123'.
	
	
	self assert: (aCashier checkout: aCart withPaymentMethod: aCreditCard) equals: 350.
! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:27:05'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 19:27:09'!
number: aRenameMe1 expirationDate: aRenameMe2 securityCode: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aRenameMe1 expirationDate: aRenameMe2 securityCode: aRenameMe3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 19:27:55' prior: 50657297!
number: aCreditCardNumber expirationDate: aCreditCardExpirationDate securityCode: aCreditCardSecurityCode 
	^self new initializeWithNumber: aCreditCardNumber expirationDate: aCreditCardExpirationDate securityCode: aCreditCardSecurityCode ! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:27:59'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Joaco 11/2/2023 19:28:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate securityCode creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Joaco 11/2/2023 19:28:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate securityCode creditCardNumber creditCardExpirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Joaco 11/2/2023 19:28:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate securityCode creditCardNumber creditCardExpirationDate creditCardSecurityCode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'Joaco 11/2/2023 19:28:07'!
initializeWithNumber: aCreditCardNumber expirationDate: aCreditCardExpirationDate securityCode: aCreditCardSecurityCode 
	self shouldBeImplemented.
	creditCardNumber := aCreditCardNumber.
	creditCardExpirationDate := aCreditCardExpirationDate.
	creditCardSecurityCode := aCreditCardSecurityCode.! !
!CreditCard methodsFor: 'initialization' stamp: 'Joaco 11/2/2023 19:28:11' prior: 50657350!
initializeWithNumber: aCreditCardNumber expirationDate: aCreditCardExpirationDate securityCode: aCreditCardSecurityCode 
	creditCardNumber := aCreditCardNumber.
	creditCardExpirationDate := aCreditCardExpirationDate.
	creditCardSecurityCode := aCreditCardSecurityCode.! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:28:17'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 19:28:25'!
checkout: aCart withPaymentMethod: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 19:29:20' prior: 50657378!
checkout: aCart withPaymentMethod: aCreditCard 
	| totalAmountOfPayment |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	aCart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) + totalAmountOfPayment ].
	^totalAmountOfPayment.! !
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 19:29:34' prior: 50657384!
checkout: aCart withPaymentMethod: aCreditCard 
	| totalAmountOfPayment |
	
	totalAmountOfPayment := 0.
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	aCart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) + totalAmountOfPayment ].
	^totalAmountOfPayment.! !
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 19:29:45' prior: 50657396!
checkout: aCart withPaymentMethod: aCreditCard 
	| totalAmountOfPayment |
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	
	totalAmountOfPayment := 0.
	aCart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) + totalAmountOfPayment ].
	^totalAmountOfPayment.! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:29:46'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 19:29:53'!
assertCreditCardIsNotExpired: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 19:31:08' prior: 50657425!
assertCreditCardIsNotExpired: aCreditCard 
	aCreditCard isExpired ifTrue: [self error: Cashier CanNotCheckoutIfCreditaCardIsExpiredErrorDescription]! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:31:13'!
ERROR!
!CreditCard methodsFor: 'queries' stamp: 'Joaco 11/2/2023 19:31:22'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'queries' stamp: 'Joaco 11/2/2023 19:32:12' prior: 50657441!
isExpired
	FixedGregorianDate today < expirationDate.! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:32:14'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:32:49' prior: 50657274!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart aCreditCard |
	
	aCashier := Cashier withPriceList: self priceList.
	
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	aCreditCard := CreditCard number: '123456789' expirationDate: FixedGregorianDate yesterday securityCode: '123'.
	
	
	self assert: (aCashier checkout: aCart withPaymentMethod: aCreditCard) equals: 350.
! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:32:50'!
ERROR!
!CreditCard methodsFor: 'queries' stamp: 'Joaco 11/2/2023 19:33:36' prior: 50657445!
isExpired
	FixedGregorianDate today < creditCardExpirationDate.! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:33:38'!
ERROR!
!CreditCard methodsFor: 'queries' stamp: 'Joaco 11/2/2023 19:33:50' prior: 50657477!
isExpired
	^FixedGregorianDate today < creditCardExpirationDate.! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:33:51'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:33:51'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:33:51'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:33:51'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:33:51'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:34:44'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:35:04' prior: 50657454!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart aCreditCard |
	
	aCashier := Cashier withPriceList: self priceList.
	
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	aCreditCard := CreditCard number: '123456789' expirationDate: FixedGregorianDate yesterday securityCode: '123'.
	
	
	self assert: (aCashier checkout: aCart withPaymentMethod: aCreditCard) equals: 350.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:37:01' prior: 50657553!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart aCreditCard |
	
	aCashier := Cashier withPriceList: self priceList.
	
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	aCreditCard := CreditCard number: '123456789' expirationDate: FixedGregorianDate yesterday securityCode: '123'.
	
	
	self should:[
			aCashier checkout: aCart withPaymentMethod: aCreditCard.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpired. 			
		]! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:37:05'!
FAILURE!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:37:16'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:40:09' prior: 50657573!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart aCreditCard |
	
	aCashier := Cashier withPriceList: self priceList.
	
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	aCreditCard := CreditCard number: '123456789' expirationDate: FixedGregorianDate tomorrow securityCode: '123'.
	
	
	self should:[
			aCashier checkout: aCart withPaymentMethod: aCreditCard.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpired. 			
		]! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:40:10'!
ERROR!
!Cashier methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 19:40:19' prior: 50657430!
assertCreditCardIsNotExpired: aCreditCard 
	aCreditCard isExpired ifTrue: [self error: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription]! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:40:21'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'Joaco 11/2/2023 19:40:28'!
CanNotCheckoutIfCreditCardIsExpiredErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'Joaco 11/2/2023 19:41:01' prior: 50657644!
CanNotCheckoutIfCreditCardIsExpiredErrorDescription
	^'No se puede completar el checkout con una tarjeta vencida. Vuelva a intentarlo con un método de pago valido'! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:41:02'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:41:33' prior: 50657605!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart aCreditCard |
	
	aCashier := Cashier withPriceList: self priceList.
	
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	aCreditCard := CreditCard number: '123456789' expirationDate: FixedGregorianDate tomorrow securityCode: '123'.
	
	
	self should:[
			aCashier checkout: aCart withPaymentMethod: aCreditCard.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription . 			
		]! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:41:35'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:41:35'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:41:35'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:41:35'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:41:35'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:42:16' prior: 50653731!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList .
	aCart := Cart acceptingItemsOf: 'aValidItem'.
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:42:31' prior: 50657705!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList .
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem').
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:42:39'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:42:39'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:42:39'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:42:39'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:42:39'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:42:54' prior: 50657720!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList .
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem')..
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:42:55' prior: 50657753!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList .
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem').
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:43:25'!
notExpiredCreditCard
	^CreditCard number: '123456789' expirationDate: FixedGregorianDate tomorrow securityCode: '123'.! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:43:30'!
expiredCreditCard
	^CreditCard number: '123456789' expirationDate: FixedGregorianDate tomorrow securityCode: '123'.! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:43:35' prior: 50657783!
notExpiredCreditCard
	^CreditCard number: '123456789' expirationDate: FixedGregorianDate yesterday securityCode: '123'.! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:43:49'!
validItems
	^CreditCard number: '123456789' expirationDate: FixedGregorianDate yesterday securityCode: '123'.! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:44:24'!
validItem
	^Array with: 'aValidItem' with: 'anotherValidItem'! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:44:30' prior: 50657802!
validItems
	^Array with: 'aValidItem' with: 'anotherValidItem'! !

!methodRemoval: CashierTest #validItem stamp: 'Joaco 11/2/2023 19:44:32'!
validItem
	^Array with: 'aValidItem' with: 'anotherValidItem'!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:44:40' prior: 50657768!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList .
	aCart := Cart acceptingItemsOf: self validItems.
	
	self should: [ aCashier checkout: aCart] 
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:45:51' prior: 50657822!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList .
	aCart := Cart acceptingItemsOf: self validItems.
	
	self should: [ aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ]
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:45:54'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:45:54'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:45:54'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:45:54'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:45:54'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:46:15' prior: 50657227!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: self validItems.
	aCart add: 'aValidItem'.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 100.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:46:33' prior: 50657871!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: self validItems.
	aCart add: 'aValidItem'.
		
	
	
	self assert: (aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ) equals: 100.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:46:41' prior: 50657056!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: self validItems .
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 350.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:46:43' prior: 50657895!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: self validItems.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	
	
	self assert: (aCashier checkout: aCart) equals: 350.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:47:01' prior: 50657909!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := Cashier withPriceList: self priceList.
	aCart := Cart acceptingItemsOf: self validItems.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	
	
	self assert: (aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ) equals: 350.
! !

!methodRemoval: Cashier #checkout: stamp: 'Joaco 11/2/2023 19:47:28'!
checkout: aCart 
	|totalAmountOfPayment|
	
	totalAmountOfPayment := 0.
	self assertCartIsNotEmpty: aCart.
	aCart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) + totalAmountOfPayment ].
	^totalAmountOfPayment.!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:47:32'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:47:32'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:47:32'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:47:32'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:55:25'!
createCashier

	^ Cashier withPriceList: self priceList! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:55:25' prior: 50657837!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := self createCashier .
	aCart := Cart acceptingItemsOf: self validItems.
	
	self should: [ aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ]
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:55:25' prior: 50657882!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := self createCashier.
	aCart := Cart acceptingItemsOf: self validItems.
	aCart add: 'aValidItem'.
		
	
	
	self assert: (aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ) equals: 100.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:55:25' prior: 50657662!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart aCreditCard |
	
	aCashier := self createCashier.
	
	aCart := Cart acceptingItemsOf: (Array with: 'aValidItem' with: 'anotherValidItem').
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	aCreditCard := CreditCard number: '123456789' expirationDate: FixedGregorianDate tomorrow securityCode: '123'.
	
	
	self should:[
			aCashier checkout: aCart withPaymentMethod: aCreditCard.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription . 			
		]! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:55:25' prior: 50657923!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := self createCashier.
	aCart := Cart acceptingItemsOf: self validItems.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	
	
	self assert: (aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ) equals: 350.
! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:55:28'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:55:28'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:55:28'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:55:28'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:55:28'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:55:56'!
createCart

	^ Cart acceptingItemsOf: self validItems! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:55:56' prior: 50657966!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := self createCashier .
	aCart := self createCart.
	
	self should: [ aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ]
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:55:56' prior: 50657982!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCashier := self createCashier.
	aCart := self createCart.
	aCart add: 'aValidItem'.
		
	
	
	self assert: (aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ) equals: 100.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:55:56' prior: 50658018!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCashier := self createCashier.
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	
	
	self assert: (aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ) equals: 350.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:56:14' prior: 50657994!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart aCreditCard |
	
	aCashier := self createCashier.
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
		
	aCreditCard := CreditCard number: '123456789' expirationDate: FixedGregorianDate tomorrow securityCode: '123'.
	
	
	self should:[
			aCashier checkout: aCart withPaymentMethod: aCreditCard.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription . 			
		]! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:56:17'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:56:17'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:56:17'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:56:17'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:56:17'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 19:56:50' prior: 50658094!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart |
	
	aCashier := self createCashier.
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	self should:[
			aCashier checkout: aCart withPaymentMethod: self expiredCreditCard.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription . 			
		]! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:56:55'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 19:56:55'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 19:56:55'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 19:56:55'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 19:56:55'!
PASSED!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Joaco 11/2/2023 20:27:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate securityCode creditCardNumber creditCardExpirationDate creditCardSecurityCode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Joaco 11/2/2023 20:27:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'securityCode creditCardNumber creditCardExpirationDate creditCardSecurityCode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'Joaco 11/2/2023 20:27:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber creditCardExpirationDate creditCardSecurityCode'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

FixedGregorianDate today!

FixedGregorianDate today monthOfYear !

FixedGregorianDate today next !

FixedGregorianDate today nextMonth: 1!

GregorianMonthOfYear current !

GregorianMonthOfYear current next!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 21:28:38' prior: 50658054!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	aCashier := self createCashier.
	aCart := self createCart.
	
	self should: [ aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ]
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'support' stamp: 'Joaco 11/2/2023 21:29:42' prior: 50657961!
createCashier

	^ Cashier withPriceList: self priceList for: self createCart withCreditCard: self notExpiredCreditCard.! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:29:45'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:29:45'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:29:45'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:29:45'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:29:47'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 21:29:52'!
withPriceList: aRenameMe1 for: aRenameMe2 withCreditCard: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceList: aRenameMe1 for: aRenameMe2 withCreditCard: aRenameMe3 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 21:30:03' prior: 50658243!
withPriceList: aPriceList for: aRenameMe2 withCreditCard: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceList: aPriceList for: aRenameMe2 withCreditCard: aRenameMe3 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 21:30:08' prior: 50658255!
withPriceList: aPriceList for: aCart withCreditCard: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceList: aPriceList for: aCart withCreditCard: aRenameMe3 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 21:30:15' prior: 50658267!
withPriceList: aPriceList for: aCart withCreditCard: aCreditCard 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard ! !
!Cashier class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 21:30:19' prior: 50658278!
withPriceList: aPriceList for: aCart withCreditCard: aCreditCard 
	^self new initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard ! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:30:21'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Joaco 11/2/2023 21:30:26'!
Object subclass: #Cashier
	instanceVariableNames: 'itemsPriceList renameMe1 priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Joaco 11/2/2023 21:30:26'!
Object subclass: #Cashier
	instanceVariableNames: 'itemsPriceList renameMe1 priceList cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'Joaco 11/2/2023 21:30:26'!
Object subclass: #Cashier
	instanceVariableNames: 'itemsPriceList renameMe1 priceList cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'Joaco 11/2/2023 21:30:26'!
initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard 
	self shouldBeImplemented.
	priceList := aPriceList.
	cart := aCart.
	creditCard := aCreditCard.! !
!Cashier methodsFor: 'initialization' stamp: 'Joaco 11/2/2023 21:30:34' prior: 50658323!
initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard 
	priceList := aPriceList.
	cart := aCart.
	creditCard := aCreditCard.! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:30:35'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:30:36'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:30:36'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:30:36'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:30:36'!
PASSED!
!Cashier class methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 21:38:07'!
assertCartIsNotEmpty: aCart 
	aCart isEmpty ifTrue: [ self error: Cashier CanNotCheckoutAnEmptyCartErrorDescription].! !

!methodRemoval: Cashier #assertCartIsNotEmpty: stamp: 'Joaco 11/2/2023 21:38:07'!
assertCartIsNotEmpty: aCart 
	aCart isEmpty ifTrue: [ self error: Cashier CanNotCheckoutAnEmptyCartErrorDescription].!
!Cashier class methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 21:38:14'!
assertCreditCardIsNotExpired: aCreditCard 
	aCreditCard isExpired ifTrue: [self error: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription]! !

!methodRemoval: Cashier #assertCreditCardIsNotExpired: stamp: 'Joaco 11/2/2023 21:38:14'!
assertCreditCardIsNotExpired: aCreditCard 
	aCreditCard isExpired ifTrue: [self error: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription]!
!Cashier class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 21:38:42' prior: 50658289!
withPriceList: aPriceList for: aCart withCreditCard: aCreditCard 
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	^self new initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard ! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:38:57'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:38:57'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:38:57'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:38:57'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:38:59'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 21:39:32' prior: 50658204!
test01CashierCantCheckoutAnEmptyCart
	
	| aCashier aCart |
	
	
	
	self should: [aCashier := self createCashier.]
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 21:40:38' prior: 50658414!
test01CashierCantCheckoutAnEmptyCart
	
	
	
	
	
	self should: [Cashier withPriceList: self priceList for: self createCart withCreditCard: self notExpiredCreditCard.]
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 21:40:45' prior: 50658426!
test01CashierCantCheckoutAnEmptyCart
	
	self should: [Cashier withPriceList: self priceList for: self createCart withCreditCard: self notExpiredCreditCard.]
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:41:07'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:41:07'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:41:07'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:41:07'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:41:07'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 21:42:19' prior: 50658069!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCart := self createCart.
	aCart add: 'aValidItem'.
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self notExpiredCreditCard.
	
	self assert: (aCashier checkout ) equals: 100.
! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:42:22'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'Joaco 11/2/2023 21:42:49'!
checkout
	| totalAmountOfPayment |
	
	totalAmountOfPayment := 0.
	cart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) + totalAmountOfPayment ].
	^totalAmountOfPayment.! !

!methodRemoval: Cashier #checkout:withPaymentMethod: stamp: 'Joaco 11/2/2023 21:42:54'!
checkout: aCart withPaymentMethod: aCreditCard 
	| totalAmountOfPayment |
	
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	
	totalAmountOfPayment := 0.
	aCart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) + totalAmountOfPayment ].
	^totalAmountOfPayment.!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:42:58'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:42:58'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:42:58'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:42:58'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:43:00'!
ERROR!

!methodRemoval: Cashier #initializeWithPriceList: stamp: 'Joaco 11/2/2023 21:43:44'!
initializeWithPriceList: aPriceList
	itemsPriceList := aPriceList !
!Cashier methodsFor: 'queries' stamp: 'Joaco 11/2/2023 21:44:02' prior: 50657111!
itemPrice: aCartItem 
	^priceList at: aCartItem.! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:44:06'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:44:06'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:44:06'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:44:06'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 21:45:06' prior: 50658080!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
	
	aCashier := Cashier withPriceList:  self priceList for: aCart  withCreditCard: self notExpiredCreditCard.
	
	
	self assert: (aCashier checkout: aCart withPaymentMethod: self notExpiredCreditCard ) equals: 350.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 21:45:14' prior: 50658549!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
	
	aCashier := Cashier withPriceList:  self priceList for: aCart  withCreditCard: self notExpiredCreditCard.
	
	
	self assert: (aCashier checkout ) equals: 350.
! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 21:45:15' prior: 50658565!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
	
	aCashier := Cashier withPriceList:  self priceList for: aCart  withCreditCard: self notExpiredCreditCard.
	
	
	self assert: (aCashier checkout) equals: 350.
! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:45:18'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:45:18'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:45:18'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:45:18'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:45:18'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:45:18'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 21:46:10' prior: 50658134!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCashier aCart |
	
	aCashier := self createCashier.
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	self should:[
			Cashier withPriceList: self priceList for: aCart withCreditCard: self expiredCreditCard.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription . 			
		]! !
!CashierTest methodsFor: 'tests' stamp: 'Joaco 11/2/2023 21:46:20' prior: 50658615!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCart |
		
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	self should:[
			Cashier withPriceList: self priceList for: aCart withCreditCard: self expiredCreditCard.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription . 			
		]! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:46:24'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:46:24'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:46:24'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:46:24'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:46:24'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 21:47:02' prior: 50657309!
number: aCreditCardNumber expirationDate: aCreditCardExpirationDate securityCode: aCreditCardSecurityCode
	^self new initializeWithNumber: aCreditCardNumber expirationDate: aCreditCardExpirationDate securityCode: aCreditCardSecurityCode ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 21:48:09' prior: 50658671!
number: aCreditCardNumber expirationDate: aCreditCardExpirationDate securityCode: aCreditCardSecurityCode
	self assertCreditCardNumberIsValid.
	self assertSecurityCodeIsValid.
	^self new initializeWithNumber: aCreditCardNumber expirationDate: aCreditCardExpirationDate securityCode: aCreditCardSecurityCode ! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:48:13'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:48:13'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:48:13'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:48:13'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:48:15'!
ERROR!
!CreditCard class methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 21:48:23'!
assertCreditCardNumberIsValid
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'Joaco 11/2/2023 21:48:40' prior: 50658682!
number: aCreditCardNumber expirationDate: aCreditCardExpirationDate securityCode: aCreditCardSecurityCode
	self assertCreditCardNumberIsValid: aCreditCardNumber .
	self assertSecurityCodeIsValid: aCreditCardSecurityCode .
	^self new initializeWithNumber: aCreditCardNumber expirationDate: aCreditCardExpirationDate securityCode: aCreditCardSecurityCode ! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:48:42'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:48:42'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:48:42'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:48:42'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:48:44'!
ERROR!
!CreditCard class methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 21:48:47'!
assertCreditCardNumberIsValid: aCreditCardNumber 
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 21:49:57' prior: 50658749!
assertCreditCardNumberIsValid: aCreditCardNumber 
	(aCreditCardNumber length = 16) ifFalse: [self error: CreditCard CantCreateACreditCardWithInvalidCardNumberErrorDescription] ! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:50:03'!
ERROR!
!CreditCard class methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 21:50:34' prior: 50658755!
assertCreditCardNumberIsValid: aCreditCardNumber 
	(aCreditCardNumber size = 16) ifFalse: [self error: CreditCard CantCreateACreditCardWithInvalidCardNumberErrorDescription] ! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:50:35'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'Joaco 11/2/2023 21:50:46'!
CantCreateACreditCardWithInvalidCardNumberErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'Joaco 11/2/2023 21:51:49' prior: 50658779!
CantCreateACreditCardWithInvalidCardNumberErrorDescription
	^'Cant create a credit card with an invalid credit card number. Please check the number lenght is 16 digits'! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:51:49'!
FAILURE!
!CashierTest methodsFor: 'support' stamp: 'Joaco 11/2/2023 21:52:29' prior: 50657796!
notExpiredCreditCard
	^CreditCard number: '1234567891011121' expirationDate: FixedGregorianDate yesterday securityCode: '123'.! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:52:32'!
ERROR!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:52:32'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:52:32'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:52:32'!
FAILURE!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:52:34'!
ERROR!
!CreditCard class methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 21:52:39'!
assertSecurityCodeIsValid: aCreditCardSecurityCode 
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'assertions' stamp: 'Joaco 11/2/2023 21:53:22' prior: 50658821!
assertSecurityCodeIsValid: aCreditCardSecurityCode 
	aCreditCardSecurityCode size = 3 ifFalse: [self error: CreditCard CanCreateCreditCardWithInvalidSecurityCodeErrorDescription ]! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:53:24'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:53:28'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:53:29'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:53:30'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:53:30'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:53:30'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:53:30'!
FAILURE!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:53:30'!
FAILURE!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:53:44'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:53:44'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:53:44'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:53:44'!
FAILURE!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:53:44'!
FAILURE!

anError messageText !
!CashierTest methodsFor: 'support' stamp: 'Joaco 11/2/2023 21:54:48' prior: 50657789!
expiredCreditCard
	^CreditCard number: '1234567891011121' expirationDate: FixedGregorianDate tomorrow securityCode: '123'.! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'Joaco 11/2/2023 21:54:50'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'Joaco 11/2/2023 21:54:50'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'Joaco 11/2/2023 21:54:50'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'Joaco 11/2/2023 21:54:50'!
PASSED!

----QUIT----(2 November 2023 21:55:07) CuisUniversity-MisLibros.image priorSource: 10293597!

----STARTUP---- (5 November 2023 10:53:07) as D:\Facu\Inge I\windows64\CuisUniversity-MisLibros.image!

!CreditCard methodsFor: 'queries' stamp: 'jgv 11/5/2023 10:59:53'!
isExpired: aMonthOfYear
	^aMonthOfYear < creditCardExpirationDate.! !
!Cashier class methodsFor: 'assertions' stamp: 'jgv 11/5/2023 11:01:12' prior: 50658370!
assertCreditCardIsNotExpired: aCreditCard 
	(aCreditCard isExpired: GregorianMonthOfYear current) ifTrue: [self error: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription]! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'jgv 11/5/2023 11:01:16'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 11:01:16'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 11:01:17'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:01:17'!
FAILURE!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:01:17'!
FAILURE!
!CashierTest methodsFor: 'support' stamp: 'jgv 11/5/2023 11:02:28' prior: 50658882!
expiredCreditCard
	^CreditCard number: '1234567891011121' expirationDate: GregorianMonthOfYear current previous securityCode: '123'.! !

GregorianMonthOfYear current next!
!CashierTest methodsFor: 'support' stamp: 'jgv 11/5/2023 11:02:45' prior: 50658940!
expiredCreditCard
	^CreditCard number: '1234567891011121' expirationDate: GregorianMonthOfYear current next securityCode: '123'.! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'jgv 11/5/2023 11:02:46'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 11:02:47'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 11:02:47'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:02:47'!
PASSED!

!methodRemoval: CreditCard #isExpired stamp: 'jgv 11/5/2023 11:05:43'!
isExpired
	^FixedGregorianDate today < creditCardExpirationDate.!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'jgv 11/5/2023 11:05:46'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 11:05:46'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 11:05:46'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:05:46'!
PASSED!

!methodRemoval: Cashier class #withPriceList: stamp: 'jgv 11/5/2023 11:08:32'!
withPriceList: aPriceList
	^self new initializeWithPriceList: aPriceList !

FixedGregorianDate today monthOfYear !
!Cashier class methodsFor: 'assertions' stamp: 'jgv 11/5/2023 11:10:37'!
assertCreditCardIsNotExpired: aCreditCard forDate: aDate
	(aCreditCard isExpired: aDate today monthOfYear ) ifTrue: [self error: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription]! !

!methodRemoval: Cashier class #assertCreditCardIsNotExpired: stamp: 'jgv 11/5/2023 11:10:43'!
assertCreditCardIsNotExpired: aCreditCard 
	(aCreditCard isExpired: GregorianMonthOfYear current) ifTrue: [self error: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription]!
!Cashier class methodsFor: 'instance creation' stamp: 'jgv 11/5/2023 11:11:29'!
withPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard forDate: aDate.
	^self new initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard ! !

!methodRemoval: Cashier class #withPriceList:for:withCreditCard: stamp: 'jgv 11/5/2023 11:11:41'!
withPriceList: aPriceList for: aCart withCreditCard: aCreditCard 
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard.
	^self new initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard !
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 11:12:01' prior: 50658440!
test01CashierCantCheckoutAnEmptyCart
	
	self should: [Cashier withPriceList: self priceList for: self createCart withCreditCard: self notExpiredCreditCard atDate: FixedGregorianDate today.]
	raise: Error - MessageNotUnderstood
	 withExceptionDo: [ :anError | 
		self assert: anError messageText equals: Cashier CanNotCheckoutAnEmptyCartErrorDescription
		].! !
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 11:12:34' prior: 50658471!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart |
	
	aCart := self createCart.
	aCart add: 'aValidItem'.
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self notExpiredCreditCard atDate: FixedGregorianDate today.
	
	self assert: (aCashier checkout ) equals: 100.
! !
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 11:12:48' prior: 50658579!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart |
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self notExpiredCreditCard atDate: FixedGregorianDate today.
	
	
	self assert: (aCashier checkout) equals: 350.
! !
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 11:12:55' prior: 50658635!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCart |
		
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	self should:[
			Cashier withPriceList: self priceList for: aCart withCreditCard: 	self notExpiredCreditCard atDate: FixedGregorianDate today.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription . 			
		]! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:12:57'!
ERROR!

FixedGregorianDate today !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:13:23'!
ERROR!
!Cashier class methodsFor: 'assertions' stamp: 'jgv 11/5/2023 11:13:45' prior: 50658993!
assertCreditCardIsNotExpired: aCreditCard forDate: aDate
	(aCreditCard isExpired: aDate monthOfYear ) ifTrue: [self error: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription]! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:13:47'!
FAILURE!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:13:57'!
FAILURE!
!CashierTest methodsFor: 'support' stamp: 'jgv 11/5/2023 11:17:11' prior: 50658948!
expiredCreditCard
	^CreditCard number: '1234567891011121' expirationDate: FixedGregorianDate today monthOfYear next securityCode: '123'.! !
!CashierTest methodsFor: 'support' stamp: 'jgv 11/5/2023 11:17:36' prior: 50658797!
notExpiredCreditCard
	^CreditCard number: '1234567891011121' expirationDate: FixedGregorianDate today monthOfYear securityCode: '123'.! !
!CashierTest methodsFor: 'support' stamp: 'jgv 11/5/2023 11:18:44' prior: 50658219!
createCashier

	^ Cashier withPriceList: self priceList for: self createCart withCreditCard: self notExpiredCreditCard atDate: FixedGregorianDate today.! !

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'jgv 11/5/2023 11:18:54'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 11:18:55'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 11:18:55'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:18:55'!
FAILURE!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:18:55'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 11:19:11' prior: 50659075!
test04CashierCannotCheckoutIfCreditCardIsExpired
	
	| aCart |
		
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	self should:[
			Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription . 			
		]! !

FixedGregorianDate today monthOfYear previous!
!CashierTest methodsFor: 'support' stamp: 'jgv 11/5/2023 11:20:01' prior: 50659119!
expiredCreditCard
	^CreditCard number: '1234567891011121' expirationDate: FixedGregorianDate today monthOfYear previous securityCode: '123'.! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:20:16'!
FAILURE!
!CreditCard methodsFor: 'queries' stamp: 'jgv 11/5/2023 11:22:33' prior: 50658909!
isExpired: aMonthOfYear
	^aMonthOfYear > creditCardExpirationDate.! !

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:22:36'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'jgv 11/5/2023 11:22:36'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 11:22:36'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 11:22:36'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 11:22:37'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 11:42:10'!
test05CashierCannotCheckoutIfCreditCardIsStolen
	
	| aCart |
		
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	self should:[
			Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today.
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Cashier CanNotCheckoutIfCreditCardIsExpiredErrorDescription . 			
		]! !

!classDefinition: #PaymentProcessor category: 'TusLibros' stamp: 'jgv 11/5/2023 11:47:26'!
Object subclass: #PaymentProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 11:47:18' prior: 50659212!
test05CashierCannotCheckoutIfCreditCardIsStolen
	
	| aCart aCashier |
		
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today.
	
	self should:[
			aCashier checkout 
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: PaymentProcessor CannotDebitFromStolenCreditCard. 			
		]! !
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 11:59:54' prior: 50659238!
test05CashierCannotCheckoutIfCreditCardIsStolen
	
	| aCart aCashier purchaseRegister |
		
	purchaseRegister := OrderedCollection new.
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today toBeRegisteredIn: purchaseRegister.
	
	self should:[
			aCashier checkout 
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: PaymentProcessor CannotDebitFromStolenCreditCard. 
			self assert: purchaseRegister isEmpty.
		]! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:00:07'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'jgv 11/5/2023 12:00:14'!
withPriceList: aRenameMe1 for: aCart withCreditCard: aRenameMe2 atDate: aRenameMe3 toBeRegisteredIn: purchaseRegister 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceList: aRenameMe1 for: aCart withCreditCard: aRenameMe2 atDate: aRenameMe3 toBeRegisteredIn: purchaseRegister ! !
!Cashier class methodsFor: 'instance creation' stamp: 'jgv 11/5/2023 12:01:03' prior: 50659286!
withPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate toBeRegisteredIn: purchaseRegister 

	^self new initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate toBeRegisteredIn: purchaseRegister ! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:01:04'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'jgv 11/5/2023 12:01:08'!
Object subclass: #Cashier
	instanceVariableNames: 'itemsPriceList renameMe1 priceList cart creditCard date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'jgv 11/5/2023 12:01:08'!
Object subclass: #Cashier
	instanceVariableNames: 'itemsPriceList renameMe1 priceList cart creditCard date purchaseRegister_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'jgv 11/5/2023 12:01:09'!
initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate toBeRegisteredIn: purchaseRegister 
	self shouldBeImplemented.
	priceList := aPriceList.
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	purchaseRegister_CHANGE_ME := purchaseRegister.! !
!Cashier methodsFor: 'initialization' stamp: 'jgv 11/5/2023 12:03:19' prior: 50659332!
initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate toBeRegisteredIn: aPurchaseRegister 
	self shouldBeImplemented.
	priceList := aPriceList.
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	purchaseRegister_CHANGE_ME := aPurchaseRegister.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'jgv 11/5/2023 12:03:49'!
Object subclass: #Cashier
	instanceVariableNames: 'itemsPriceList renameMe1 priceList cart creditCard date purchaseRegister'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'jgv 11/5/2023 12:03:49' prior: 50659344!
initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate toBeRegisteredIn: aPurchaseRegister 
	self shouldBeImplemented.
	priceList := aPriceList.
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	purchaseRegister := aPurchaseRegister.! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:03:58'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'jgv 11/5/2023 12:04:07' prior: 50659365!
initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate toBeRegisteredIn: aPurchaseRegister 
	priceList := aPriceList.
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	purchaseRegister := aPurchaseRegister.! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:04:08'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:08:25' prior: 50659258!
test05CashierCannotCheckoutIfCreditCardIsStolen
	
	| aCart aCashier purchaseRegister merchantProcessor |
		
	purchaseRegister := OrderedCollection new.
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today processedBy: merchantProcessor toBeRegisteredIn: purchaseRegister .
	
	self should:[
			aCashier checkout 
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: PaymentProcessor CannotDebitFromStolenCreditCard. 
			self assert: purchaseRegister isEmpty.
		]! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:08:34'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'jgv 11/5/2023 12:08:43'!
withPriceList: aRenameMe1 for: aCart withCreditCard: aRenameMe2 atDate: aRenameMe3 processedBy: merchantProcessor toBeRegisteredIn: purchaseRegister 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceList: aRenameMe1 for: aCart withCreditCard: aRenameMe2 atDate: aRenameMe3 processedBy: merchantProcessor toBeRegisteredIn: purchaseRegister ! !
!Cashier class methodsFor: 'instance creation' stamp: 'jgv 11/5/2023 12:09:52' prior: 50659426!
withPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate processedBy: aPaymentProcessor toBeRegisteredIn: aPurchaseRegister 
	^self new initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate processedBy: aPaymentProcessor toBeRegisteredIn: aPurchaseRegister ! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:09:53'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'jgv 11/5/2023 12:09:58'!
Object subclass: #Cashier
	instanceVariableNames: 'itemsPriceList renameMe1 priceList cart creditCard date purchaseRegister paymentProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'jgv 11/5/2023 12:09:58'!
initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate processedBy: aPaymentProcessor toBeRegisteredIn: aPurchaseRegister 
	self shouldBeImplemented.
	priceList := aPriceList.
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	paymentProcessor := aPaymentProcessor.
	purchaseRegister := aPurchaseRegister.! !
!Cashier methodsFor: 'initialization' stamp: 'jgv 11/5/2023 12:10:06' prior: 50659468!
initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate processedBy: aPaymentProcessor toBeRegisteredIn: aPurchaseRegister 
	priceList := aPriceList.
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	paymentProcessor := aPaymentProcessor.
	purchaseRegister := aPurchaseRegister.! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:10:07'!
FAILURE!

!methodRemoval: Cashier #initializeWithPriceList:for:withCreditCard:atDate:toBeRegisteredIn: stamp: 'jgv 11/5/2023 12:10:23'!
initializeWithPriceList: aPriceList for: aCart withCreditCard: aCreditCard atDate: aDate toBeRegisteredIn: aPurchaseRegister 
	priceList := aPriceList.
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.
	purchaseRegister := aPurchaseRegister.!
!Cashier methodsFor: 'checkout' stamp: 'jgv 11/5/2023 12:11:13' prior: 50658486!
checkout
	| totalAmountOfPayment |
	
	totalAmountOfPayment := 0.
	cart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) + totalAmountOfPayment ].
	
	paymentProcessor debit: totalAmountOfPayment from: creditCard.
	
	^totalAmountOfPayment.! !
!Cashier methodsFor: 'checkout' stamp: 'jgv 11/5/2023 12:11:40' prior: 50659511!
checkout
	| totalAmountOfPayment |
	
	totalAmountOfPayment := 0.
	cart items do: [:aCartItem | totalAmountOfPayment := (self itemPrice: aCartItem) + totalAmountOfPayment ].
	
	paymentProcessor debit: totalAmountOfPayment from: creditCard.
	
	purchaseRegister add: self.
		
	^totalAmountOfPayment.! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:12:06'!
ERROR!

!classDefinition: #TestPaymentProcessor category: 'TusLibros' stamp: 'jgv 11/5/2023 12:13:34'!
Object subclass: #TestPaymentProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:13:29' prior: 50659396!
test05CashierCannotCheckoutIfCreditCardIsStolen
	
	| aCart aCashier purchaseRegister merchantProcessor |
		
	purchaseRegister := OrderedCollection new.
	merchantProcessor := TestPaymentProcessor forStolenCreditCardTest.
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today processedBy: merchantProcessor toBeRegisteredIn: purchaseRegister .
	
	self should:[
			aCashier checkout 
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: PaymentProcessor CannotDebitFromStolenCreditCard. 
			self assert: purchaseRegister isEmpty.
		]! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:14:06'!
ERROR!
!TestPaymentProcessor class methodsFor: 'instance creation' stamp: 'jgv 11/5/2023 12:14:15'!
forStolenCreditCardTest
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeForStolenCreditCardTest! !
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:16:47' prior: 50659545!
test05CashierCannotCheckoutIfCreditCardIsStolen
	
	| aCart aCashier purchaseRegister merchantProcessor |
		
	purchaseRegister := OrderedCollection new.
	merchantProcessor := TestPaymentProcessor expectedBehaviour: [].
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today processedBy: merchantProcessor toBeRegisteredIn: purchaseRegister .
	
	self should:[
			aCashier checkout 
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: PaymentProcessor CannotDebitFromStolenCreditCard. 
			self assert: purchaseRegister isEmpty.
		]! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:16:50'!
ERROR!
!TestPaymentProcessor class methodsFor: 'instance creation' stamp: 'jgv 11/5/2023 12:16:55'!
expectedBehaviour: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeExpectedBehaviour: aRenameMe1 ! !
!TestPaymentProcessor class methodsFor: 'instance creation' stamp: 'jgv 11/5/2023 12:17:05' prior: 50659617!
expectedBehaviour: aBlock 

	^self new initializeExpectedBehaviour: aBlock ! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:17:06'!
ERROR!

!classDefinition: #TestPaymentProcessor category: 'TusLibros' stamp: 'jgv 11/5/2023 12:17:12'!
Object subclass: #TestPaymentProcessor
	instanceVariableNames: 'block'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestPaymentProcessor methodsFor: 'initialization' stamp: 'jgv 11/5/2023 12:17:12'!
initializeExpectedBehaviour: aBlock 
	self shouldBeImplemented.
	block := aBlock.! !

!classDefinition: #TestPaymentProcessor category: 'TusLibros' stamp: 'jgv 11/5/2023 12:17:26'!
Object subclass: #TestPaymentProcessor
	instanceVariableNames: 'block testBehaviour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestPaymentProcessor methodsFor: 'initialization' stamp: 'jgv 11/5/2023 12:17:24' prior: 50659644!
initializeExpectedBehaviour: aBlock 
	testBehaviour := aBlock.! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:17:30'!
ERROR!
!TestPaymentProcessor methodsFor: 'debit' stamp: 'jgv 11/5/2023 12:17:48'!
debit: totalAmountOfPayment from: aCreditCard 
	self shouldBeImplemented.! !
!TestPaymentProcessor methodsFor: 'debit' stamp: 'jgv 11/5/2023 12:18:24' prior: 50659666!
debit: totalAmountOfPayment from: aCreditCard 
	testBehaviour value.! !
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:19:48' prior: 50659585!
test05CashierCannotCheckoutIfCreditCardIsStolen
	
	| aCart aCashier purchaseRegister merchantProcessor |
		
	purchaseRegister := OrderedCollection new.
	merchantProcessor := TestPaymentProcessor expectedBehaviour: [^PaymentProcessor CannotDebitFromStolenCreditCard].
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today processedBy: merchantProcessor toBeRegisteredIn: purchaseRegister .
	
	self should:[
			aCashier checkout 
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: PaymentProcessor CannotDebitFromStolenCreditCard. 
			self assert: purchaseRegister isEmpty.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:22:54' prior: 50659677!
test05CashierCannotCheckoutIfCreditCardIsStolen
	
	| aCart aCashier purchaseRegister merchantProcessor |
		
	purchaseRegister := OrderedCollection new.
	merchantProcessor := TestPaymentProcessor expectedBehaviour: [^TestPaymentProcessor CannotDebitFromStolenCreditCard].
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today processedBy: merchantProcessor toBeRegisteredIn: purchaseRegister .
	
	self should:[
			aCashier checkout 
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: TestPaymentProcessor CannotDebitFromStolenCreditCard. 
			self assert: purchaseRegister isEmpty.
		]! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:42:07'!
ERROR!
!TestPaymentProcessor class methodsFor: 'error description' stamp: 'jgv 11/5/2023 12:42:19'!
CannotDebitFromStolenCreditCard
	self shouldBeImplemented.! !
!TestPaymentProcessor class methodsFor: 'error description' stamp: 'jgv 11/5/2023 12:43:31' prior: 50659741!
CannotDebitFromStolenCreditCard
	^'Can not process payment with stolen credit card!! We calling the police >:('! !

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:43:32'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'jgv 11/5/2023 12:43:32'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 12:43:32'!
ERROR!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 12:43:32'!
ERROR!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 12:43:32'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:43:33'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 12:43:39'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:46:00' prior: 50659047!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart paymentProcessor paymentRegister |
	
	aCart := self createCart.
	aCart add: 'aValidItem'.
	
	paymentProcessor := TestPaymentProcessor expectedBehaviour: [^1].
	paymentRegister := OrderedCollection new.
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self notExpiredCreditCard atDate: FixedGregorianDate today processedBy: paymentProcessor toBeRegisteredIn: paymentRegister.
	
	self assert: (aCashier checkout ) equals: 100.
! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 12:46:08'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 12:46:10'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:47:18' prior: 50659060!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart paymentProcessor paymentRegister |
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
	
	paymentProcessor := TestPaymentProcessor expectedBehaviour: [^1].
	paymentRegister := OrderedCollection new.
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today processedBy: paymentProcessor toBeRegisteredIn: paymentRegister .
	
	
	self assert: (aCashier checkout) equals: 350.
! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 12:47:23'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:47:28'!
ERROR!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'jgv 11/5/2023 12:47:43'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 12:47:43'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 12:47:44'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 12:47:44'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:47:44'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:49:11'!
test06CashierCannotCheckoutIfCreditCardHasNotEnoughtCredit
	
	| aCart aCashier purchaseRegister merchantProcessor |
		
	purchaseRegister := OrderedCollection new.
	merchantProcessor := TestPaymentProcessor expectedBehaviour: [^TestPaymentProcessor CannotDebitIfCreditIsNotEnought].
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today processedBy: merchantProcessor toBeRegisteredIn: purchaseRegister .
	
	self should:[
			aCashier checkout 
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: TestPaymentProcessor CannotDebitFromStolenCreditCard. 
			self assert: purchaseRegister isEmpty.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:49:28' prior: 50659850!
test06CashierCannotCheckoutIfCreditCardHasNotEnoughtCredit
	
	| aCart aCashier purchaseRegister merchantProcessor |
		
	purchaseRegister := OrderedCollection new.
	merchantProcessor := TestPaymentProcessor expectedBehaviour: [^TestPaymentProcessor CannotDebitIfCreditIsNotEnought].
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.	
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today processedBy: merchantProcessor toBeRegisteredIn: purchaseRegister .
	
	self should:[
			aCashier checkout 
		] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
			self assert: anError messageText equals: TestPaymentProcessor CannotDebitIfCreditIsNotEnought. 
			self assert: purchaseRegister isEmpty.
		]! !

!testRun: #CashierTest #test06CashierCannotCheckoutIfCreditCardHasNotEnoughtCredit stamp: 'jgv 11/5/2023 12:50:41'!
ERROR!
!TestPaymentProcessor class methodsFor: 'error description' stamp: 'jgv 11/5/2023 12:50:47'!
CannotDebitIfCreditIsNotEnought
	self shouldBeImplemented.! !

!testRun: #CashierTest #test06CashierCannotCheckoutIfCreditCardHasNotEnoughtCredit stamp: 'jgv 11/5/2023 12:51:31'!
ERROR!
!TestPaymentProcessor class methodsFor: 'error description' stamp: 'jgv 11/5/2023 12:52:04' prior: 50659914!
CannotDebitIfCreditIsNotEnought
	^'Credit in credit card is not enought to complete purchase!!'! !

!testRun: #CashierTest #test06CashierCannotCheckoutIfCreditCardHasNotEnoughtCredit stamp: 'jgv 11/5/2023 12:52:06'!
FAILURE!

!testRun: #CashierTest #test06CashierCannotCheckoutIfCreditCardHasNotEnoughtCredit stamp: 'jgv 11/5/2023 12:52:47'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'jgv 11/5/2023 12:52:48'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 12:52:48'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 12:52:48'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 12:52:48'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:52:48'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutIfCreditCardHasNotEnoughtCredit stamp: 'jgv 11/5/2023 12:52:48'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:55:53' prior: 50659778!
test02CashierCanCheckoutACartWithOneBook
	
	| aCashier aCart paymentProcessor paymentRegister |
	
	aCart := self createCart.
	aCart add: 'aValidItem'.
	
	paymentProcessor := TestPaymentProcessor expectedBehaviour: [^1].
	paymentRegister := OrderedCollection new.
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self notExpiredCreditCard atDate: FixedGregorianDate today processedBy: paymentProcessor toBeRegisteredIn: paymentRegister.
	
	self assert: (aCashier checkout ) equals: 100.
	self assert: (paymentRegister includes: aCashier)
! !

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 12:55:54'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'jgv 11/5/2023 12:55:54'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 12:55:55'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 12:55:55'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 12:55:55'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:55:55'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutIfCreditCardHasNotEnoughtCredit stamp: 'jgv 11/5/2023 12:55:55'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'jgv 11/5/2023 12:56:10' prior: 50659804!
test03CashierCanCheckoutACartWithMoreThanOneItem
	
	| aCashier aCart paymentProcessor paymentRegister |
	
	aCart := self createCart.
	aCart add: 'aValidItem' withOcurrences: 3.
	aCart add: 'anotherValidItem' withOcurrences: 1.
	
	paymentProcessor := TestPaymentProcessor expectedBehaviour: [^1].
	paymentRegister := OrderedCollection new.
	
	aCashier := Cashier withPriceList: self priceList for: aCart withCreditCard: 	self expiredCreditCard atDate: FixedGregorianDate today processedBy: paymentProcessor toBeRegisteredIn: paymentRegister .
	
	
	self assert: (aCashier checkout) equals: 350.
	self assert: (paymentRegister includes: aCashier)
! !

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 12:56:15'!
PASSED!

!testRun: #CashierTest #test01CashierCantCheckoutAnEmptyCart stamp: 'jgv 11/5/2023 12:56:15'!
PASSED!

!testRun: #CashierTest #test02CashierCanCheckoutACartWithOneBook stamp: 'jgv 11/5/2023 12:56:15'!
PASSED!

!testRun: #CashierTest #test03CashierCanCheckoutACartWithMoreThanOneItem stamp: 'jgv 11/5/2023 12:56:15'!
PASSED!

!testRun: #CashierTest #test04CashierCannotCheckoutIfCreditCardIsExpired stamp: 'jgv 11/5/2023 12:56:16'!
PASSED!

!testRun: #CashierTest #test05CashierCannotCheckoutIfCreditCardIsStolen stamp: 'jgv 11/5/2023 12:56:16'!
PASSED!

!testRun: #CashierTest #test06CashierCannotCheckoutIfCreditCardHasNotEnoughtCredit stamp: 'jgv 11/5/2023 12:56:16'!
PASSED!

----QUIT----(5 November 2023 12:56:59) CuisUniversity-MisLibros.image priorSource: 10472061!