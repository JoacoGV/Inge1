

----STARTUP---- (11 October 2023 18:25:47) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-5981.image!


----SNAPSHOT----(11 October 2023 18:25:59) CuisUniversity-Portfolio.image priorSource: 10197292!

----STARTUP---- (11 October 2023 18:27:22) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-Portfolio.image!


!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 5/17/2021 17:29:53'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16902254!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50651436!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50651436!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' overrides: 16920235!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32'!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43'!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 20:47:30' prior: 50651511!
initializeFor: aValue

	value := 0 - aValue.! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 20:48:08' prior: 50651575!
initializeFor: aValue

	value := aValue.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:51:17' prior: 50651564!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ]
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:51:36' prior: 50651585!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ].
		aTransaction value.
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:52:29' prior: 50651593!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ].
		aTransaction class = Deposit ifTrue: [
				aTransaction value.
			]
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:56:54' prior: 50651602!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ].
		aTransaction class = Deposit ifTrue: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:58:28' prior: 50651612!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				^aTransaction value negated.
			 ].
		(aTransaction isKindOf: Deposit) ifTrue: [
				^aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:59:41' prior: 50651622!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ].
		(aTransaction isKindOf: Deposit) ifTrue: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 21:01:31' prior: 50651580!
initializeFor: aValue

	value := aValue negated.! !
!Withdraw methodsFor: 'value' stamp: 'jgv 10/9/2023 21:01:36' prior: 50651516 overrides: 50651436!
value

	^ value negated! !
!Withdraw methodsFor: 'value' stamp: 'jgv 10/9/2023 21:01:41' prior: 50651649 overrides: 50651436!
value

	^ value negated.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32' prior: 50651633!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 21:17:01' prior: 50651644!
initializeFor: aValue

	value := aValue.! !
!Withdraw methodsFor: 'value' stamp: 'jgv 10/9/2023 21:17:20' prior: 50651653 overrides: 50651436!
value

	^ value.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:59:41' prior: 50651657!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ].
		(aTransaction isKindOf: Deposit) ifTrue: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:17:53' prior: 50651672!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ]ifFalse: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:18:23' prior: 50651683!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ] ifFalse: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:22:09' prior: 50651692!
balance
	
	|balance| 
	
	balance := 0.
	
	transactions do: [ :aTransaction | 
		balance := aTransaction xxxx: balance.
		] .
	
	^balance! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:22:30'!
xxxx: balance 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:22:36' prior: 50651709!
xxxx: balance 
	self subclassResponsibility .! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:22:46' overrides: 50651714!
xxxx: balance 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:23:13' prior: 50651719 overrides: 50651714!
xxxx: aBalance 
	^aBalance +  value.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:23:21' overrides: 50651714!
xxxx: balance 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:23:44' prior: 50651729 overrides: 50651714!
xxxx: aBalance 
	^aBalance - value.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:27:25'!
processOn: balance 
	self subclassResponsibility .! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:27:25' overrides: 50651738!
processOn: aBalance 
	^aBalance +  value.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:27:25' overrides: 50651738!
processOn: aBalance 
	^aBalance - value.! !

!methodRemoval: AccountTransaction #xxxx: stamp: 'jgv 10/11/2023 18:30:12'!
xxxx: balance 
	self subclassResponsibility .!

!methodRemoval: Deposit #xxxx: stamp: 'jgv 10/11/2023 18:30:12'!
xxxx: aBalance 
	^aBalance +  value.!

!methodRemoval: Withdraw #xxxx: stamp: 'jgv 10/11/2023 18:30:12'!
xxxx: aBalance 
	^aBalance - value.!

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'no messages' stamp: 'jgv 10/9/2023 21:29:04'!
test01
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:49:19' prior: 50651777!
test01
	|portfolio| 
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.! !
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:49:49'!
balance
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:12'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:50:01' prior: 50651794!
balance
	^ balance! !
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:50:22' prior: 50651806!
balance
	^ 0.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:52:07'!
test02
	|portfolio|
	
	portfolio := Portfolio new.
	
	portfolio add: ReceptiveAccount new.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:54:04' prior: 50651813!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	account register:  AccountTransaction new.
	
	portfolio add: 0! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:55:41' prior: 50651819!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	AccountTransaction register: 50 on: account.
	
	portfolio add: 0! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:55:45' prior: 50651827!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	AccountTransaction register: 50 on: account.
	
	portfolio add: account.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:57:46' prior: 50651835!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Withdraw  register: 50 on: account.
		
	portfolio add: account.! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44' prior: 50651348!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48' prior: 50651355!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52' prior: 50651364!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50651374!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50651384!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 5/17/2021 17:29:53' prior: 50651397!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01' prior: 50651409!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50651436 overrides: 16902254!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00' prior: 50651451!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50651473!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50651478 overrides: 50651951!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50651491!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50651663!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50651668 overrides: 50651951!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50651529!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' prior: 50651550 overrides: 16920235!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50651555!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50651560!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32' prior: 50651701!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43' prior: 50651569!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 20:47:30' prior: 50652027!
initializeFor: aValue

	value := 0 - aValue.! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 20:48:08' prior: 50652094!
initializeFor: aValue

	value := aValue.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:51:17' prior: 50652082!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ]
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:51:36' prior: 50652104!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ].
		aTransaction value.
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:52:29' prior: 50652112!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ].
		aTransaction class = Deposit ifTrue: [
				aTransaction value.
			]
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:56:54' prior: 50652121!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ].
		aTransaction class = Deposit ifTrue: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:58:28' prior: 50652131!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				^aTransaction value negated.
			 ].
		(aTransaction isKindOf: Deposit) ifTrue: [
				^aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:59:41' prior: 50652141!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ].
		(aTransaction isKindOf: Deposit) ifTrue: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 21:01:31' prior: 50652099!
initializeFor: aValue

	value := aValue negated.! !
!Withdraw methodsFor: 'value' stamp: 'jgv 10/9/2023 21:01:36' prior: 50652032 overrides: 50651951!
value

	^ value negated! !
!Withdraw methodsFor: 'value' stamp: 'jgv 10/9/2023 21:01:41' prior: 50652168 overrides: 50651951!
value

	^ value negated.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32' prior: 50652152!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 21:17:01' prior: 50652163!
initializeFor: aValue

	value := aValue.! !
!Withdraw methodsFor: 'value' stamp: 'jgv 10/9/2023 21:17:20' prior: 50652172 overrides: 50651951!
value

	^ value.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:59:41' prior: 50652176!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ].
		(aTransaction isKindOf: Deposit) ifTrue: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:17:53' prior: 50652191!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ]ifFalse: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:18:23' prior: 50652202!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ] ifFalse: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:22:09' prior: 50652211!
balance
	
	|balance| 
	
	balance := 0.
	
	transactions do: [ :aTransaction | 
		balance := aTransaction xxxx: balance.
		] .
	
	^balance! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:22:30'!
xxxx: balance 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:22:36' prior: 50652228!
xxxx: balance 
	self subclassResponsibility .! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:22:46' overrides: 50652233!
xxxx: balance 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:23:13' prior: 50652238 overrides: 50652233!
xxxx: aBalance 
	^aBalance +  value.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:23:21' overrides: 50652233!
xxxx: balance 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:23:44' prior: 50652248 overrides: 50652233!
xxxx: aBalance 
	^aBalance - value.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:27:25' prior: 50651738!
processOn: balance 
	self subclassResponsibility .! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:27:25' prior: 50651743 overrides: 50652258!
processOn: aBalance 
	^aBalance +  value.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:27:25' prior: 50651748 overrides: 50652258!
processOn: aBalance 
	^aBalance - value.! !

!methodRemoval: AccountTransaction #xxxx: stamp: 'jgv 10/11/2023 18:30:18'!
xxxx: balance 
	self subclassResponsibility .!

!methodRemoval: Deposit #xxxx: stamp: 'jgv 10/11/2023 18:30:18'!
xxxx: aBalance 
	^aBalance +  value.!

!methodRemoval: Withdraw #xxxx: stamp: 'jgv 10/11/2023 18:30:18'!
xxxx: aBalance 
	^aBalance - value.!

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'no messages' stamp: 'jgv 10/9/2023 21:29:04' prior: 50651788!
test01
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:49:19' prior: 50652299!
test01
	|portfolio| 
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.! !
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:49:49' prior: 50651810!
balance
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:18'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:50:01' prior: 50652316!
balance
	^ balance! !
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:50:22' prior: 50652328!
balance
	^ 0.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:52:07' prior: 50651843!
test02
	|portfolio|
	
	portfolio := Portfolio new.
	
	portfolio add: ReceptiveAccount new.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:54:04' prior: 50652336!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	account register:  AccountTransaction new.
	
	portfolio add: 0! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:55:41' prior: 50652342!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	AccountTransaction register: 50 on: account.
	
	portfolio add: 0! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:55:45' prior: 50652350!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	AccountTransaction register: 50 on: account.
	
	portfolio add: account.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:57:46' prior: 50652358!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Withdraw  register: 50 on: account.
		
	portfolio add: account.! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44' prior: 50651861!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48' prior: 50651869!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52' prior: 50651878!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32' prior: 50651888!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46' prior: 50651898!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 5/17/2021 17:29:53' prior: 50651911!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01' prior: 50651923!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' prior: 50651951 overrides: 16902254!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00' prior: 50651966!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45' prior: 50651989!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50651994 overrides: 50652474!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38' prior: 50652007!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46' prior: 50652182!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50652187 overrides: 50652474!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33' prior: 50652045!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:19'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' prior: 50652067 overrides: 16920235!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50652072!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50652078!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32' prior: 50652220!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43' prior: 50652088!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 20:47:30' prior: 50652550!
initializeFor: aValue

	value := 0 - aValue.! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 20:48:08' prior: 50652617!
initializeFor: aValue

	value := aValue.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:51:17' prior: 50652605!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ]
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:51:36' prior: 50652627!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ].
		aTransaction value.
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:52:29' prior: 50652635!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ].
		aTransaction class = Deposit ifTrue: [
				aTransaction value.
			]
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:56:54' prior: 50652644!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction class = Withdraw ifTrue: [
				aTransaction value negated.
			 ].
		aTransaction class = Deposit ifTrue: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:58:28' prior: 50652654!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				^aTransaction value negated.
			 ].
		(aTransaction isKindOf: Deposit) ifTrue: [
				^aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:59:41' prior: 50652664!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ].
		(aTransaction isKindOf: Deposit) ifTrue: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 21:01:31' prior: 50652622!
initializeFor: aValue

	value := aValue negated.! !
!Withdraw methodsFor: 'value' stamp: 'jgv 10/9/2023 21:01:36' prior: 50652555 overrides: 50652474!
value

	^ value negated! !
!Withdraw methodsFor: 'value' stamp: 'jgv 10/9/2023 21:01:41' prior: 50652691 overrides: 50652474!
value

	^ value negated.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32' prior: 50652675!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!Withdraw methodsFor: 'initialization' stamp: 'jgv 10/9/2023 21:17:01' prior: 50652686!
initializeFor: aValue

	value := aValue.! !
!Withdraw methodsFor: 'value' stamp: 'jgv 10/9/2023 21:17:20' prior: 50652695 overrides: 50652474!
value

	^ value.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 20:59:41' prior: 50652699!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ].
		(aTransaction isKindOf: Deposit) ifTrue: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:17:53' prior: 50652714!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ]ifFalse: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:18:23' prior: 50652725!
balance

	^transactions sum: [ :aTransaction | 
		(aTransaction isKindOf: Withdraw ) ifTrue: [
				aTransaction value negated.
			 ] ifFalse: [
				aTransaction value.
			].
		
		] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:22:09' prior: 50652734!
balance
	
	|balance| 
	
	balance := 0.
	
	transactions do: [ :aTransaction | 
		balance := aTransaction xxxx: balance.
		] .
	
	^balance! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:22:30'!
xxxx: balance 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:22:36' prior: 50652751!
xxxx: balance 
	self subclassResponsibility .! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:22:46' overrides: 50652756!
xxxx: balance 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:23:13' prior: 50652761 overrides: 50652756!
xxxx: aBalance 
	^aBalance +  value.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:23:21' overrides: 50652756!
xxxx: balance 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:23:44' prior: 50652771 overrides: 50652756!
xxxx: aBalance 
	^aBalance - value.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:27:25' prior: 50652258!
processOn: balance 
	self subclassResponsibility .! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:27:25' prior: 50652264 overrides: 50652781!
processOn: aBalance 
	^aBalance +  value.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'jgv 10/9/2023 21:27:25' prior: 50652269 overrides: 50652781!
processOn: aBalance 
	^aBalance - value.! !

!methodRemoval: AccountTransaction #xxxx: stamp: 'jgv 10/11/2023 18:30:20'!
xxxx: balance 
	self subclassResponsibility .!

!methodRemoval: Deposit #xxxx: stamp: 'jgv 10/11/2023 18:30:20'!
xxxx: aBalance 
	^aBalance +  value.!

!methodRemoval: Withdraw #xxxx: stamp: 'jgv 10/11/2023 18:30:20'!
xxxx: aBalance 
	^aBalance - value.!

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:20'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:20'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'no messages' stamp: 'jgv 10/9/2023 21:29:04' prior: 50652310!
test01
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:20'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:49:19' prior: 50652822!
test01
	|portfolio| 
	
	portfolio := Portfolio new.
	
	self assert: portfolio balance equals: 0.! !
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:49:49' prior: 50652332!
balance
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:30:20'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:50:01' prior: 50652839!
balance
	^ balance! !
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/9/2023 21:50:22' prior: 50652851!
balance
	^ 0.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:52:07' prior: 50652366!
test02
	|portfolio|
	
	portfolio := Portfolio new.
	
	portfolio add: ReceptiveAccount new.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:54:04' prior: 50652859!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	account register:  AccountTransaction new.
	
	portfolio add: 0! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:55:41' prior: 50652865!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	AccountTransaction register: 50 on: account.
	
	portfolio add: 0! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:55:45' prior: 50652873!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	AccountTransaction register: 50 on: account.
	
	portfolio add: account.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/9/2023 21:57:46' prior: 50652881!
test02
	|portfolio account|
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Withdraw  register: 50 on: account.
		
	portfolio add: account.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jgv 10/11/2023 18:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jgv 10/11/2023 18:30:43'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jgv 10/11/2023 18:30:43'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jgv 10/11/2023 18:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jgv 10/11/2023 18:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jgv 10/11/2023 18:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jgv 10/11/2023 18:30:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jgv 10/11/2023 18:31:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jgv 10/11/2023 18:31:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jgv 10/11/2023 18:31:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jgv 10/11/2023 18:31:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jgv 10/11/2023 18:31:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jgv 10/11/2023 18:31:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jgv 10/11/2023 18:31:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jgv 10/11/2023 18:31:26'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'jgv 10/11/2023 18:31:53' prior: 50652743!
balance
	
	|balance| 
	
	balance := 0.
	
	transactions do: [ :aTransaction | 
		balance := aTransaction processOn: balance.
		] .
	
	^balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jgv 10/11/2023 18:31:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jgv 10/11/2023 18:31:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jgv 10/11/2023 18:31:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jgv 10/11/2023 18:31:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jgv 10/11/2023 18:31:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jgv 10/11/2023 18:31:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jgv 10/11/2023 18:31:56'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:35:48' prior: 50652889!
test02
	|portfolio anAccount anotherAccount|
	
	portfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw  register: 50 on: anAccount.
	
	Deposit register: 200 on: anotherAccount.
	 	
	portfolio addAccount: anAccount.! !

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:35:50'!
ERROR!
!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/11/2023 18:36:00'!
addAccount: anAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:36:14'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/11/2023 18:36:12' prior: 50653005!
addAccount: anAccount 
	accounts add: anAccount. ! !

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:36:17'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'jgv 10/11/2023 18:36:43' overrides: 16920235!
initialize
	accounts := OrderedCollection new.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:36:46'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:36:46'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:37:09' prior: 50652990!
test02
	|portfolio anAccount anotherAccount|
	
	portfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw  register: 50 on: anAccount.
	
	Deposit register: 200 on: anotherAccount.
	 	
	portfolio addAccount: anAccount.
	
	self assert: 250 equals: portfolio balance.! !

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:37:11'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/11/2023 18:38:03' prior: 50652855!
balance
	^ accounts sum:  [:anAccount | anAccount balance ] ifEmpty: 0.! !
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/11/2023 18:38:10' prior: 50653050!
balance
	^ accounts sum:  [:anAccount | anAccount balance ] ifEmpty: [^0].! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:38:11'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:38:11'!
FAILURE!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:38:11'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/11/2023 18:38:35' prior: 50653055!
balance
	^ accounts sum:  [:anAccount | anAccount balance ] ifEmpty: [0].! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:38:37'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:38:37'!
FAILURE!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:38:37'!
FAILURE!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:38:58' prior: 50653033!
test02
	|portfolio anAccount anotherAccount|
	
	portfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw  register: 50 on: anAccount.
	
	Deposit register: 200 on: anotherAccount.
	 	
	portfolio addAccount: anAccount.
	portfolio addAccount: anotherAccount.
	
	self assert: 250 equals: portfolio balance.! !

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:39:00'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:39:04'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:39:04'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:39:10'!
test03
	|portfolio anAccount anotherAccount|
	
	portfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw  register: 50 on: anAccount.
	
	Deposit register: 200 on: anotherAccount.
	 	
	portfolio addAccount: anAccount.
	portfolio addAccount: anotherAccount.
	
	self assert: 250 equals: portfolio balance.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:39:40'!
setup
	! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:40:46' prior: 50653118!
setup
	|portfolio anAccount anotherAccount|
	
	portfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: anAccount.
	Withdraw  register: 50 on: anAccount.
	
	Deposit register: 200 on: anotherAccount.! !

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:43:40'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: 'aPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:43:41'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: 'aPortfolio accountOne'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:43:42'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: 'aPortfolio accountOne accountTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:43:39' prior: 50653121!
setup
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	
	Deposit register: 100 on: accountOne.
	Withdraw  register: 50 on: accountOne.
	
	Deposit register: 200 on: accountTwo.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:44:05' prior: 50652833!
test01	
	self assert: aPortfolio balance equals: 0.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:44:51' prior: 50653081!
test02

	aPortfolio addAccount: accountOne.
	aPortfolio addAccount: accountTwo .
	
	self assert: 250 equals: aPortfolio balance.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:45:25' prior: 50653103!
test03	.
	
	self assert: 250 equals: aPortfolio balance.! !

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:46:26'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: 'aPortfolio accountOne accountTwo accountThree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:46:25' prior: 50653157!
setup
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	
	accountThree := ReceptiveAccount new.
	
	Deposit register: 100 on: accountOne.
	Withdraw  register: 50 on: accountOne.
	
	Deposit register: 200 on: accountTwo.
	
	Deposit register: 500 on: accountThree.
	Withdraw register: 250 on: accountThree.! !

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:46:59'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: 'aPortfolio accountOne accountTwo accountThree anotherPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:46:57' prior: 50653180!
test03	.
	
	aPortfolio addPortfolio: anotherPortfolio.
	
	self assert: 250 equals: aPortfolio balance.
	! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:47:43' prior: 50653194!
setup
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	

	
	Deposit register: 100 on: accountOne.
	Withdraw  register: 50 on: accountOne.
	
	Deposit register: 200 on: accountTwo.

	accountThree := ReceptiveAccount new.
		
	Deposit register: 500 on: accountThree.
	Withdraw register: 250 on: accountThree.
	
	anotherPortfolio := Portfolio new.
	
	anotherPortfolio addAccount: accountThree.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:48:04' prior: 50653218!
test03	.
	
	aPortfolio addPortfolio: anotherPortfolio.
	
	self assert: 500 equals: aPortfolio balance.
	! !

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/11/2023 18:48:15'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:49:10'!
Object subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'portfolios' stamp: 'jgv 10/11/2023 18:49:09'!
addPortfolio: aPortfolio
	portfolios add: aPortfolio.! !
!Portfolio methodsFor: 'initialization' stamp: 'jgv 10/11/2023 18:49:26' prior: 50653024 overrides: 16920235!
initialize
	accounts := OrderedCollection new.
	portfolios  := OrderedCollection new.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:49:33'!
ERROR!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:49:33'!
ERROR!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/11/2023 18:49:33'!
ERROR!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:49:37'!
ERROR!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:50:11' overrides: 16961394!
setUp
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	

	
	Deposit register: 100 on: accountOne.
	Withdraw  register: 50 on: accountOne.
	
	Deposit register: 200 on: accountTwo.

	accountThree := ReceptiveAccount new.
		
	Deposit register: 500 on: accountThree.
	Withdraw register: 250 on: accountThree.
	
	anotherPortfolio := Portfolio new.
	
	anotherPortfolio addAccount: accountThree.! !

!methodRemoval: PorfolioTest #setup stamp: 'jgv 10/11/2023 18:50:11'!
setup
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	

	
	Deposit register: 100 on: accountOne.
	Withdraw  register: 50 on: accountOne.
	
	Deposit register: 200 on: accountTwo.

	accountThree := ReceptiveAccount new.
		
	Deposit register: 500 on: accountThree.
	Withdraw register: 250 on: accountThree.
	
	anotherPortfolio := Portfolio new.
	
	anotherPortfolio addAccount: accountThree.!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:50:13'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:50:13'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/11/2023 18:50:13'!
FAILURE!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/11/2023 18:50:13'!
FAILURE!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:50:57' prior: 50653173!
test02

	aPortfolio addAccount: accountOne.
	aPortfolio addAccount: accountTwo.
	
	self assert: 250 equals: aPortfolio balance.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:51:09' prior: 50653241!
test03	.
	
	aPortfolio addAccount: accountOne.
	aPortfolio addAccount: accountTwo.
	
	aPortfolio addPortfolio: anotherPortfolio.
	
	self assert: 500 equals: aPortfolio balance.
	! !

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/11/2023 18:51:11'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/11/2023 18:52:19' prior: 50653068!
balance
	^ accounts sum:  [:anAccount | anAccount balance ] ifEmpty: [0] + (portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0]).! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:52:23'!
ERROR!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:52:23'!
ERROR!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/11/2023 18:52:23'!
ERROR!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:52:30'!
ERROR!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:52:44'!
ERROR!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:52:44'!
ERROR!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/11/2023 18:52:44'!
ERROR!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:52:46'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/11/2023 18:53:02' prior: 50653339!
balance
	^ (accounts sum:  [:anAccount | anAccount balance ] ifEmpty: [0])+ (portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0]).! !
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/11/2023 18:53:08' prior: 50653365!
balance
	^ (accounts sum:  [:anAccount | anAccount balance ] ifEmpty: [0]) + (portfolios sum: [:aPortfolio | aPortfolio balance] ifEmpty: [0]).! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:53:11'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:53:12'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:53:12'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/11/2023 18:53:12'!
PASSED!

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/11/2023 18:57:23'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: 'aPortfolio accountOne accountTwo accountThree anotherPortfolio transactionOne'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:57:20'!
test04.
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:57:39' prior: 50653399!
test04.
	
	self deny: (aPortfolio hasRegistered: transactionOne).
	! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/11/2023 18:57:51' prior: 50653278 overrides: 16961394!
setUp
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	

	
	transactionOne := Deposit register: 100 on: accountOne.
	Withdraw  register: 50 on: accountOne.
	
	Deposit register: 200 on: accountTwo.

	accountThree := ReceptiveAccount new.
		
	Deposit register: 500 on: accountThree.
	Withdraw register: 250 on: accountThree.
	
	anotherPortfolio := Portfolio new.
	
	anotherPortfolio addAccount: accountThree.! !

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/11/2023 18:58:05'!
ERROR!
!Portfolio methodsFor: 'transactinos' stamp: 'jgv 10/11/2023 18:58:23'!
hasRegistered: aTransactionOne 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactinos' stamp: 'jgv 10/11/2023 18:58:34' prior: 50653430!
hasRegistered: aTransactionOne 
	^false.! !

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/11/2023 18:58:35'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/11/2023 18:58:35'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/11/2023 18:58:35'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/11/2023 18:58:35'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/11/2023 18:58:35'!
PASSED!

----QUIT----(11 October 2023 18:58:43) CuisUniversity-Portfolio.image priorSource: 10197502!

----STARTUP---- (12 October 2023 16:17:11) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-Portfolio.image!


!testRun: #PorfolioTest #test04 stamp: 'jgv 10/12/2023 16:18:03'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/12/2023 16:18:03'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/12/2023 16:18:03'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/12/2023 16:18:03'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/12/2023 16:18:03'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:21:52'!
test05
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:22:17' prior: 50653469!
test05
	aPortfolio addAccount: accountOne .
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	! !

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/12/2023 16:22:48'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: 'aPortfolio accountOne accountTwo accountThree anotherPortfolio transactionOne transactionTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:22:47' prior: 50653474!
test05
	aPortfolio addAccount: accountOne .
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:23:17' prior: 50653410 overrides: 16961394!
setUp
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	

	
	transactionOne := Deposit register: 100 on: accountOne.
	Withdraw  register: 50 on: accountOne.
	
	transactionTwo := Deposit register: 200 on: accountTwo.

	accountThree := ReceptiveAccount new.
		
	Deposit register: 500 on: accountThree.
	Withdraw register: 250 on: accountThree.
	
	anotherPortfolio := Portfolio new.
	
	anotherPortfolio addAccount: accountThree.! !

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/12/2023 16:23:39'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: 'aPortfolio accountOne accountTwo accountThree anotherPortfolio transactionOne transactionTwo transactionThree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:23:38' prior: 50653500 overrides: 16961394!
setUp
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	

	
	transactionOne := Deposit register: 100 on: accountOne.
	transactionTwo := Withdraw  register: 50 on: accountOne.
	
	transactionThree := Deposit register: 200 on: accountTwo.

	accountThree := ReceptiveAccount new.
		
	Deposit register: 500 on: accountThree.
	Withdraw register: 250 on: accountThree.
	
	anotherPortfolio := Portfolio new.
	
	anotherPortfolio addAccount: accountThree.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:23:55' prior: 50653491!
test05
	aPortfolio addAccount: accountOne .
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	self assert: (aPortfolio hasRegistered: transactionThree).! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:24:10' prior: 50653549!
test05
	aPortfolio addAccount: accountOne.
	aPortfolio addAccount: accountTwo.
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	self assert: (aPortfolio hasRegistered: transactionThree).! !

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/12/2023 16:24:13'!
FAILURE!
!Portfolio methodsFor: 'transactinos' stamp: 'jgv 10/12/2023 16:25:34' prior: 50653435!
hasRegistered: aTransactionOne 
	^accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransactionOne ].! !
!Portfolio methodsFor: 'transactinos' stamp: 'jgv 10/12/2023 16:25:39' prior: 50653573!
hasRegistered: aTransaction 
	^accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction ].! !

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/12/2023 16:25:45'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/12/2023 16:25:45'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/12/2023 16:25:45'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/12/2023 16:25:45'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/12/2023 16:25:45'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/12/2023 16:25:45'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:26:15'!
test06
	aPortfolio addAccount: accountOne.
	aPortfolio addAccount: accountTwo.
	
	aPortfolio addPortfolio: anotherPortfolio.
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	self assert: (aPortfolio hasRegistered: transactionThree).! !

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/12/2023 16:26:32'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: 'aPortfolio accountOne accountTwo accountThree anotherPortfolio transactionOne transactionTwo transactionThree transactionFour'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:26:31' prior: 50653600!
test06
	aPortfolio addAccount: accountOne.
	aPortfolio addAccount: accountTwo.
	
	aPortfolio addPortfolio: anotherPortfolio.
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	self assert: (aPortfolio hasRegistered: transactionThree).
	self assert: (aPortfolio hasRegistered: transactionFour).! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:26:56' prior: 50653530 overrides: 16961394!
setUp
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	

	
	transactionOne := Deposit register: 100 on: accountOne.
	transactionTwo := Withdraw  register: 50 on: accountOne.
	
	transactionThree := Deposit register: 200 on: accountTwo.

	accountThree := ReceptiveAccount new.
		
	transactionFour := Deposit register: 500 on: accountThree.
	Withdraw register: 250 on: accountThree.
	
	anotherPortfolio := Portfolio new.
	
	anotherPortfolio addAccount: accountThree.! !

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/12/2023 16:27:31'!
FAILURE!
!Portfolio methodsFor: 'transactinos' stamp: 'jgv 10/12/2023 16:28:41' prior: 50653580!
hasRegistered: aTransaction 
	^(accounts anySatisfy: [:anAccount | anAccount hasRegistered: aTransaction ]) or: [ portfolios anySatisfy: [:aPortfolio | aPortfolio hasRegistered: aTransaction ]].! !
!Portfolio methodsFor: 'transactinos' stamp: 'jgv 10/12/2023 16:29:23' prior: 50653661!
hasRegistered: aTransaction 
	^(accounts anySatisfy: [
		:anAccount | anAccount hasRegistered: aTransaction 
		]
	) 
	or: [
		 portfolios anySatisfy: [
			:aPortfolio | aPortfolio hasRegistered: aTransaction
			 ]
		].! !

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/12/2023 16:29:27'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/12/2023 16:29:27'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/12/2023 16:29:27'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/12/2023 16:29:27'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/12/2023 16:29:27'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/12/2023 16:29:27'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/12/2023 16:29:27'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/12/2023 16:29:38'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/12/2023 16:29:38'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/12/2023 16:29:38'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/12/2023 16:29:38'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/12/2023 16:29:38'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/12/2023 16:29:38'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/12/2023 16:29:38'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:36:27'!
test07
	self assert: (OrderedCollection new) equals: aPortfolio transactions.! !

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/12/2023 16:36:33'!
ERROR!
!Portfolio methodsFor: 'transactinos' stamp: 'jgv 10/12/2023 16:36:49'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactinos' stamp: 'jgv 10/12/2023 16:37:02' prior: 50653720!
transactions
	^ OrderedCollection new.! !

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/12/2023 16:37:04'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/12/2023 16:37:04'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/12/2023 16:37:04'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/12/2023 16:37:04'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/12/2023 16:37:04'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/12/2023 16:37:04'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/12/2023 16:37:04'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/12/2023 16:37:04'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:39:38'!
test08
	aPortfolio addAccount: accountOne.
	aPortfolio addAccount: accountTwo.

	self assert: (OrderedCollection new) equals: aPortfolio transactions.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/12/2023 16:41:36' prior: 50653748!
test08

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree.
	
	aPortfolio addAccount: accountOne.
	aPortfolio addAccount: accountTwo.


	self assert:  transactionCollection equals: aPortfolio transactions.! !

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/12/2023 16:41:54'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/12/2023 16:44:48'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/12/2023 16:44:48'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/12/2023 16:44:48'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/12/2023 16:44:48'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/12/2023 16:44:48'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/12/2023 16:44:48'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/12/2023 16:44:48'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/12/2023 16:44:48'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/12/2023 16:44:48'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/12/2023 16:44:48'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/12/2023 16:46:00'!
FAILURE!
!Portfolio methodsFor: 'transactinos' stamp: 'jgv 10/12/2023 16:47:00' prior: 50653725!
transactions
	^ accounts inject: OrderedCollection new into:[:transactionCollection :anAccount | transactionCollection . anAccount transactions] .! !

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/12/2023 16:47:03'!
FAILURE!

----QUIT----(12 October 2023 16:48:55) CuisUniversity-Portfolio.image priorSource: 10297602!

----STARTUP---- (17 October 2023 17:37:12) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-Portfolio.image!


Object subclass: #FinancialService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialService category: 'Portfolio-Ejercicio' stamp: 'jgv 10/17/2023 17:43:08'!
Object subclass: #FinancialService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialService subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/17/2023 17:43:41'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'balance accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialService subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'jgv 10/17/2023 17:43:54'!
FinancialService subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialService methodsFor: 'balance' stamp: 'jgv 10/17/2023 17:45:42'!
balance

	self subclassResponsibility! !
!FinancialService methodsFor: 'transactions' stamp: 'jgv 10/17/2023 17:46:31'!
hasRegistered: aTransaction

	self subclassResponsibility! !
!FinancialService methodsFor: 'transactions' stamp: 'jgv 10/17/2023 17:46:47'!
transactions

	self subclassResponsibility! !
!FinancialService methodsFor: 'transactions' stamp: 'jgv 10/17/2023 17:47:04'!
register: aTransaction

	self subclassResponsibility! !

!methodRemoval: FinancialService #register: stamp: 'jgv 10/17/2023 17:48:29'!
register: aTransaction

	self subclassResponsibility!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/17/2023 17:50:19'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialService subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/17/2023 17:54:58'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialService subclass: #Portfolio
	instanceVariableNames: 'finalcialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/17/2023 17:55:48'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'finalcialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/17/2023 17:56:15'!
add: aFinancialService
	finalcialServices add: aFinancialService.! !

FinancialService subclass: #Portfolio
	instanceVariableNames: 'finanlcialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/17/2023 17:56:30'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'finanlcialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/17/2023 17:56:34'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/17/2023 17:56:45' prior: 50653908!
add: aFinancialService
	financialServices add: aFinancialService.! !

!methodRemoval: Portfolio #addAccount: stamp: 'jgv 10/17/2023 17:56:56'!
addAccount: anAccount 
	accounts add: anAccount. !

!methodRemoval: Portfolio #addPortfolio: stamp: 'jgv 10/17/2023 17:57:01'!
addPortfolio: aPortfolio
	portfolios add: aPortfolio.!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 17:57:45' prior: 50653639 overrides: 16961394!
setUp
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	

	
	transactionOne := Deposit register: 100 on: accountOne.
	transactionTwo := Withdraw  register: 50 on: accountOne.
	
	transactionThree := Deposit register: 200 on: accountTwo.

	accountThree := ReceptiveAccount new.
		
	transactionFour := Deposit register: 500 on: accountThree.
	Withdraw register: 250 on: accountThree.
	
	anotherPortfolio := Portfolio new.
	
	anotherPortfolio add: accountThree.! !
!Portfolio methodsFor: 'initialization' stamp: 'jgv 10/17/2023 17:59:06' prior: 50653263 overrides: 16920235!
initialize
	financialServices := OrderedCollection new.
! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 17:59:17'!
ERROR!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 17:59:17'!
ERROR!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/17/2023 17:59:17'!
ERROR!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 17:59:17'!
ERROR!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/17/2023 17:59:17'!
ERROR!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/17/2023 17:59:17'!
ERROR!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 17:59:17'!
ERROR!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 17:59:17'!
ERROR!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 17:59:19'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'jgv 10/17/2023 18:00:08' prior: 50653373 overrides: 50653853!
balance
	^ financialServices sum: [:aFinancialService | aFinancialService balance] ifEmpty: [0].! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 18:00:10'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 18:00:12'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 18:00:12'!
ERROR!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/17/2023 18:00:12'!
ERROR!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 18:00:12'!
ERROR!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/17/2023 18:00:12'!
ERROR!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/17/2023 18:00:12'!
ERROR!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:00:12'!
ERROR!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:00:12'!
ERROR!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 18:00:14'!
ERROR!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:00:24' prior: 50653321!
test02

	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	self assert: 250 equals: aPortfolio balance.! !

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 18:00:25'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/17/2023 18:00:27'!
ERROR!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:00:46' prior: 50653328!
test03	.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	aPortfolio add: anotherPortfolio.
	
	self assert: 500 equals: aPortfolio balance.
	! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 18:00:47'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 18:00:47'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/17/2023 18:00:47'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 18:00:47'!
ERROR!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/17/2023 18:00:47'!
ERROR!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/17/2023 18:00:47'!
ERROR!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:00:47'!
ERROR!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:00:47'!
ERROR!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 18:00:52'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'jgv 10/17/2023 18:01:22' prior: 50653670 overrides: 50653857!
hasRegistered: aTransaction 
	^financialServices anySatisfy: [
		:aFinancialService | aFinancialService hasRegistered: aTransaction 
		].! !

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 18:01:24'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:01:31' prior: 50653559!
test05
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	self assert: (aPortfolio hasRegistered: transactionThree).! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 18:01:32'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 18:01:32'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/17/2023 18:01:32'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 18:01:32'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/17/2023 18:01:32'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/17/2023 18:01:32'!
ERROR!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:01:32'!
ERROR!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:01:32'!
ERROR!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:01:44' prior: 50653624!
test06
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	aPortfolio add: anotherPortfolio.
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	self assert: (aPortfolio hasRegistered: transactionThree).
	self assert: (aPortfolio hasRegistered: transactionFour).! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 18:01:46'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 18:01:46'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/17/2023 18:01:46'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 18:01:46'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/17/2023 18:01:46'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/17/2023 18:01:46'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:01:46'!
ERROR!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:01:46'!
ERROR!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:01:50'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'jgv 10/17/2023 18:02:28' prior: 50653797 overrides: 50653862!
transactions
	^ financialServices inject: OrderedCollection new into:[:transactionCollection :aFinancialService | transactionCollection . aFinancialService transactions] .! !

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:02:30'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:02:39' prior: 50653756!
test08

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.


	self assert:  transactionCollection equals: aPortfolio transactions.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 18:02:41'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 18:02:41'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/17/2023 18:02:41'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 18:02:41'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/17/2023 18:02:41'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/17/2023 18:02:41'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:02:41'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:02:41'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:02:41'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:04:34'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:07:47'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:07:47'!
FAILURE!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:09:01'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:09:11'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:09:11'!
FAILURE!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:10:00' prior: 50654156!
test08

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree.

	self assert:  transactionCollection equals: aPortfolio transactions.! !

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:10:01'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:10:03'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:10:10'!
FAILURE!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:02:39' prior: 50654203!
test08

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.


	self assert:  transactionCollection equals: aPortfolio transactions.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:10:47' prior: 50654220!
test08

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.

	self assert:  transactionCollection equals: aPortfolio transactions.! !

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:13:47'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:13:49'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:13:53'!
FAILURE!

aPortfolio transactions!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:15:59'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:17:05'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:17:05'!
FAILURE!

aFinancialService transactions!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:20:37'!
FAILURE!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:20:47'!
PASSED!

(OrderedCollection with: 2 with: 3) . (OrderedCollection with: 2)!

(OrderedCollection with: 2 with: 3) . (OrderedCollection with: 2).!
!Portfolio methodsFor: 'transactions' stamp: 'jgv 10/17/2023 18:22:01' prior: 50654145 overrides: 50653862!
transactions
	^ financialServices inject: OrderedCollection new into:[:transactionCollection :aFinancialService | transactionCollection , aFinancialService transactions] .! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 18:22:06'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 18:22:06'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/17/2023 18:22:06'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 18:22:06'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/17/2023 18:22:06'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/17/2023 18:22:06'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:22:06'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:22:06'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:22:30'!
test09

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	aPortfolio add: anotherPortfolio.

	self assert:  transactionCollection equals: aPortfolio transactions.! !

!classDefinition: #PorfolioTest category: 'Portfolio-Ejercicio' stamp: 'jgv 10/17/2023 18:23:25'!
TestCase subclass: #PorfolioTest
	instanceVariableNames: 'aPortfolio accountOne accountTwo accountThree anotherPortfolio transactionOne transactionTwo transactionThree transactionFour transactionFive'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:23:23' prior: 50653954 overrides: 16961394!
setUp
	
	aPortfolio := Portfolio new.
	
	accountOne := ReceptiveAccount new.
	
	accountTwo := ReceptiveAccount new.
	

	
	transactionOne := Deposit register: 100 on: accountOne.
	transactionTwo := Withdraw  register: 50 on: accountOne.
	
	transactionThree := Deposit register: 200 on: accountTwo.

	accountThree := ReceptiveAccount new.
		
	transactionFour := Deposit register: 500 on: accountThree.
	transactionFive := Withdraw register: 250 on: accountThree.
	
	anotherPortfolio := Portfolio new.
	
	anotherPortfolio add: accountThree.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:23:49' prior: 50654297!
test09

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree with: transactionFour with: transactionFive.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	aPortfolio add: anotherPortfolio.

	self assert:  transactionCollection equals: aPortfolio transactions.! !

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/17/2023 18:23:51'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 18:23:51'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 18:23:51'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/17/2023 18:23:51'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 18:23:51'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/17/2023 18:23:51'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/17/2023 18:23:51'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:23:51'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:23:51'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/17/2023 18:23:51'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:33:57'!
test10
	aPortfolio add: accountOne. 
	
	self should: [ aPortfolio add: accountOne ]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddExisitingAccount
		]! !

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/17/2023 18:34:03'!
FAILURE!
!Portfolio class methodsFor: 'no messages' stamp: 'jgv 10/17/2023 18:36:44'!
canNotAddExisitingAccount
	^'Cannot add an account that already exists in the portfolio'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'jgv 10/17/2023 18:36:45' prior: 50654392!
canNotAddExisitingAccount
	^'Cannot add an account that already exists in the portfolio'.! !

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/17/2023 18:37:07'!
FAILURE!

----End fileIn of /home/kovix/Documents/Facu/Inge I/CUIS/linux64/Packages/TerseGuide.pck.st----!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'jgv 10/17/2023 18:40:46'!
canNotAddExisitingAccountErrorDescription
	^'Cannot add an account that already exists in the portfolio'.! !

!methodRemoval: Portfolio class #canNotAddExisitingAccount stamp: 'jgv 10/17/2023 18:40:46'!
canNotAddExisitingAccount
	^'Cannot add an account that already exists in the portfolio'.!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:41:02' prior: 50654380!
test10
	aPortfolio add: accountOne. 
	
	self should: [ aPortfolio add: accountOne ]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddExisitingAccountErrorDescription.
		]! !
!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/17/2023 18:42:01' prior: 50653940!
add: aFinancialService
	(financialServices includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
	financialServices add: aFinancialService.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/17/2023 18:42:05'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/17/2023 18:42:05'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/17/2023 18:42:05'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/17/2023 18:42:05'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/17/2023 18:42:05'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/17/2023 18:42:05'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/17/2023 18:42:05'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/17/2023 18:42:05'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/17/2023 18:42:05'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/17/2023 18:42:05'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:42:37'!
test11
	aPortfolio add: accountOne.
	
	aPortfolio add: aPortfolio.
	
	self should: [ aPortfolio add: accountOne ]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddExisitingAccountErrorDescription.
		]! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/17/2023 18:45:04' prior: 50657381!
test11
	
	aPortfolio add: anotherPortfolio.
	
	self should: [ aPortfolio add: accountThree]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddExisitingAccountErrorDescription.
		]! !

----SNAPSHOT----(17 October 2023 18:55:16) CuisUniversity-Portfolio.image priorSource: 10308993!

----QUIT----(17 October 2023 18:55:28) CuisUniversity-Portfolio.image priorSource: 10424047!

----STARTUP---- (18 October 2023 16:52:33) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-Portfolio.image!

!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/18/2023 16:59:35' prior: 50657349!
add: aFinancialService
	financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		(anotherFinancialService hasFinancialService: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	financialServices add: aFinancialService.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:00:17'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:00:17'!
ERROR!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:00:17'!
ERROR!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:00:17'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:00:17'!
ERROR!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:00:17'!
ERROR!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:00:17'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:00:17'!
ERROR!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:00:17'!
ERROR!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:00:17'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:00:17'!
FAILURE!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:00:19'!
ERROR!
!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/18/2023 17:01:43' prior: 50657413!
add: aFinancialService
	financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService hasFinancialService: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		].
	financialServices add: aFinancialService.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:01:47'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:01:47'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:01:47'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:01:47'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:01:47'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:01:47'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:01:47'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:01:47'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:01:47'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:01:47'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:01:47'!
FAILURE!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:01:47'!
FAILURE!
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:04:50' prior: 50657459!
add: aFinancialService
	financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService xxxxx: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:05:05'!
hasFinancialService: aFinancialService

	^ financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService xxxxx: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:05:05' prior: 50657508!
add: aFinancialService
	self hasFinancialService: aFinancialService.
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:06:02' prior: 50657527!
hasFinancialService: aFinancialService

	^ financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService hasFinancialService: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		]! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:06:09'!
PASSED!
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 17:15:37' prior: 50657553!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService 
			].
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			anotherFinancialService hasFinancialService: aFinancialService
		].
	].! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:15:40'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:15:40'!
ERROR!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:15:40'!
ERROR!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:15:40'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:15:40'!
ERROR!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:15:40'!
ERROR!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:15:40'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:15:40'!
ERROR!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:15:40'!
ERROR!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:15:40'!
FAILURE!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:15:40'!
FAILURE!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:15:43'!
ERROR!
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 17:16:10' prior: 50657599!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				^anotherFinancialService = aFinancialService 
			].
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			^anotherFinancialService hasFinancialService: aFinancialService
		].
	].! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:17:09' prior: 50657546!
add: aFinancialService
	(self hasFinancialService: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:17:12'!
PASSED!
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:18:41'!
hasFinancialService: aFinancialService
	^self = aFinancialService.! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 17:19:12' prior: 50657642!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | anotherFinancialService hasFinancialService: aFinancialService	].! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:19:16'!
PASSED!
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:25:46' prior: 50657657!
add: aFinancialService
	(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !

!methodRemoval: Portfolio #hasFinancialService: stamp: 'jgv 10/18/2023 17:25:54'!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | anotherFinancialService hasFinancialService: aFinancialService	].!
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:26:10'!
includedIn: aFinancialService
	^self = aFinancialService.! !

!methodRemoval: ReceptiveAccount #hasFinancialService: stamp: 'jgv 10/18/2023 17:26:10'!
hasFinancialService: aFinancialService
	^self = aFinancialService.!
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:26:18' prior: 50657749!
includedIn: aPortfolio
	^self = aPortfolio.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:31:57' prior: 50657733!
add: aFinancialService
	(financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]) 
	ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:02'!
keyword1: aFinancialService

	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:02' prior: 50657764!
add: aFinancialService
	(self keyword1: aFinancialService) 
	ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:20'!
includes: aFinancialService

	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 17:32:20' prior: 50657783!
add: aFinancialService
	(self includes: aFinancialService) 
	ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !

!methodRemoval: Portfolio #keyword1: stamp: 'jgv 10/18/2023 17:32:20'!
keyword1: aFinancialService

	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]!
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:45' prior: 50657792!
includes: aFinancialService
	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:33:04' prior: 50657800!
add: aFinancialService
	(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:33:18'!
includes: aPortfolio
	^self = aPortfolio.! !

!methodRemoval: ReceptiveAccount #includedIn: stamp: 'jgv 10/18/2023 17:33:18'!
includedIn: aPortfolio
	^self = aPortfolio.!
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:33:27' prior: 50657832!
includes: aFinancialService
	^self = aFinancialService.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:33:33'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 17:35:26'!
test12
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddExisitingAccountErrorDescription.
		]! !
!Portfolio class methodsFor: 'errorDescriptions' stamp: 'jgv 10/18/2023 17:36:35'!
canNotAddPortfolioWithRepeatedAccounts
	^'No se puede agregar un portfolio que tenga cuentas repetidas'! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 17:36:54' prior: 50657871!
test12
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddPortfolioWithRepeatedAccounts.
		]! !

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:36:58'!
FAILURE!
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:43:20' prior: 50657824!
add: aFinancialService
	(aFinancialService isKindOf: ReceptiveAccount) ifTrue: [	
		(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			financialServices anySatisfy: [:registeredFinancialService |
					aFinancialService includes: registeredFinancialService 
				].
		].
	financialServices add: aFinancialService.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:43:22'!
PASSED!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:43:22'!
FAILURE!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:43:22'!
FAILURE!
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:44:08' prior: 50657898!
add: aFinancialService
	(aFinancialService isKindOf: ReceptiveAccount) ifTrue: [	
		(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			(financialServices anySatisfy: [:registeredFinancialService |
					aFinancialService includes: registeredFinancialService 
				]) ifTrue: [ self error: Portfolio canNotAddPortfolioWithRepeatedAccounts ].
		].
	financialServices add: aFinancialService.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:44:11'!
PASSED!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:44:11'!
FAILURE!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:44:11'!
FAILURE!

----STARTUP---- (18 October 2023 17:44:52) as /home/kovix/Documents/Facu/Inge I/CUIS/linux64/CuisUniversity-Portfolio.image!

!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/18/2023 16:59:35' prior: 50657349!
add: aFinancialService
	financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		(anotherFinancialService hasFinancialService: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/18/2023 17:01:43' prior: 50658000!
add: aFinancialService
	financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService hasFinancialService: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:04:50' prior: 50658018!
add: aFinancialService
	financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService xxxxx: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:05:05'!
hasFinancialService: aFinancialService

	^ financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService xxxxx: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:05:05' prior: 50658038!
add: aFinancialService
	self hasFinancialService: aFinancialService.
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:06:02' prior: 50658057!
hasFinancialService: aFinancialService

	^ financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService hasFinancialService: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		]! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 17:15:37' prior: 50658083!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService 
			].
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			anotherFinancialService hasFinancialService: aFinancialService
		].
	].! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 17:16:10' prior: 50658103!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				^anotherFinancialService = aFinancialService 
			].
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			^anotherFinancialService hasFinancialService: aFinancialService
		].
	].! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:17:09' prior: 50658076!
add: aFinancialService
	(self hasFinancialService: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:18:41'!
hasFinancialService: aFinancialService
	^self = aFinancialService.! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 17:19:12' prior: 50658118!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | anotherFinancialService hasFinancialService: aFinancialService	].! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:25:46' prior: 50658133!
add: aFinancialService
	(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !

!methodRemoval: Portfolio #hasFinancialService: stamp: 'jgv 10/18/2023 17:45:10'!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | anotherFinancialService hasFinancialService: aFinancialService	].!
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:26:10'!
includedIn: aFinancialService
	^self = aFinancialService.! !

!methodRemoval: ReceptiveAccount #hasFinancialService: stamp: 'jgv 10/18/2023 17:45:10'!
hasFinancialService: aFinancialService
	^self = aFinancialService.!
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:26:18' prior: 50658173!
includedIn: aPortfolio
	^self = aPortfolio.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:31:57' prior: 50658157!
add: aFinancialService
	(financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]) 
	ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:02'!
keyword1: aFinancialService

	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:02' prior: 50658188!
add: aFinancialService
	(self keyword1: aFinancialService) 
	ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:20'!
includes: aFinancialService

	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 17:32:20' prior: 50658207!
add: aFinancialService
	(self includes: aFinancialService) 
	ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !

!methodRemoval: Portfolio #keyword1: stamp: 'jgv 10/18/2023 17:45:10'!
keyword1: aFinancialService

	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]!
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:45' prior: 50658216!
includes: aFinancialService
	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:33:04' prior: 50658224!
add: aFinancialService
	(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:33:18'!
includes: aPortfolio
	^self = aPortfolio.! !

!methodRemoval: ReceptiveAccount #includedIn: stamp: 'jgv 10/18/2023 17:45:11'!
includedIn: aPortfolio
	^self = aPortfolio.!
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:33:27' prior: 50658256!
includes: aFinancialService
	^self = aFinancialService.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 17:35:26'!
test12
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddExisitingAccountErrorDescription.
		]! !
!Portfolio class methodsFor: 'errorDescriptions' stamp: 'jgv 10/18/2023 17:36:35'!
canNotAddPortfolioWithRepeatedAccounts
	^'No se puede agregar un portfolio que tenga cuentas repetidas'! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 17:36:54' prior: 50658269!
test12
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddPortfolioWithRepeatedAccounts.
		]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:43:20' prior: 50658248!
add: aFinancialService
	(aFinancialService isKindOf: ReceptiveAccount) ifTrue: [	
		(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			financialServices anySatisfy: [:registeredFinancialService |
					aFinancialService includes: registeredFinancialService 
				].
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:44:08' prior: 50658294!
add: aFinancialService
	(aFinancialService isKindOf: ReceptiveAccount) ifTrue: [	
		(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			(financialServices anySatisfy: [:registeredFinancialService |
					aFinancialService includes: registeredFinancialService 
				]) ifTrue: [ self error: Portfolio canNotAddPortfolioWithRepeatedAccounts ].
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/18/2023 16:59:35' prior: 50658311!
add: aFinancialService
	financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		(anotherFinancialService hasFinancialService: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accounts' stamp: 'jgv 10/18/2023 17:01:43' prior: 50658330!
add: aFinancialService
	financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService hasFinancialService: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:04:50' prior: 50658348!
add: aFinancialService
	financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService xxxxx: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:05:05'!
hasFinancialService: aFinancialService

	^ financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService xxxxx: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:05:05' prior: 50658368!
add: aFinancialService
	self hasFinancialService: aFinancialService.
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:06:02' prior: 50658387!
hasFinancialService: aFinancialService

	^ financialServices do: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription].
			].
		
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			(anotherFinancialService hasFinancialService: aFinancialService) ifTrue: [
				 self error: Portfolio canNotAddExisitingAccountErrorDescription ].
			].
		
		]! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 17:15:37' prior: 50658413!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				anotherFinancialService = aFinancialService 
			].
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			anotherFinancialService hasFinancialService: aFinancialService
		].
	].! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 17:16:10' prior: 50658433!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | 
		(anotherFinancialService isKindOf: ReceptiveAccount) ifTrue: [
				^anotherFinancialService = aFinancialService 
			].
		(anotherFinancialService isKindOf: Portfolio) ifTrue: [
			^anotherFinancialService hasFinancialService: aFinancialService
		].
	].! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:17:09' prior: 50658406!
add: aFinancialService
	(self hasFinancialService: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:18:41'!
hasFinancialService: aFinancialService
	^self = aFinancialService.! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 17:19:12' prior: 50658448!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | anotherFinancialService hasFinancialService: aFinancialService	].! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:25:46' prior: 50658463!
add: aFinancialService
	(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !

!methodRemoval: Portfolio #hasFinancialService: stamp: 'jgv 10/18/2023 17:45:14'!
hasFinancialService: aFinancialService

	^ financialServices anySatisfy: [: anotherFinancialService | anotherFinancialService hasFinancialService: aFinancialService	].!
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:26:10'!
includedIn: aFinancialService
	^self = aFinancialService.! !

!methodRemoval: ReceptiveAccount #hasFinancialService: stamp: 'jgv 10/18/2023 17:45:14'!
hasFinancialService: aFinancialService
	^self = aFinancialService.!
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:26:18' prior: 50658503!
includedIn: aPortfolio
	^self = aPortfolio.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:31:57' prior: 50658487!
add: aFinancialService
	(financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]) 
	ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:02'!
keyword1: aFinancialService

	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:02' prior: 50658518!
add: aFinancialService
	(self keyword1: aFinancialService) 
	ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:20' prior: 50658240!
includes: aFinancialService

	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 17:32:20' prior: 50658537!
add: aFinancialService
	(self includes: aFinancialService) 
	ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !

!methodRemoval: Portfolio #keyword1: stamp: 'jgv 10/18/2023 17:45:14'!
keyword1: aFinancialService

	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]!
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:32:45' prior: 50658546!
includes: aFinancialService
	^ financialServices anySatisfy: [:registeredFinancialService | registeredFinancialService includes: aFinancialService]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:33:04' prior: 50658554!
add: aFinancialService
	(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
	financialServices add: aFinancialService.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:33:18' prior: 50658265!
includes: aPortfolio
	^self = aPortfolio.! !

!methodRemoval: ReceptiveAccount #includedIn: stamp: 'jgv 10/18/2023 17:45:14'!
includedIn: aPortfolio
	^self = aPortfolio.!
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:33:27' prior: 50658587!
includes: aFinancialService
	^self = aFinancialService.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 17:35:26' prior: 50658284!
test12
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddExisitingAccountErrorDescription.
		]! !
!Portfolio class methodsFor: 'errorDescriptions' stamp: 'jgv 10/18/2023 17:36:35' prior: 50658278!
canNotAddPortfolioWithRepeatedAccounts
	^'No se puede agregar un portfolio que tenga cuentas repetidas'! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 17:36:54' prior: 50658601!
test12
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddPortfolioWithRepeatedAccounts.
		]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:43:20' prior: 50658578!
add: aFinancialService
	(aFinancialService isKindOf: ReceptiveAccount) ifTrue: [	
		(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			financialServices anySatisfy: [:registeredFinancialService |
					aFinancialService includes: registeredFinancialService 
				].
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:44:08' prior: 50658627!
add: aFinancialService
	(aFinancialService isKindOf: ReceptiveAccount) ifTrue: [	
		(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			(financialServices anySatisfy: [:registeredFinancialService |
					aFinancialService includes: registeredFinancialService 
				]) ifTrue: [ self error: Portfolio canNotAddPortfolioWithRepeatedAccounts ].
		].
	financialServices add: aFinancialService.! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 17:46:00' prior: 50658617!
test12

	aPortfolio add: accountOne.
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddPortfolioWithRepeatedAccounts.
		]! !

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:46:02'!
PASSED!

OrderedCollection new!

(OrderedCollection new) anySatisfy: [:elem | elem = 1].!
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:50:36' prior: 50658644!
add: aFinancialService
	aFinancialService includedIn: self.
	(aFinancialService isKindOf: ReceptiveAccount) ifTrue: [	
		(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			(financialServices anySatisfy: [:registeredFinancialService |
					aFinancialService includes: registeredFinancialService 
				]) ifTrue: [ self error: Portfolio canNotAddPortfolioWithRepeatedAccounts ].
		].
	financialServices add: aFinancialService.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:53:15'!
includedIn: aPortfolio.
	(aPortfolio includes: self).
! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:54:16' prior: 50658707!
add: aFinancialService
	(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].
	(aFinancialService isKindOf: ReceptiveAccount) ifTrue: [	
		(self includes: aFinancialService) ifTrue: [ self error: Portfolio canNotAddExisitingAccountErrorDescription ].
		].
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			(financialServices anySatisfy: [:registeredFinancialService |
					aFinancialService includes: registeredFinancialService 
				]) ifTrue: [ self error: Portfolio canNotAddPortfolioWithRepeatedAccounts ].
		].
	financialServices add: aFinancialService.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 17:55:26'!
canNotAddFinancialServiceErrorDescription
	^'Cannot add financial service to this portfolio'.! !

!methodRemoval: Portfolio class #canNotAddExisitingAccountErrorDescription stamp: 'jgv 10/18/2023 17:55:33'!
canNotAddExisitingAccountErrorDescription
	^'Cannot add an account that already exists in the portfolio'.!

!methodRemoval: Portfolio class #canNotAddPortfolioWithRepeatedAccounts stamp: 'jgv 10/18/2023 17:55:41'!
canNotAddPortfolioWithRepeatedAccounts
	^'No se puede agregar un portfolio que tenga cuentas repetidas'!
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:56:56' prior: 50658732!
add: aFinancialService
	(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			(financialServices anySatisfy: [:registeredFinancialService |
					aFinancialService includes: registeredFinancialService 
				]) ifTrue: [ self error: Portfolio canNotAddPortfolioWithRepeatedAccounts ].
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:57:29'!
includedIn: aPortfolio

	^ financialServices anySatisfy: [:registeredFinancialService |
					aPortfolio includes: registeredFinancialService 
				]! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:57:29' prior: 50658775!
add: aFinancialService
	(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [
			(self includedIn: aFinancialService) ifTrue: [ self error: Portfolio canNotAddPortfolioWithRepeatedAccounts ].
		].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:57:44' prior: 50658800!
add: aFinancialService
	(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 17:58:09' prior: 50658792!
includedIn: aPortfolio
	^ financialServices anySatisfy: [:registeredFinancialService |
					aPortfolio includes: registeredFinancialService 
				]! !
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 17:58:55' prior: 50658727!
includedIn: aPortfolio.
	^aPortfolio includes: self.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'jgv 10/18/2023 17:58:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'jgv 10/18/2023 17:58:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'jgv 10/18/2023 17:58:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'jgv 10/18/2023 17:58:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'jgv 10/18/2023 17:58:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'jgv 10/18/2023 17:58:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'jgv 10/18/2023 17:58:58'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:59:01'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:59:01'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:59:01'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:59:01'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:59:01'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:59:01'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:59:01'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:59:01'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:59:01'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:59:01'!
ERROR!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:59:01'!
ERROR!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:59:01'!
ERROR!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 17:59:11' prior: 50657339!
test10
	aPortfolio add: accountOne. 
	
	self should: [ aPortfolio add: accountOne ]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:59:12'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:59:12'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:59:12'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:59:12'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:59:12'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:59:12'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:59:12'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:59:12'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:59:12'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:59:12'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:59:12'!
ERROR!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:59:12'!
ERROR!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 17:59:17' prior: 50657392!
test11
	
	aPortfolio add: anotherPortfolio.
	
	self should: [ aPortfolio add: accountThree]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:59:18'!
PASSED!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:59:18'!
ERROR!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:59:18'!
ERROR!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:59:27'!
PASSED!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:59:27'!
ERROR!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:59:27'!
ERROR!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 17:59:39' prior: 50658663!
test12

	aPortfolio add: accountOne.
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]! !

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 17:59:40'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:02:54'!
test13

	aPortfolio add: anotherPortfolio.
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]! !
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:07:35' prior: 50659041!
test13
	|aThirdPortfolio|
	
	aPortfolio add: anotherPortfolio.

	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountTwo.
	aThirdPortfolio add: anotherPortfolio.

	
	
	self should: [ anotherPortfolio add: accountTwo ]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]! !

!testRun: #PorfolioTest #test13 stamp: 'jgv 10/18/2023 18:07:37'!
FAILURE!

FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices includedInPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'jgv 10/18/2023 18:08:41'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices includedInPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'jgv 10/18/2023 18:08:59' prior: 50653974 overrides: 16920235!
initialize
	financialServices := OrderedCollection new.
	includedInPortfolios := OrderedCollection new.
! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 18:10:03' prior: 50658815!
add: aFinancialService
	(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].
	aFinancialService addTo: self.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 18:10:29'!
addTo: aPortfolio
	aPortfolio add: self.
! !
!ReceptiveAccount methodsFor: 'private' stamp: 'jgv 10/18/2023 18:10:49' prior: 50659100!
addTo: aPortfolio
	aPortfolio addFinancialService: self.
! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:11:50'!
addTo: aPorfolio
	includedInPortfolios add: aPorfolio.
	aPorfolio addFinancialService: self.! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:12:42'!
addFinancialService: aFinancialService
	financialServices add: aFinancialService.! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 18:13:27'!
PASSED!

!testRun: #PorfolioTest #test13 stamp: 'jgv 10/18/2023 18:13:27'!
FAILURE!

!testRun: #PorfolioTest #test13 stamp: 'jgv 10/18/2023 18:13:27'!
FAILURE!
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 18:22:20' prior: 50659092!
add: aFinancialService
	includedInPortfolios isEmpty ifTrue: [
				includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			includes: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifFalse: [
			(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].	
		].

	aFinancialService addTo: self.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 18:24:07' prior: 50659155!
add: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			includes: aFinancialService.
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].	
		].

	aFinancialService addTo: self.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 18:24:40' prior: 50659171!
add: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			includes: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].	
		].

	aFinancialService addTo: self.! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 18:28:30' prior: 50659187!
add: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			xxxxx: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].	
		].

	aFinancialService addTo: self.! !
!Portfolio methodsFor: 'nil' stamp: 'jgv 10/18/2023 18:29:11'!
xxxxx: aFinancialService
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:29:38' prior: 50659218!
xxxxx: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			xxxxx: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			(aFinancialService includedIn: self) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].	
		].
	! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 18:30:44' prior: 50659203!
add: aFinancialService
	self xxxxx: aFinancialService.
	aFinancialService addTo: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:31:12' prior: 50659222!
xxxxx: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				includedInPortfolios anySatisfy: [:parentPorfolio |
						^parentPorfolio 			xxxxx: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:31:21' prior: 50659243!
xxxxx: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			xxxxx: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'financialServices' stamp: 'jgv 10/18/2023 18:31:36' prior: 50659237!
add: aFinancialService
	(self xxxxx: aFinancialService) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].	.
	aFinancialService addTo: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:32:47'!
canAddFinalcialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			xxxxx: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:32:47' prior: 50659267!
add: aFinancialService
	(self canAddFinalcialService: aFinancialService) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].	.
	aFinancialService addTo: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:32:47' prior: 50659255!
xxxxx: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canAddFinalcialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:32:47' prior: 50659275!
canAddFinalcialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canAddFinalcialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !

!methodRemoval: Portfolio #xxxxx: stamp: 'jgv 10/18/2023 18:32:47'!
xxxxx: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canAddFinalcialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!

!testRun: #PorfolioTest #test13 stamp: 'jgv 10/18/2023 18:33:01'!
PASSED!
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:33:47'!
canAddFinancialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canAddFinalcialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:33:47' prior: 50659288!
add: aFinancialService
	(self canAddFinancialService: aFinancialService) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].	.
	aFinancialService addTo: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:33:47' prior: 50659310!
canAddFinalcialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canAddFinancialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:33:47' prior: 50659365!
canAddFinancialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canAddFinancialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !

!methodRemoval: Portfolio #canAddFinalcialService: stamp: 'jgv 10/18/2023 18:33:47'!
canAddFinalcialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canAddFinancialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	!
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:34:54' prior: 50659400!
canAddFinancialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canAddFinancialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:35:05'!
canNotAddFinancialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canAddFinancialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:35:05' prior: 50659426!
canAddFinancialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canNotAddFinancialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:35:05' prior: 50659378!
add: aFinancialService
	(self canNotAddFinancialService: aFinancialService) ifTrue: [ self error: Portfolio canNotAddFinancialServiceErrorDescription ].	.
	aFinancialService addTo: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'jgv 10/18/2023 18:35:05' prior: 50659439!
canNotAddFinancialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canNotAddFinancialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !

!methodRemoval: Portfolio #canAddFinancialService: stamp: 'jgv 10/18/2023 18:35:05'!
canAddFinancialService: aFinancialService
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canNotAddFinancialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	!

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

!testRun: #PorfolioTest #test13 stamp: 'jgv 10/18/2023 18:35:10'!
PASSED!

----SNAPSHOT----(18 October 2023 18:36:16) CuisUniversity-Portfolio.image priorSource: 10424145!
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:40:45' prior: 50659474!
canNotAddFinancialService: aFinancialService
	(self includesFinancialServiceInParentPortfolio: aFinancialService) or: [self includesFinancialServiceInChildPortfolio: aFinancialService].
	includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canNotAddFinancialService: aFinancialService
					].				
			].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:41:06'!
includesFinancialServiceInParentPortfolio: aFinancialService 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:41:20' prior: 50659534!
canNotAddFinancialService: aFinancialService
	(self includesFinancialServiceInParentPortfolio: aFinancialService) or: [self includesFinancialServiceInChildPortfolio: aFinancialService].
	includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
	! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:42:19' prior: 50659552!
includesFinancialServiceInParentPortfolio: aFinancialService 
		includedInPortfolios isEmpty ifFalse: [
				^includedInPortfolios anySatisfy: [:parentPorfolio |
						parentPorfolio 			canNotAddFinancialService: aFinancialService
					].				
			].
		^false.! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:42:27'!
includesFinancialServiceInChildPortfolio: aFinancialService 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:42:42' prior: 50659559!
canNotAddFinancialService: aFinancialService
	(self includesFinancialServiceInParentPortfolio: aFinancialService) or: [self includesFinancialServiceInChildPortfolio: aFinancialService].
	! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:43:17' prior: 50659582!
includesFinancialServiceInChildPortfolio: aFinancialService 
		includedInPortfolios isEmpty ifTrue: [
			^(aFinancialService includedIn: self)
		].
		^false.! !
!Portfolio methodsFor: 'financialServices-private' stamp: 'jgv 10/18/2023 18:43:34' prior: 50659588!
canNotAddFinancialService: aFinancialService
	^(self includesFinancialServiceInParentPortfolio: aFinancialService) or: [self includesFinancialServiceInChildPortfolio: aFinancialService].
	! !

!testRun: #PorfolioTest #test01 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test02 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test03 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test04 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test05 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test06 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test07 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test08 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test09 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test10 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test11 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test12 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!

!testRun: #PorfolioTest #test13 stamp: 'jgv 10/18/2023 18:43:40'!
PASSED!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:45:32'!
test01AnEmptyPortfolioBalanceEqualsCero	
	self assert: aPortfolio balance equals: 0.! !

!methodRemoval: PorfolioTest #test01 stamp: 'jgv 10/18/2023 18:45:32'!
test01	
	self assert: aPortfolio balance equals: 0.!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:46:12'!
test02APorfolioBalanceEqualsTheSumOfItsAccountsBalance

	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	self assert: 250 equals: aPortfolio balance.! !

!methodRemoval: PorfolioTest #test02 stamp: 'jgv 10/18/2023 18:46:12'!
test02

	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	self assert: 250 equals: aPortfolio balance.!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:46:48'!
test03APortfolioBalanceEqualsToTheSumOfItsPortfoliosAndAccountsBalances	.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	aPortfolio add: anotherPortfolio.
	
	self assert: 500 equals: aPortfolio balance.
	! !

!methodRemoval: PorfolioTest #test03 stamp: 'jgv 10/18/2023 18:46:48'!
test03	.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	aPortfolio add: anotherPortfolio.
	
	self assert: 500 equals: aPortfolio balance.
	!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:47:07'!
test04AnEmptyPorfolioHasNoRegisteredTransactions.
	
	self deny: (aPortfolio hasRegistered: transactionOne).
	! !

!methodRemoval: PorfolioTest #test04 stamp: 'jgv 10/18/2023 18:47:07'!
test04.
	
	self deny: (aPortfolio hasRegistered: transactionOne).
	!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:47:38'!
test05APortfolioHasAllItsAccountsTransactionsRegistered
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	self assert: (aPortfolio hasRegistered: transactionThree).! !

!methodRemoval: PorfolioTest #test05 stamp: 'jgv 10/18/2023 18:47:38'!
test05
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	self assert: (aPortfolio hasRegistered: transactionThree).!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:48:00'!
test06APortfolioHasAllItsPortfoliosAndAccountsTransactionsRegistered
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	aPortfolio add: anotherPortfolio.
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	self assert: (aPortfolio hasRegistered: transactionThree).
	self assert: (aPortfolio hasRegistered: transactionFour).! !

!methodRemoval: PorfolioTest #test06 stamp: 'jgv 10/18/2023 18:48:00'!
test06
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	aPortfolio add: anotherPortfolio.
	
	self assert: (aPortfolio hasRegistered: transactionOne).
	self assert: (aPortfolio hasRegistered: transactionTwo).
	self assert: (aPortfolio hasRegistered: transactionThree).
	self assert: (aPortfolio hasRegistered: transactionFour).!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:48:16'!
test07AnEmptyPortfolioHasNoTransactions
	self assert: (OrderedCollection new) equals: aPortfolio transactions.! !

!methodRemoval: PorfolioTest #test07 stamp: 'jgv 10/18/2023 18:48:16'!
test07
	self assert: (OrderedCollection new) equals: aPortfolio transactions.!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:48:36'!
test08APortfolioHasAllItsAccoustTransactions

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.

	self assert:  transactionCollection equals: aPortfolio transactions.! !

!methodRemoval: PorfolioTest #test08 stamp: 'jgv 10/18/2023 18:48:36'!
test08

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.

	self assert:  transactionCollection equals: aPortfolio transactions.!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:48:54'!
test09APortfolioHasAllItsPorfoliosAndAccountsTransactions

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree with: transactionFour with: transactionFive.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	aPortfolio add: anotherPortfolio.

	self assert:  transactionCollection equals: aPortfolio transactions.! !

!methodRemoval: PorfolioTest #test09 stamp: 'jgv 10/18/2023 18:48:54'!
test09

	| transactionCollection |
	transactionCollection := OrderedCollection with: transactionOne with: 	transactionTwo with: transactionThree with: transactionFour with: transactionFive.
	
	aPortfolio add: accountOne.
	aPortfolio add: accountTwo.
	
	aPortfolio add: anotherPortfolio.

	self assert:  transactionCollection equals: aPortfolio transactions.!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:49:35'!
test10CannotAddAnAlreadyIncludedAccount
	aPortfolio add: accountOne. 
	
	self should: [ aPortfolio add: accountOne ]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]! !

!methodRemoval: PorfolioTest #test10 stamp: 'jgv 10/18/2023 18:49:35'!
test10
	aPortfolio add: accountOne. 
	
	self should: [ aPortfolio add: accountOne ]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:51:26'!
test11CanNotAddAnAccountAlreadyIncludedInAnAlreadyIncludedPortfolio
	
	aPortfolio add: anotherPortfolio.
	
	self should: [ aPortfolio add: accountThree]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]! !

!methodRemoval: PorfolioTest #test11 stamp: 'jgv 10/18/2023 18:51:26'!
test11
	
	aPortfolio add: anotherPortfolio.
	
	self should: [ aPortfolio add: accountThree]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:51:56'!
test12CannotAddAPortfolioWithAlreadyAddedAccounts

	aPortfolio add: accountOne.
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]! !

!methodRemoval: PorfolioTest #test12 stamp: 'jgv 10/18/2023 18:51:56'!
test12

	aPortfolio add: accountOne.
	
	self should: [ aPortfolio add: aPortfolio]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]!
!PorfolioTest methodsFor: 'tests' stamp: 'jgv 10/18/2023 18:53:18'!
test13CanNotAddAnAccountIncludedInAPortfolioIncludingTheTargetPortfolio
	|aThirdPortfolio|
	
	aPortfolio add: anotherPortfolio.

	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountTwo.
	aThirdPortfolio add: anotherPortfolio.

	
	
	self should: [ anotherPortfolio add: accountTwo ]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]! !

!methodRemoval: PorfolioTest #test13 stamp: 'jgv 10/18/2023 18:53:19'!
test13
	|aThirdPortfolio|
	
	aPortfolio add: anotherPortfolio.

	aThirdPortfolio := Portfolio new.
	aThirdPortfolio add: accountTwo.
	aThirdPortfolio add: anotherPortfolio.

	
	
	self should: [ anotherPortfolio add: accountTwo ]
	raise: Error
	withExceptionDo: [:anError |
			self assert: anError messageText equals: Portfolio canNotAddFinancialServiceErrorDescription .
		]!

----SNAPSHOT----(18 October 2023 18:53:28) CuisUniversity-Portfolio.image priorSource: 10492129!